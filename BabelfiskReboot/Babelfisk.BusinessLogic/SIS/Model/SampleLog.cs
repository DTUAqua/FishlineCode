//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace Babelfisk.BusinessLogic.SIS.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CruiseInformation))]
    [KnownType(typeof(L_SampleType))]
    [KnownType(typeof(ShipData))]
    public partial class SampleLog
    {
        #region Primitive Properties
        [DataMember]
        public virtual int sampleID
        {
            get;
            set;
        }
        [DataMember]
        public virtual int cruiseID
        {
            get { return _cruiseID; }
            set
            {
                if (_cruiseID != value)
                {
                    if (CruiseInformation != null && CruiseInformation.cruiseID != value)
                    {
                        CruiseInformation = null;
                    }
                    _cruiseID = value;
                }
            }
        }
        private int _cruiseID;
        [DataMember]
        public virtual System.DateTime logTime
        {
            get;
            set;
        }
        [DataMember]
        public virtual string posLat
        {
            get;
            set;
        }
        [DataMember]
        public virtual string posLon
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<double> posLatDec
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<double> posLonDec
        {
            get;
            set;
        }
        [DataMember]
        public virtual string sampleCode
        {
            get { return _sampleCode; }
            set
            {
                if (_sampleCode != value)
                {
                    if (L_SampleType != null && L_SampleType.sampleCode != value)
                    {
                        L_SampleType = null;
                    }
                    _sampleCode = value;
                }
            }
        }
        private string _sampleCode;

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual CruiseInformation CruiseInformation
        {
            get { return _cruiseInformation; }
            set
            {
                if (!ReferenceEquals(_cruiseInformation, value))
                {
                    var previousValue = _cruiseInformation;
                    _cruiseInformation = value;
                    FixupCruiseInformation(previousValue);
                }
            }
        }
        private CruiseInformation _cruiseInformation;
        
    
        [DataMember]
        public virtual L_SampleType L_SampleType
        {
            get { return _l_SampleType; }
            set
            {
                if (!ReferenceEquals(_l_SampleType, value))
                {
                    var previousValue = _l_SampleType;
                    _l_SampleType = value;
                    FixupL_SampleType(previousValue);
                }
            }
        }
        private L_SampleType _l_SampleType;
        
    
        [DataMember]
        public virtual ICollection<ShipData> ShipData
        {
            get
            {
                if (_shipData == null)
                {
                    var newCollection = new FixupCollection<ShipData>();
                    newCollection.CollectionChanged += FixupShipData;
                    _shipData = newCollection;
                }
                return _shipData;
            }
            set
            {
                if (!ReferenceEquals(_shipData, value))
                {
                    var previousValue = _shipData as FixupCollection<ShipData>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupShipData;
                    }
                    _shipData = value;
                    var newValue = value as FixupCollection<ShipData>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupShipData;
                    }
                }
            }
        }
        private ICollection<ShipData> _shipData;

        #endregion
        #region Association Fixup
    
        private void FixupCruiseInformation(CruiseInformation previousValue)
        {
            if (previousValue != null && previousValue.SampleLog.Contains(this))
            {
                previousValue.SampleLog.Remove(this);
            }
    
            if (CruiseInformation != null)
            {
                if (!CruiseInformation.SampleLog.Contains(this))
                {
                    CruiseInformation.SampleLog.Add(this);
                }
                if (cruiseID != CruiseInformation.cruiseID)
                {
                    cruiseID = CruiseInformation.cruiseID;
                }
            }
        }
    
        private void FixupL_SampleType(L_SampleType previousValue)
        {
            if (previousValue != null && previousValue.SampleLog.Contains(this))
            {
                previousValue.SampleLog.Remove(this);
            }
    
            if (L_SampleType != null)
            {
                if (!L_SampleType.SampleLog.Contains(this))
                {
                    L_SampleType.SampleLog.Add(this);
                }
                if (sampleCode != L_SampleType.sampleCode)
                {
                    sampleCode = L_SampleType.sampleCode;
                }
            }
        }
    
        private void FixupShipData(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ShipData item in e.NewItems)
                {
                    item.SampleLog = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ShipData item in e.OldItems)
                {
                    if (ReferenceEquals(item.SampleLog, this))
                    {
                        item.SampleLog = null;
                    }
                }
            }
        }

        #endregion
    }
}
