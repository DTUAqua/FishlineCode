//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace Babelfisk.BusinessLogic.SIS.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CruiseInformation))]
    [KnownType(typeof(TrawlData))]
    public partial class TrawlLog
    {
        #region Primitive Properties
        [DataMember]
        public virtual int sampleID
        {
            get;
            set;
        }
        [DataMember]
        public virtual int cruiseID
        {
            get { return _cruiseID; }
            set
            {
                if (_cruiseID != value)
                {
                    if (CruiseInformation != null && CruiseInformation.cruiseID != value)
                    {
                        CruiseInformation = null;
                    }
                    _cruiseID = value;
                }
            }
        }
        private int _cruiseID;
        [DataMember]
        public virtual System.DateTime logTime
        {
            get;
            set;
        }
        [DataMember]
        public virtual string posLat
        {
            get;
            set;
        }
        [DataMember]
        public virtual string posLon
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<double> posLatDec
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<double> posLonDec
        {
            get;
            set;
        }
        [DataMember]
        public virtual string sampleCode
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual CruiseInformation CruiseInformation
        {
            get { return _cruiseInformation; }
            set
            {
                if (!ReferenceEquals(_cruiseInformation, value))
                {
                    var previousValue = _cruiseInformation;
                    _cruiseInformation = value;
                    FixupCruiseInformation(previousValue);
                }
            }
        }
        private CruiseInformation _cruiseInformation;
        
    
        [DataMember]
        public virtual ICollection<TrawlData> TrawlData
        {
            get
            {
                if (_trawlData == null)
                {
                    var newCollection = new FixupCollection<TrawlData>();
                    newCollection.CollectionChanged += FixupTrawlData;
                    _trawlData = newCollection;
                }
                return _trawlData;
            }
            set
            {
                if (!ReferenceEquals(_trawlData, value))
                {
                    var previousValue = _trawlData as FixupCollection<TrawlData>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTrawlData;
                    }
                    _trawlData = value;
                    var newValue = value as FixupCollection<TrawlData>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTrawlData;
                    }
                }
            }
        }
        private ICollection<TrawlData> _trawlData;

        #endregion
        #region Association Fixup
    
        private void FixupCruiseInformation(CruiseInformation previousValue)
        {
            if (previousValue != null && previousValue.TrawlLog.Contains(this))
            {
                previousValue.TrawlLog.Remove(this);
            }
    
            if (CruiseInformation != null)
            {
                if (!CruiseInformation.TrawlLog.Contains(this))
                {
                    CruiseInformation.TrawlLog.Add(this);
                }
                if (cruiseID != CruiseInformation.cruiseID)
                {
                    cruiseID = CruiseInformation.cruiseID;
                }
            }
        }
    
        private void FixupTrawlData(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TrawlData item in e.NewItems)
                {
                    item.TrawlLog = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TrawlData item in e.OldItems)
                {
                    if (ReferenceEquals(item.TrawlLog, this))
                    {
                        item.TrawlLog = null;
                    }
                }
            }
        }

        #endregion
    }
}
