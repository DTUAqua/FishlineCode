//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace Babelfisk.BusinessLogic.SIS.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(L_ParamListe))]
    [KnownType(typeof(SampleLog))]
    public partial class ShipData
    {
        #region Primitive Properties
        [DataMember]
        public virtual int sampleID
        {
            get { return _sampleID; }
            set
            {
                if (_sampleID != value)
                {
                    if (SampleLog != null && SampleLog.sampleID != value)
                    {
                        SampleLog = null;
                    }
                    _sampleID = value;
                }
            }
        }
        private int _sampleID;
        [DataMember]
        public virtual string ParamCode
        {
            get { return _paramCode; }
            set
            {
                if (_paramCode != value)
                {
                    if (L_ParamListe != null && L_ParamListe.paramCode != value)
                    {
                        L_ParamListe = null;
                    }
                    _paramCode = value;
                }
            }
        }
        private string _paramCode;
        [DataMember]
        public virtual Nullable<float> Result
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual L_ParamListe L_ParamListe
        {
            get { return _l_ParamListe; }
            set
            {
                if (!ReferenceEquals(_l_ParamListe, value))
                {
                    var previousValue = _l_ParamListe;
                    _l_ParamListe = value;
                    FixupL_ParamListe(previousValue);
                }
            }
        }
        private L_ParamListe _l_ParamListe;
        
    
        [DataMember]
        public virtual SampleLog SampleLog
        {
            get { return _sampleLog; }
            set
            {
                if (!ReferenceEquals(_sampleLog, value))
                {
                    var previousValue = _sampleLog;
                    _sampleLog = value;
                    FixupSampleLog(previousValue);
                }
            }
        }
        private SampleLog _sampleLog;

        #endregion
        #region Association Fixup
    
        private void FixupL_ParamListe(L_ParamListe previousValue)
        {
            if (previousValue != null && previousValue.ShipData.Contains(this))
            {
                previousValue.ShipData.Remove(this);
            }
    
            if (L_ParamListe != null)
            {
                if (!L_ParamListe.ShipData.Contains(this))
                {
                    L_ParamListe.ShipData.Add(this);
                }
                if (ParamCode != L_ParamListe.paramCode)
                {
                    ParamCode = L_ParamListe.paramCode;
                }
            }
        }
    
        private void FixupSampleLog(SampleLog previousValue)
        {
            if (previousValue != null && previousValue.ShipData.Contains(this))
            {
                previousValue.ShipData.Remove(this);
            }
    
            if (SampleLog != null)
            {
                if (!SampleLog.ShipData.Contains(this))
                {
                    SampleLog.ShipData.Add(this);
                }
                if (sampleID != SampleLog.sampleID)
                {
                    sampleID = SampleLog.sampleID;
                }
            }
        }

        #endregion
    }
}
