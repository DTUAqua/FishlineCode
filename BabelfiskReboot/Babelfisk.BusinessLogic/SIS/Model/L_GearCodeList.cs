//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace Babelfisk.BusinessLogic.SIS.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(GearData))]
    [KnownType(typeof(L_GearTypeList))]
    public partial class L_GearCodeList
    {
        #region Primitive Properties
        [DataMember]
        public virtual int gearID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string gearCode
        {
            get;
            set;
        }
        [DataMember]
        public virtual string gearType
        {
            get { return _gearType; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_gearType != value)
                    {
                        if (L_GearTypeList != null && L_GearTypeList.gearType != value)
                        {
                            L_GearTypeList = null;
                        }
                        _gearType = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _gearType;
        [DataMember]
        public virtual Nullable<System.DateTime> gearDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual string gearName
        {
            get;
            set;
        }
        [DataMember]
        public virtual string init
        {
            get;
            set;
        }
        [DataMember]
        public virtual string gearText
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<int> sampleFreq
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual ICollection<GearData> GearData
        {
            get
            {
                if (_gearData == null)
                {
                    var newCollection = new FixupCollection<GearData>();
                    newCollection.CollectionChanged += FixupGearData;
                    _gearData = newCollection;
                }
                return _gearData;
            }
            set
            {
                if (!ReferenceEquals(_gearData, value))
                {
                    var previousValue = _gearData as FixupCollection<GearData>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGearData;
                    }
                    _gearData = value;
                    var newValue = value as FixupCollection<GearData>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGearData;
                    }
                }
            }
        }
        private ICollection<GearData> _gearData;
        
    
        [DataMember]
        public virtual L_GearTypeList L_GearTypeList
        {
            get { return _l_GearTypeList; }
            set
            {
                if (!ReferenceEquals(_l_GearTypeList, value))
                {
                    var previousValue = _l_GearTypeList;
                    _l_GearTypeList = value;
                    FixupL_GearTypeList(previousValue);
                }
            }
        }
        private L_GearTypeList _l_GearTypeList;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupL_GearTypeList(L_GearTypeList previousValue)
        {
            if (previousValue != null && previousValue.L_GearCodeList.Contains(this))
            {
                previousValue.L_GearCodeList.Remove(this);
            }
    
            if (L_GearTypeList != null)
            {
                if (!L_GearTypeList.L_GearCodeList.Contains(this))
                {
                    L_GearTypeList.L_GearCodeList.Add(this);
                }
                if (gearType != L_GearTypeList.gearType)
                {
                    gearType = L_GearTypeList.gearType;
                }
            }
            else if (!_settingFK)
            {
                gearType = null;
            }
        }
    
        private void FixupGearData(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GearData item in e.NewItems)
                {
                    item.L_GearCodeList = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GearData item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_GearCodeList, this))
                    {
                        item.L_GearCodeList = null;
                    }
                }
            }
        }

        #endregion

    }
}
