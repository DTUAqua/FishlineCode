//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace Babelfisk.Entities.SprattusSecurity
{
    public partial class SprattusSecurityContainer : ObjectContext
    {
        public const string ConnectionString = "name=SprattusSecurityContainer";
        public const string ContainerName = "SprattusSecurityContainer";
    
        #region Constructors
    
        public SprattusSecurityContainer()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public SprattusSecurityContainer(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public SprattusSecurityContainer(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<ActivityLog> ActivityLog
        {
            get { return _activityLog  ?? (_activityLog = CreateObjectSet<ActivityLog>("ActivityLog")); }
        }
        private ObjectSet<ActivityLog> _activityLog;
    
        public ObjectSet<ExceptionLog> ExceptionLog
        {
            get { return _exceptionLog  ?? (_exceptionLog = CreateObjectSet<ExceptionLog>("ExceptionLog")); }
        }
        private ObjectSet<ExceptionLog> _exceptionLog;
    
        public ObjectSet<FishLineTasks> FishLineTasks
        {
            get { return _fishLineTasks  ?? (_fishLineTasks = CreateObjectSet<FishLineTasks>("FishLineTasks")); }
        }
        private ObjectSet<FishLineTasks> _fishLineTasks;
    
        public ObjectSet<L_Country> L_Country
        {
            get { return _l_Country  ?? (_l_Country = CreateObjectSet<L_Country>("L_Country")); }
        }
        private ObjectSet<L_Country> _l_Country;
    
        public ObjectSet<Role> Role
        {
            get { return _role  ?? (_role = CreateObjectSet<Role>("Role")); }
        }
        private ObjectSet<Role> _role;
    
        public ObjectSet<Users> Users
        {
            get { return _users  ?? (_users = CreateObjectSet<Users>("Users")); }
        }
        private ObjectSet<Users> _users;

        #endregion
    }
}
