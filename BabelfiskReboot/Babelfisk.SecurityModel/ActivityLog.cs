//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.SprattusSecurity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Role))]
    public partial class ActivityLog: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ActivityLogId
        {
            get { return _activityLogId; }
            set
            {
                if (_activityLogId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ActivityLogId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _activityLogId = value;
                    OnPropertyChanged("ActivityLogId");
                }
            }
        }
        private int _activityLogId;
    
        [DataMember]
        public System.DateTime Time
        {
            get { return _time; }
            set
            {
                if (_time != value)
                {
                    _time = value;
                    OnPropertyChanged("Time");
                }
            }
        }
        private System.DateTime _time;
    
        [DataMember]
        public string UserName
        {
            get { return _userName; }
            set
            {
                if (_userName != value)
                {
                    _userName = value;
                    OnPropertyChanged("UserName");
                }
            }
        }
        private string _userName;
    
        [DataMember]
        public int RoleId
        {
            get { return _roleId; }
            set
            {
                if (_roleId != value)
                {
                    ChangeTracker.RecordOriginalValue("RoleId", _roleId);
                    if (!IsDeserializing)
                    {
                        if (Role != null && Role.RoleId_PK != value)
                        {
                            Role = null;
                        }
                    }
                    _roleId = value;
                    OnPropertyChanged("RoleId");
                }
            }
        }
        private int _roleId;
    
        [DataMember]
        public string Country
        {
            get { return _country; }
            set
            {
                if (_country != value)
                {
                    _country = value;
                    OnPropertyChanged("Country");
                }
            }
        }
        private string _country;
    
        [DataMember]
        public string Page
        {
            get { return _page; }
            set
            {
                if (_page != value)
                {
                    _page = value;
                    OnPropertyChanged("Page");
                }
            }
        }
        private string _page;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Role Role
        {
            get { return _role; }
            set
            {
                if (!ReferenceEquals(_role, value))
                {
                    var previousValue = _role;
                    _role = value;
                    FixupRole(previousValue);
                    OnNavigationPropertyChanged("Role");
                }
            }
        }
        private Role _role;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Role = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupRole(Role previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ActivityLog.Contains(this))
            {
                previousValue.ActivityLog.Remove(this);
            }
    
            if (Role != null)
            {
                if (!Role.ActivityLog.Contains(this))
                {
                    Role.ActivityLog.Add(this);
                }
    
                RoleId = Role.RoleId_PK;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Role")
                    && (ChangeTracker.OriginalValues["Role"] == Role))
                {
                    ChangeTracker.OriginalValues.Remove("Role");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Role", previousValue);
                }
                if (Role != null && !Role.ChangeTracker.ChangeTrackingEnabled)
                {
                    Role.StartTracking();
                }
            }
        }

        #endregion
    }
}
