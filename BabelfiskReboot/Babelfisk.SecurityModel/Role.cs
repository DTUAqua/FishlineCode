//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.SprattusSecurity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ActivityLog))]
    [KnownType(typeof(FishLineTasks))]
    [KnownType(typeof(Users))]
    public partial class Role: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int RoleId_PK
        {
            get { return _roleId_PK; }
            set
            {
                if (_roleId_PK != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'RoleId_PK' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _roleId_PK = value;
                    OnPropertyChanged("RoleId_PK");
                }
            }
        }
        private int _roleId_PK;
    
        [DataMember]
        public string Role1
        {
            get { return _role1; }
            set
            {
                if (_role1 != value)
                {
                    _role1 = value;
                    OnPropertyChanged("Role1");
                }
            }
        }
        private string _role1;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ActivityLog> ActivityLog
        {
            get
            {
                if (_activityLog == null)
                {
                    _activityLog = new TrackableCollection<ActivityLog>();
                    _activityLog.CollectionChanged += FixupActivityLog;
                }
                return _activityLog;
            }
            set
            {
                if (!ReferenceEquals(_activityLog, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_activityLog != null)
                    {
                        _activityLog.CollectionChanged -= FixupActivityLog;
                    }
                    _activityLog = value;
                    if (_activityLog != null)
                    {
                        _activityLog.CollectionChanged += FixupActivityLog;
                    }
                    OnNavigationPropertyChanged("ActivityLog");
                }
            }
        }
        private TrackableCollection<ActivityLog> _activityLog;
    
        [DataMember]
        public TrackableCollection<FishLineTasks> FishLineTasks
        {
            get
            {
                if (_fishLineTasks == null)
                {
                    _fishLineTasks = new TrackableCollection<FishLineTasks>();
                    _fishLineTasks.CollectionChanged += FixupFishLineTasks;
                }
                return _fishLineTasks;
            }
            set
            {
                if (!ReferenceEquals(_fishLineTasks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_fishLineTasks != null)
                    {
                        _fishLineTasks.CollectionChanged -= FixupFishLineTasks;
                    }
                    _fishLineTasks = value;
                    if (_fishLineTasks != null)
                    {
                        _fishLineTasks.CollectionChanged += FixupFishLineTasks;
                    }
                    OnNavigationPropertyChanged("FishLineTasks");
                }
            }
        }
        private TrackableCollection<FishLineTasks> _fishLineTasks;
    
        [DataMember]
        public TrackableCollection<Users> Users
        {
            get
            {
                if (_users == null)
                {
                    _users = new TrackableCollection<Users>();
                    _users.CollectionChanged += FixupUsers;
                }
                return _users;
            }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_users != null)
                    {
                        _users.CollectionChanged -= FixupUsers;
                    }
                    _users = value;
                    if (_users != null)
                    {
                        _users.CollectionChanged += FixupUsers;
                    }
                    OnNavigationPropertyChanged("Users");
                }
            }
        }
        private TrackableCollection<Users> _users;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ActivityLog.Clear();
            FishLineTasks.Clear();
            Users.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupActivityLog(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ActivityLog item in e.NewItems)
                {
                    item.Role = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ActivityLog", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ActivityLog item in e.OldItems)
                {
                    if (ReferenceEquals(item.Role, this))
                    {
                        item.Role = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ActivityLog", item);
                    }
                }
            }
        }
    
        private void FixupFishLineTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FishLineTasks item in e.NewItems)
                {
                    if (!item.Role.Contains(this))
                    {
                        item.Role.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FishLineTasks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FishLineTasks item in e.OldItems)
                {
                    if (item.Role.Contains(this))
                    {
                        item.Role.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FishLineTasks", item);
                    }
                }
            }
        }
    
        private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Users item in e.NewItems)
                {
                    if (!item.Role.Contains(this))
                    {
                        item.Role.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Users", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Users item in e.OldItems)
                {
                    if (item.Role.Contains(this))
                    {
                        item.Role.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Users", item);
                    }
                }
            }
        }

        #endregion
    }
}
