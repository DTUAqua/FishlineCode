//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Warehouse.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SpeciesListRaised))]
    public partial class AnimalRaised: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int animalRaisedId
        {
            get { return _animalRaisedId; }
            set
            {
                if (_animalRaisedId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'animalRaisedId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _animalRaisedId = value;
                    OnPropertyChanged("animalRaisedId");
                }
            }
        }
        private int _animalRaisedId;
    
        [DataMember]
        public int speciesListRaisedId
        {
            get { return _speciesListRaisedId; }
            set
            {
                if (_speciesListRaisedId != value)
                {
                    ChangeTracker.RecordOriginalValue("speciesListRaisedId", _speciesListRaisedId);
                    if (!IsDeserializing)
                    {
                        if (SpeciesListRaised != null && SpeciesListRaised.speciesListRaisedId != value)
                        {
                            SpeciesListRaised = null;
                        }
                    }
                    _speciesListRaisedId = value;
                    OnPropertyChanged("speciesListRaisedId");
                }
            }
        }
        private int _speciesListRaisedId;
    
        [DataMember]
        public int year
        {
            get { return _year; }
            set
            {
                if (_year != value)
                {
                    _year = value;
                    OnPropertyChanged("year");
                }
            }
        }
        private int _year;
    
        [DataMember]
        public string cruise
        {
            get { return _cruise; }
            set
            {
                if (_cruise != value)
                {
                    _cruise = value;
                    OnPropertyChanged("cruise");
                }
            }
        }
        private string _cruise;
    
        [DataMember]
        public string trip
        {
            get { return _trip; }
            set
            {
                if (_trip != value)
                {
                    _trip = value;
                    OnPropertyChanged("trip");
                }
            }
        }
        private string _trip;
    
        [DataMember]
        public string tripType
        {
            get { return _tripType; }
            set
            {
                if (_tripType != value)
                {
                    _tripType = value;
                    OnPropertyChanged("tripType");
                }
            }
        }
        private string _tripType;
    
        [DataMember]
        public string station
        {
            get { return _station; }
            set
            {
                if (_station != value)
                {
                    _station = value;
                    OnPropertyChanged("station");
                }
            }
        }
        private string _station;
    
        [DataMember]
        public System.DateTime dateGearStart
        {
            get { return _dateGearStart; }
            set
            {
                if (_dateGearStart != value)
                {
                    _dateGearStart = value;
                    OnPropertyChanged("dateGearStart");
                }
            }
        }
        private System.DateTime _dateGearStart;
    
        [DataMember]
        public Nullable<int> quarterGearStart
        {
            get { return _quarterGearStart; }
            set
            {
                if (_quarterGearStart != value)
                {
                    _quarterGearStart = value;
                    OnPropertyChanged("quarterGearStart");
                }
            }
        }
        private Nullable<int> _quarterGearStart;
    
        [DataMember]
        public string dfuArea
        {
            get { return _dfuArea; }
            set
            {
                if (_dfuArea != value)
                {
                    _dfuArea = value;
                    OnPropertyChanged("dfuArea");
                }
            }
        }
        private string _dfuArea;
    
        [DataMember]
        public string statisticalRectangle
        {
            get { return _statisticalRectangle; }
            set
            {
                if (_statisticalRectangle != value)
                {
                    _statisticalRectangle = value;
                    OnPropertyChanged("statisticalRectangle");
                }
            }
        }
        private string _statisticalRectangle;
    
        [DataMember]
        public string gearQuality
        {
            get { return _gearQuality; }
            set
            {
                if (_gearQuality != value)
                {
                    _gearQuality = value;
                    OnPropertyChanged("gearQuality");
                }
            }
        }
        private string _gearQuality;
    
        [DataMember]
        public string gearType
        {
            get { return _gearType; }
            set
            {
                if (_gearType != value)
                {
                    _gearType = value;
                    OnPropertyChanged("gearType");
                }
            }
        }
        private string _gearType;
    
        [DataMember]
        public Nullable<decimal> meshSize
        {
            get { return _meshSize; }
            set
            {
                if (_meshSize != value)
                {
                    _meshSize = value;
                    OnPropertyChanged("meshSize");
                }
            }
        }
        private Nullable<decimal> _meshSize;
    
        [DataMember]
        public string speciesCode
        {
            get { return _speciesCode; }
            set
            {
                if (_speciesCode != value)
                {
                    _speciesCode = value;
                    OnPropertyChanged("speciesCode");
                }
            }
        }
        private string _speciesCode;
    
        [DataMember]
        public string stock
        {
            get { return _stock; }
            set
            {
                if (_stock != value)
                {
                    _stock = value;
                    OnPropertyChanged("stock");
                }
            }
        }
        private string _stock;
    
        [DataMember]
        public string landingCategory
        {
            get { return _landingCategory; }
            set
            {
                if (_landingCategory != value)
                {
                    _landingCategory = value;
                    OnPropertyChanged("landingCategory");
                }
            }
        }
        private string _landingCategory;
    
        [DataMember]
        public string dfuBase_Category
        {
            get { return _dfuBase_Category; }
            set
            {
                if (_dfuBase_Category != value)
                {
                    _dfuBase_Category = value;
                    OnPropertyChanged("dfuBase_Category");
                }
            }
        }
        private string _dfuBase_Category;
    
        [DataMember]
        public Nullable<int> sizeSortingEU
        {
            get { return _sizeSortingEU; }
            set
            {
                if (_sizeSortingEU != value)
                {
                    _sizeSortingEU = value;
                    OnPropertyChanged("sizeSortingEU");
                }
            }
        }
        private Nullable<int> _sizeSortingEU;
    
        [DataMember]
        public string sizeSortingDFU
        {
            get { return _sizeSortingDFU; }
            set
            {
                if (_sizeSortingDFU != value)
                {
                    _sizeSortingDFU = value;
                    OnPropertyChanged("sizeSortingDFU");
                }
            }
        }
        private string _sizeSortingDFU;
    
        [DataMember]
        public string speciesList_sexCode
        {
            get { return _speciesList_sexCode; }
            set
            {
                if (_speciesList_sexCode != value)
                {
                    _speciesList_sexCode = value;
                    OnPropertyChanged("speciesList_sexCode");
                }
            }
        }
        private string _speciesList_sexCode;
    
        [DataMember]
        public string sexCode
        {
            get { return _sexCode; }
            set
            {
                if (_sexCode != value)
                {
                    _sexCode = value;
                    OnPropertyChanged("sexCode");
                }
            }
        }
        private string _sexCode;
    
        [DataMember]
        public string cuticulaHardness
        {
            get { return _cuticulaHardness; }
            set
            {
                if (_cuticulaHardness != value)
                {
                    _cuticulaHardness = value;
                    OnPropertyChanged("cuticulaHardness");
                }
            }
        }
        private string _cuticulaHardness;
    
        [DataMember]
        public string ovigorous
        {
            get { return _ovigorous; }
            set
            {
                if (_ovigorous != value)
                {
                    _ovigorous = value;
                    OnPropertyChanged("ovigorous");
                }
            }
        }
        private string _ovigorous;
    
        [DataMember]
        public string broodingPhase
        {
            get { return _broodingPhase; }
            set
            {
                if (_broodingPhase != value)
                {
                    _broodingPhase = value;
                    OnPropertyChanged("broodingPhase");
                }
            }
        }
        private string _broodingPhase;
    
        [DataMember]
        public Nullable<int> length
        {
            get { return _length; }
            set
            {
                if (_length != value)
                {
                    _length = value;
                    OnPropertyChanged("length");
                }
            }
        }
        private Nullable<int> _length;
    
        [DataMember]
        public string lengthMeasureUnit
        {
            get { return _lengthMeasureUnit; }
            set
            {
                if (_lengthMeasureUnit != value)
                {
                    _lengthMeasureUnit = value;
                    OnPropertyChanged("lengthMeasureUnit");
                }
            }
        }
        private string _lengthMeasureUnit;
    
        [DataMember]
        public string lengthMeasureType
        {
            get { return _lengthMeasureType; }
            set
            {
                if (_lengthMeasureType != value)
                {
                    _lengthMeasureType = value;
                    OnPropertyChanged("lengthMeasureType");
                }
            }
        }
        private string _lengthMeasureType;
    
        [DataMember]
        public Nullable<decimal> numberSumSamplePerLength
        {
            get { return _numberSumSamplePerLength; }
            set
            {
                if (_numberSumSamplePerLength != value)
                {
                    _numberSumSamplePerLength = value;
                    OnPropertyChanged("numberSumSamplePerLength");
                }
            }
        }
        private Nullable<decimal> _numberSumSamplePerLength;
    
        [DataMember]
        public Nullable<decimal> numberTotalPerLength
        {
            get { return _numberTotalPerLength; }
            set
            {
                if (_numberTotalPerLength != value)
                {
                    _numberTotalPerLength = value;
                    OnPropertyChanged("numberTotalPerLength");
                }
            }
        }
        private Nullable<decimal> _numberTotalPerLength;
    
        [DataMember]
        public Nullable<decimal> weightMean
        {
            get { return _weightMean; }
            set
            {
                if (_weightMean != value)
                {
                    _weightMean = value;
                    OnPropertyChanged("weightMean");
                }
            }
        }
        private Nullable<decimal> _weightMean;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public SpeciesListRaised SpeciesListRaised
        {
            get { return _speciesListRaised; }
            set
            {
                if (!ReferenceEquals(_speciesListRaised, value))
                {
                    var previousValue = _speciesListRaised;
                    _speciesListRaised = value;
                    FixupSpeciesListRaised(previousValue);
                    OnNavigationPropertyChanged("SpeciesListRaised");
                }
            }
        }
        private SpeciesListRaised _speciesListRaised;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SpeciesListRaised = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupSpeciesListRaised(SpeciesListRaised previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AnimalRaiseds.Contains(this))
            {
                previousValue.AnimalRaiseds.Remove(this);
            }
    
            if (SpeciesListRaised != null)
            {
                if (!SpeciesListRaised.AnimalRaiseds.Contains(this))
                {
                    SpeciesListRaised.AnimalRaiseds.Add(this);
                }
    
                speciesListRaisedId = SpeciesListRaised.speciesListRaisedId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SpeciesListRaised")
                    && (ChangeTracker.OriginalValues["SpeciesListRaised"] == SpeciesListRaised))
                {
                    ChangeTracker.OriginalValues.Remove("SpeciesListRaised");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SpeciesListRaised", previousValue);
                }
                if (SpeciesListRaised != null && !SpeciesListRaised.ChangeTracker.ChangeTrackingEnabled)
                {
                    SpeciesListRaised.StartTracking();
                }
            }
        }

        #endregion

    }
}
