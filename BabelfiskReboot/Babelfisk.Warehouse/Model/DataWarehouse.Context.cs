//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace Babelfisk.Warehouse.Model
{
    public partial class DataWarehouseContext : ObjectContext
    {
        public const string ConnectionString = "name=DataWarehouseContext";
        public const string ContainerName = "DataWarehouseContext";
    
        #region Constructors
    
        public DataWarehouseContext()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public DataWarehouseContext(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public DataWarehouseContext(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<Age> Ages
        {
            get { return _ages  ?? (_ages = CreateObjectSet<Age>("Ages")); }
        }
        private ObjectSet<Age> _ages;
    
        public ObjectSet<Animal> Animals
        {
            get { return _animals  ?? (_animals = CreateObjectSet<Animal>("Animals")); }
        }
        private ObjectSet<Animal> _animals;
    
        public ObjectSet<AnimalRaised> AnimalRaiseds
        {
            get { return _animalRaiseds  ?? (_animalRaiseds = CreateObjectSet<AnimalRaised>("AnimalRaiseds")); }
        }
        private ObjectSet<AnimalRaised> _animalRaiseds;
    
        public ObjectSet<Cruise> Cruises
        {
            get { return _cruises  ?? (_cruises = CreateObjectSet<Cruise>("Cruises")); }
        }
        private ObjectSet<Cruise> _cruises;
    
        public ObjectSet<R_AnimalReference> R_AnimalReference
        {
            get { return _r_AnimalReference  ?? (_r_AnimalReference = CreateObjectSet<R_AnimalReference>("R_AnimalReference")); }
        }
        private ObjectSet<R_AnimalReference> _r_AnimalReference;
    
        public ObjectSet<Sample> Samples
        {
            get { return _samples  ?? (_samples = CreateObjectSet<Sample>("Samples")); }
        }
        private ObjectSet<Sample> _samples;
    
        public ObjectSet<SpeciesList> SpeciesLists
        {
            get { return _speciesLists  ?? (_speciesLists = CreateObjectSet<SpeciesList>("SpeciesLists")); }
        }
        private ObjectSet<SpeciesList> _speciesLists;
    
        public ObjectSet<SpeciesListRaised> SpeciesListRaiseds
        {
            get { return _speciesListRaiseds  ?? (_speciesListRaiseds = CreateObjectSet<SpeciesListRaised>("SpeciesListRaiseds")); }
        }
        private ObjectSet<SpeciesListRaised> _speciesListRaiseds;
    
        public ObjectSet<Trip> Trips
        {
            get { return _trips  ?? (_trips = CreateObjectSet<Trip>("Trips")); }
        }
        private ObjectSet<Trip> _trips;
    
        public ObjectSet<ErrorLog> ErrorLogs
        {
            get { return _errorLogs  ?? (_errorLogs = CreateObjectSet<ErrorLog>("ErrorLogs")); }
        }
        private ObjectSet<ErrorLog> _errorLogs;
    
        public ObjectSet<CruisesToTransfer> CruisesToTransfers
        {
            get { return _cruisesToTransfers  ?? (_cruisesToTransfers = CreateObjectSet<CruisesToTransfer>("CruisesToTransfers")); }
        }
        private ObjectSet<CruisesToTransfer> _cruisesToTransfers;
    
        public ObjectSet<R_AnimalPictureReference> R_AnimalPictureReference
        {
            get { return _r_AnimalPictureReference  ?? (_r_AnimalPictureReference = CreateObjectSet<R_AnimalPictureReference>("R_AnimalPictureReference")); }
        }
        private ObjectSet<R_AnimalPictureReference> _r_AnimalPictureReference;
    
        public ObjectSet<L_Species> L_Species
        {
            get { return _l_Species  ?? (_l_Species = CreateObjectSet<L_Species>("L_Species")); }
        }
        private ObjectSet<L_Species> _l_Species;

        #endregion

    }
}
