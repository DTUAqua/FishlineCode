//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Warehouse.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Age))]
    [KnownType(typeof(SpeciesList))]
    [KnownType(typeof(R_AnimalReference))]
    [KnownType(typeof(R_AnimalPictureReference))]
    public partial class Animal: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int animalId
        {
            get { return _animalId; }
            set
            {
                if (_animalId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'animalId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _animalId = value;
                    OnPropertyChanged("animalId");
                }
            }
        }
        private int _animalId;
    
        [DataMember]
        public Nullable<int> animalInfoId
        {
            get { return _animalInfoId; }
            set
            {
                if (_animalInfoId != value)
                {
                    _animalInfoId = value;
                    OnPropertyChanged("animalInfoId");
                }
            }
        }
        private Nullable<int> _animalInfoId;
    
        [DataMember]
        public int speciesListId
        {
            get { return _speciesListId; }
            set
            {
                if (_speciesListId != value)
                {
                    ChangeTracker.RecordOriginalValue("speciesListId", _speciesListId);
                    if (!IsDeserializing)
                    {
                        if (SpeciesList != null && SpeciesList.speciesListId != value)
                        {
                            SpeciesList = null;
                        }
                    }
                    _speciesListId = value;
                    OnPropertyChanged("speciesListId");
                }
            }
        }
        private int _speciesListId;
    
        [DataMember]
        public int year
        {
            get { return _year; }
            set
            {
                if (_year != value)
                {
                    _year = value;
                    OnPropertyChanged("year");
                }
            }
        }
        private int _year;
    
        [DataMember]
        public string cruise
        {
            get { return _cruise; }
            set
            {
                if (_cruise != value)
                {
                    _cruise = value;
                    OnPropertyChanged("cruise");
                }
            }
        }
        private string _cruise;
    
        [DataMember]
        public string trip
        {
            get { return _trip; }
            set
            {
                if (_trip != value)
                {
                    _trip = value;
                    OnPropertyChanged("trip");
                }
            }
        }
        private string _trip;
    
        [DataMember]
        public string tripType
        {
            get { return _tripType; }
            set
            {
                if (_tripType != value)
                {
                    _tripType = value;
                    OnPropertyChanged("tripType");
                }
            }
        }
        private string _tripType;
    
        [DataMember]
        public string station
        {
            get { return _station; }
            set
            {
                if (_station != value)
                {
                    _station = value;
                    OnPropertyChanged("station");
                }
            }
        }
        private string _station;
    
        [DataMember]
        public System.DateTime dateGearStart
        {
            get { return _dateGearStart; }
            set
            {
                if (_dateGearStart != value)
                {
                    _dateGearStart = value;
                    OnPropertyChanged("dateGearStart");
                }
            }
        }
        private System.DateTime _dateGearStart;
    
        [DataMember]
        public Nullable<int> quarterGearStart
        {
            get { return _quarterGearStart; }
            set
            {
                if (_quarterGearStart != value)
                {
                    _quarterGearStart = value;
                    OnPropertyChanged("quarterGearStart");
                }
            }
        }
        private Nullable<int> _quarterGearStart;
    
        [DataMember]
        public string dfuArea
        {
            get { return _dfuArea; }
            set
            {
                if (_dfuArea != value)
                {
                    _dfuArea = value;
                    OnPropertyChanged("dfuArea");
                }
            }
        }
        private string _dfuArea;
    
        [DataMember]
        public string statisticalRectangle
        {
            get { return _statisticalRectangle; }
            set
            {
                if (_statisticalRectangle != value)
                {
                    _statisticalRectangle = value;
                    OnPropertyChanged("statisticalRectangle");
                }
            }
        }
        private string _statisticalRectangle;
    
        [DataMember]
        public string gearQuality
        {
            get { return _gearQuality; }
            set
            {
                if (_gearQuality != value)
                {
                    _gearQuality = value;
                    OnPropertyChanged("gearQuality");
                }
            }
        }
        private string _gearQuality;
    
        [DataMember]
        public string gearType
        {
            get { return _gearType; }
            set
            {
                if (_gearType != value)
                {
                    _gearType = value;
                    OnPropertyChanged("gearType");
                }
            }
        }
        private string _gearType;
    
        [DataMember]
        public Nullable<decimal> meshSize
        {
            get { return _meshSize; }
            set
            {
                if (_meshSize != value)
                {
                    _meshSize = value;
                    OnPropertyChanged("meshSize");
                }
            }
        }
        private Nullable<decimal> _meshSize;
    
        [DataMember]
        public string speciesCode
        {
            get { return _speciesCode; }
            set
            {
                if (_speciesCode != value)
                {
                    _speciesCode = value;
                    OnPropertyChanged("speciesCode");
                }
            }
        }
        private string _speciesCode;
    
        [DataMember]
        public string stock
        {
            get { return _stock; }
            set
            {
                if (_stock != value)
                {
                    _stock = value;
                    OnPropertyChanged("stock");
                }
            }
        }
        private string _stock;
    
        [DataMember]
        public string landingCategory
        {
            get { return _landingCategory; }
            set
            {
                if (_landingCategory != value)
                {
                    _landingCategory = value;
                    OnPropertyChanged("landingCategory");
                }
            }
        }
        private string _landingCategory;
    
        [DataMember]
        public string dfuBase_Category
        {
            get { return _dfuBase_Category; }
            set
            {
                if (_dfuBase_Category != value)
                {
                    _dfuBase_Category = value;
                    OnPropertyChanged("dfuBase_Category");
                }
            }
        }
        private string _dfuBase_Category;
    
        [DataMember]
        public Nullable<int> sizeSortingEU
        {
            get { return _sizeSortingEU; }
            set
            {
                if (_sizeSortingEU != value)
                {
                    _sizeSortingEU = value;
                    OnPropertyChanged("sizeSortingEU");
                }
            }
        }
        private Nullable<int> _sizeSortingEU;
    
        [DataMember]
        public string sizeSortingDFU
        {
            get { return _sizeSortingDFU; }
            set
            {
                if (_sizeSortingDFU != value)
                {
                    _sizeSortingDFU = value;
                    OnPropertyChanged("sizeSortingDFU");
                }
            }
        }
        private string _sizeSortingDFU;
    
        [DataMember]
        public string ovigorous
        {
            get { return _ovigorous; }
            set
            {
                if (_ovigorous != value)
                {
                    _ovigorous = value;
                    OnPropertyChanged("ovigorous");
                }
            }
        }
        private string _ovigorous;
    
        [DataMember]
        public string cuticulaHardness
        {
            get { return _cuticulaHardness; }
            set
            {
                if (_cuticulaHardness != value)
                {
                    _cuticulaHardness = value;
                    OnPropertyChanged("cuticulaHardness");
                }
            }
        }
        private string _cuticulaHardness;
    
        [DataMember]
        public string treatment
        {
            get { return _treatment; }
            set
            {
                if (_treatment != value)
                {
                    _treatment = value;
                    OnPropertyChanged("treatment");
                }
            }
        }
        private string _treatment;
    
        [DataMember]
        public string speciesList_sexCode
        {
            get { return _speciesList_sexCode; }
            set
            {
                if (_speciesList_sexCode != value)
                {
                    _speciesList_sexCode = value;
                    OnPropertyChanged("speciesList_sexCode");
                }
            }
        }
        private string _speciesList_sexCode;
    
        [DataMember]
        public string sexCode
        {
            get { return _sexCode; }
            set
            {
                if (_sexCode != value)
                {
                    _sexCode = value;
                    OnPropertyChanged("sexCode");
                }
            }
        }
        private string _sexCode;
    
        [DataMember]
        public string representative
        {
            get { return _representative; }
            set
            {
                if (_representative != value)
                {
                    _representative = value;
                    OnPropertyChanged("representative");
                }
            }
        }
        private string _representative;
    
        [DataMember]
        public Nullable<int> individNum
        {
            get { return _individNum; }
            set
            {
                if (_individNum != value)
                {
                    _individNum = value;
                    OnPropertyChanged("individNum");
                }
            }
        }
        private Nullable<int> _individNum;
    
        [DataMember]
        public int number
        {
            get { return _number; }
            set
            {
                if (_number != value)
                {
                    _number = value;
                    OnPropertyChanged("number");
                }
            }
        }
        private int _number;
    
        [DataMember]
        public Nullable<int> speciesList_number
        {
            get { return _speciesList_number; }
            set
            {
                if (_speciesList_number != value)
                {
                    _speciesList_number = value;
                    OnPropertyChanged("speciesList_number");
                }
            }
        }
        private Nullable<int> _speciesList_number;
    
        [DataMember]
        public Nullable<int> length
        {
            get { return _length; }
            set
            {
                if (_length != value)
                {
                    _length = value;
                    OnPropertyChanged("length");
                }
            }
        }
        private Nullable<int> _length;
    
        [DataMember]
        public string lengthMeasureUnit
        {
            get { return _lengthMeasureUnit; }
            set
            {
                if (_lengthMeasureUnit != value)
                {
                    _lengthMeasureUnit = value;
                    OnPropertyChanged("lengthMeasureUnit");
                }
            }
        }
        private string _lengthMeasureUnit;
    
        [DataMember]
        public string lengthMeasureType
        {
            get { return _lengthMeasureType; }
            set
            {
                if (_lengthMeasureType != value)
                {
                    _lengthMeasureType = value;
                    OnPropertyChanged("lengthMeasureType");
                }
            }
        }
        private string _lengthMeasureType;
    
        [DataMember]
        public Nullable<decimal> weight
        {
            get { return _weight; }
            set
            {
                if (_weight != value)
                {
                    _weight = value;
                    OnPropertyChanged("weight");
                }
            }
        }
        private Nullable<decimal> _weight;
    
        [DataMember]
        public Nullable<decimal> treatmentFactor
        {
            get { return _treatmentFactor; }
            set
            {
                if (_treatmentFactor != value)
                {
                    _treatmentFactor = value;
                    OnPropertyChanged("treatmentFactor");
                }
            }
        }
        private Nullable<decimal> _treatmentFactor;
    
        [DataMember]
        public Nullable<int> maturityIndex
        {
            get { return _maturityIndex; }
            set
            {
                if (_maturityIndex != value)
                {
                    _maturityIndex = value;
                    OnPropertyChanged("maturityIndex");
                }
            }
        }
        private Nullable<int> _maturityIndex;
    
        [DataMember]
        public string maturityIndexMethod
        {
            get { return _maturityIndexMethod; }
            set
            {
                if (_maturityIndexMethod != value)
                {
                    _maturityIndexMethod = value;
                    OnPropertyChanged("maturityIndexMethod");
                }
            }
        }
        private string _maturityIndexMethod;
    
        [DataMember]
        public string broodingPhase
        {
            get { return _broodingPhase; }
            set
            {
                if (_broodingPhase != value)
                {
                    _broodingPhase = value;
                    OnPropertyChanged("broodingPhase");
                }
            }
        }
        private string _broodingPhase;
    
        [DataMember]
        public Nullable<decimal> weightGutted
        {
            get { return _weightGutted; }
            set
            {
                if (_weightGutted != value)
                {
                    _weightGutted = value;
                    OnPropertyChanged("weightGutted");
                }
            }
        }
        private Nullable<decimal> _weightGutted;
    
        [DataMember]
        public Nullable<decimal> weightLiver
        {
            get { return _weightLiver; }
            set
            {
                if (_weightLiver != value)
                {
                    _weightLiver = value;
                    OnPropertyChanged("weightLiver");
                }
            }
        }
        private Nullable<decimal> _weightLiver;
    
        [DataMember]
        public Nullable<decimal> weightGonads
        {
            get { return _weightGonads; }
            set
            {
                if (_weightGonads != value)
                {
                    _weightGonads = value;
                    OnPropertyChanged("weightGonads");
                }
            }
        }
        private Nullable<decimal> _weightGonads;
    
        [DataMember]
        public string stomachStatusFirstEvaluation
        {
            get { return _stomachStatusFirstEvaluation; }
            set
            {
                if (_stomachStatusFirstEvaluation != value)
                {
                    _stomachStatusFirstEvaluation = value;
                    OnPropertyChanged("stomachStatusFirstEvaluation");
                }
            }
        }
        private string _stomachStatusFirstEvaluation;
    
        [DataMember]
        public Nullable<int> parasiteCode
        {
            get { return _parasiteCode; }
            set
            {
                if (_parasiteCode != value)
                {
                    _parasiteCode = value;
                    OnPropertyChanged("parasiteCode");
                }
            }
        }
        private Nullable<int> _parasiteCode;
    
        [DataMember]
        public string fatIndex
        {
            get { return _fatIndex; }
            set
            {
                if (_fatIndex != value)
                {
                    _fatIndex = value;
                    OnPropertyChanged("fatIndex");
                }
            }
        }
        private string _fatIndex;
    
        [DataMember]
        public string fatIndexMethod
        {
            get { return _fatIndexMethod; }
            set
            {
                if (_fatIndexMethod != value)
                {
                    _fatIndexMethod = value;
                    OnPropertyChanged("fatIndexMethod");
                }
            }
        }
        private string _fatIndexMethod;
    
        [DataMember]
        public Nullable<int> numVertebra
        {
            get { return _numVertebra; }
            set
            {
                if (_numVertebra != value)
                {
                    _numVertebra = value;
                    OnPropertyChanged("numVertebra");
                }
            }
        }
        private Nullable<int> _numVertebra;
    
        [DataMember]
        public Nullable<int> maturityReaderId
        {
            get { return _maturityReaderId; }
            set
            {
                if (_maturityReaderId != value)
                {
                    _maturityReaderId = value;
                    OnPropertyChanged("maturityReaderId");
                }
            }
        }
        private Nullable<int> _maturityReaderId;
    
        [DataMember]
        public string maturityReader
        {
            get { return _maturityReader; }
            set
            {
                if (_maturityReader != value)
                {
                    _maturityReader = value;
                    OnPropertyChanged("maturityReader");
                }
            }
        }
        private string _maturityReader;
    
        [DataMember]
        public string remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public string animalInfo_remark
        {
            get { return _animalInfo_remark; }
            set
            {
                if (_animalInfo_remark != value)
                {
                    _animalInfo_remark = value;
                    OnPropertyChanged("animalInfo_remark");
                }
            }
        }
        private string _animalInfo_remark;
    
        [DataMember]
        public Nullable<int> catchNum
        {
            get { return _catchNum; }
            set
            {
                if (_catchNum != value)
                {
                    _catchNum = value;
                    OnPropertyChanged("catchNum");
                }
            }
        }
        private Nullable<int> _catchNum;
    
        [DataMember]
        public Nullable<bool> otolithFinScale
        {
            get { return _otolithFinScale; }
            set
            {
                if (_otolithFinScale != value)
                {
                    _otolithFinScale = value;
                    OnPropertyChanged("otolithFinScale");
                }
            }
        }
        private Nullable<bool> _otolithFinScale;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Age> Ages
        {
            get
            {
                if (_ages == null)
                {
                    _ages = new TrackableCollection<Age>();
                    _ages.CollectionChanged += FixupAges;
                }
                return _ages;
            }
            set
            {
                if (!ReferenceEquals(_ages, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ages != null)
                    {
                        _ages.CollectionChanged -= FixupAges;
                    }
                    _ages = value;
                    if (_ages != null)
                    {
                        _ages.CollectionChanged += FixupAges;
                    }
                    OnNavigationPropertyChanged("Ages");
                }
            }
        }
        private TrackableCollection<Age> _ages;
    
        [DataMember]
        public SpeciesList SpeciesList
        {
            get { return _speciesList; }
            set
            {
                if (!ReferenceEquals(_speciesList, value))
                {
                    var previousValue = _speciesList;
                    _speciesList = value;
                    FixupSpeciesList(previousValue);
                    OnNavigationPropertyChanged("SpeciesList");
                }
            }
        }
        private SpeciesList _speciesList;
    
        [DataMember]
        public TrackableCollection<R_AnimalReference> R_AnimalReference
        {
            get
            {
                if (_r_AnimalReference == null)
                {
                    _r_AnimalReference = new TrackableCollection<R_AnimalReference>();
                    _r_AnimalReference.CollectionChanged += FixupR_AnimalReference;
                }
                return _r_AnimalReference;
            }
            set
            {
                if (!ReferenceEquals(_r_AnimalReference, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_r_AnimalReference != null)
                    {
                        _r_AnimalReference.CollectionChanged -= FixupR_AnimalReference;
                    }
                    _r_AnimalReference = value;
                    if (_r_AnimalReference != null)
                    {
                        _r_AnimalReference.CollectionChanged += FixupR_AnimalReference;
                    }
                    OnNavigationPropertyChanged("R_AnimalReference");
                }
            }
        }
        private TrackableCollection<R_AnimalReference> _r_AnimalReference;
    
        [DataMember]
        public TrackableCollection<R_AnimalPictureReference> R_AnimalPictureReference
        {
            get
            {
                if (_r_AnimalPictureReference == null)
                {
                    _r_AnimalPictureReference = new TrackableCollection<R_AnimalPictureReference>();
                    _r_AnimalPictureReference.CollectionChanged += FixupR_AnimalPictureReference;
                }
                return _r_AnimalPictureReference;
            }
            set
            {
                if (!ReferenceEquals(_r_AnimalPictureReference, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_r_AnimalPictureReference != null)
                    {
                        _r_AnimalPictureReference.CollectionChanged -= FixupR_AnimalPictureReference;
                    }
                    _r_AnimalPictureReference = value;
                    if (_r_AnimalPictureReference != null)
                    {
                        _r_AnimalPictureReference.CollectionChanged += FixupR_AnimalPictureReference;
                    }
                    OnNavigationPropertyChanged("R_AnimalPictureReference");
                }
            }
        }
        private TrackableCollection<R_AnimalPictureReference> _r_AnimalPictureReference;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Ages.Clear();
            SpeciesList = null;
            R_AnimalReference.Clear();
            R_AnimalPictureReference.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupSpeciesList(SpeciesList previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Animals.Contains(this))
            {
                previousValue.Animals.Remove(this);
            }
    
            if (SpeciesList != null)
            {
                if (!SpeciesList.Animals.Contains(this))
                {
                    SpeciesList.Animals.Add(this);
                }
    
                speciesListId = SpeciesList.speciesListId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SpeciesList")
                    && (ChangeTracker.OriginalValues["SpeciesList"] == SpeciesList))
                {
                    ChangeTracker.OriginalValues.Remove("SpeciesList");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SpeciesList", previousValue);
                }
                if (SpeciesList != null && !SpeciesList.ChangeTracker.ChangeTrackingEnabled)
                {
                    SpeciesList.StartTracking();
                }
            }
        }
    
        private void FixupAges(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Age item in e.NewItems)
                {
                    item.Animal = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Ages", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Age item in e.OldItems)
                {
                    if (ReferenceEquals(item.Animal, this))
                    {
                        item.Animal = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Ages", item);
                    }
                }
            }
        }
    
        private void FixupR_AnimalReference(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_AnimalReference item in e.NewItems)
                {
                    item.Animal = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_AnimalReference", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_AnimalReference item in e.OldItems)
                {
                    if (ReferenceEquals(item.Animal, this))
                    {
                        item.Animal = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_AnimalReference", item);
                    }
                }
            }
        }
    
        private void FixupR_AnimalPictureReference(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_AnimalPictureReference item in e.NewItems)
                {
                    item.Animal = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_AnimalPictureReference", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_AnimalPictureReference item in e.OldItems)
                {
                    if (ReferenceEquals(item.Animal, this))
                    {
                        item.Animal = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_AnimalPictureReference", item);
                    }
                }
            }
        }

        #endregion

    }
}
