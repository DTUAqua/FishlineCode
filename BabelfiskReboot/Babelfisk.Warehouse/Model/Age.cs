//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Warehouse.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Animal))]
    public partial class Age: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ageId
        {
            get { return _ageId; }
            set
            {
                if (_ageId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ageId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _ageId = value;
                    OnPropertyChanged("ageId");
                }
            }
        }
        private int _ageId;
    
        [DataMember]
        public int animalId
        {
            get { return _animalId; }
            set
            {
                if (_animalId != value)
                {
                    ChangeTracker.RecordOriginalValue("animalId", _animalId);
                    if (!IsDeserializing)
                    {
                        if (Animal != null && Animal.animalId != value)
                        {
                            Animal = null;
                        }
                    }
                    _animalId = value;
                    OnPropertyChanged("animalId");
                }
            }
        }
        private int _animalId;
    
        [DataMember]
        public int year
        {
            get { return _year; }
            set
            {
                if (_year != value)
                {
                    _year = value;
                    OnPropertyChanged("year");
                }
            }
        }
        private int _year;
    
        [DataMember]
        public string cruise
        {
            get { return _cruise; }
            set
            {
                if (_cruise != value)
                {
                    _cruise = value;
                    OnPropertyChanged("cruise");
                }
            }
        }
        private string _cruise;
    
        [DataMember]
        public string trip
        {
            get { return _trip; }
            set
            {
                if (_trip != value)
                {
                    _trip = value;
                    OnPropertyChanged("trip");
                }
            }
        }
        private string _trip;
    
        [DataMember]
        public string tripType
        {
            get { return _tripType; }
            set
            {
                if (_tripType != value)
                {
                    _tripType = value;
                    OnPropertyChanged("tripType");
                }
            }
        }
        private string _tripType;
    
        [DataMember]
        public string station
        {
            get { return _station; }
            set
            {
                if (_station != value)
                {
                    _station = value;
                    OnPropertyChanged("station");
                }
            }
        }
        private string _station;
    
        [DataMember]
        public System.DateTime dateGearStart
        {
            get { return _dateGearStart; }
            set
            {
                if (_dateGearStart != value)
                {
                    _dateGearStart = value;
                    OnPropertyChanged("dateGearStart");
                }
            }
        }
        private System.DateTime _dateGearStart;
    
        [DataMember]
        public Nullable<int> quarterGearStart
        {
            get { return _quarterGearStart; }
            set
            {
                if (_quarterGearStart != value)
                {
                    _quarterGearStart = value;
                    OnPropertyChanged("quarterGearStart");
                }
            }
        }
        private Nullable<int> _quarterGearStart;
    
        [DataMember]
        public string dfuArea
        {
            get { return _dfuArea; }
            set
            {
                if (_dfuArea != value)
                {
                    _dfuArea = value;
                    OnPropertyChanged("dfuArea");
                }
            }
        }
        private string _dfuArea;
    
        [DataMember]
        public string statisticalRectangle
        {
            get { return _statisticalRectangle; }
            set
            {
                if (_statisticalRectangle != value)
                {
                    _statisticalRectangle = value;
                    OnPropertyChanged("statisticalRectangle");
                }
            }
        }
        private string _statisticalRectangle;
    
        [DataMember]
        public string gearQuality
        {
            get { return _gearQuality; }
            set
            {
                if (_gearQuality != value)
                {
                    _gearQuality = value;
                    OnPropertyChanged("gearQuality");
                }
            }
        }
        private string _gearQuality;
    
        [DataMember]
        public string gearType
        {
            get { return _gearType; }
            set
            {
                if (_gearType != value)
                {
                    _gearType = value;
                    OnPropertyChanged("gearType");
                }
            }
        }
        private string _gearType;
    
        [DataMember]
        public Nullable<decimal> meshSize
        {
            get { return _meshSize; }
            set
            {
                if (_meshSize != value)
                {
                    _meshSize = value;
                    OnPropertyChanged("meshSize");
                }
            }
        }
        private Nullable<decimal> _meshSize;
    
        [DataMember]
        public string speciesCode
        {
            get { return _speciesCode; }
            set
            {
                if (_speciesCode != value)
                {
                    _speciesCode = value;
                    OnPropertyChanged("speciesCode");
                }
            }
        }
        private string _speciesCode;
    
        [DataMember]
        public string stock
        {
            get { return _stock; }
            set
            {
                if (_stock != value)
                {
                    _stock = value;
                    OnPropertyChanged("stock");
                }
            }
        }
        private string _stock;
    
        [DataMember]
        public string landingCategory
        {
            get { return _landingCategory; }
            set
            {
                if (_landingCategory != value)
                {
                    _landingCategory = value;
                    OnPropertyChanged("landingCategory");
                }
            }
        }
        private string _landingCategory;
    
        [DataMember]
        public string dfuBase_Category
        {
            get { return _dfuBase_Category; }
            set
            {
                if (_dfuBase_Category != value)
                {
                    _dfuBase_Category = value;
                    OnPropertyChanged("dfuBase_Category");
                }
            }
        }
        private string _dfuBase_Category;
    
        [DataMember]
        public Nullable<int> sizeSortingEU
        {
            get { return _sizeSortingEU; }
            set
            {
                if (_sizeSortingEU != value)
                {
                    _sizeSortingEU = value;
                    OnPropertyChanged("sizeSortingEU");
                }
            }
        }
        private Nullable<int> _sizeSortingEU;
    
        [DataMember]
        public string sizeSortingDFU
        {
            get { return _sizeSortingDFU; }
            set
            {
                if (_sizeSortingDFU != value)
                {
                    _sizeSortingDFU = value;
                    OnPropertyChanged("sizeSortingDFU");
                }
            }
        }
        private string _sizeSortingDFU;
    
        [DataMember]
        public string ovigorous
        {
            get { return _ovigorous; }
            set
            {
                if (_ovigorous != value)
                {
                    _ovigorous = value;
                    OnPropertyChanged("ovigorous");
                }
            }
        }
        private string _ovigorous;
    
        [DataMember]
        public string cuticulaHardness
        {
            get { return _cuticulaHardness; }
            set
            {
                if (_cuticulaHardness != value)
                {
                    _cuticulaHardness = value;
                    OnPropertyChanged("cuticulaHardness");
                }
            }
        }
        private string _cuticulaHardness;
    
        [DataMember]
        public string treatment
        {
            get { return _treatment; }
            set
            {
                if (_treatment != value)
                {
                    _treatment = value;
                    OnPropertyChanged("treatment");
                }
            }
        }
        private string _treatment;
    
        [DataMember]
        public string speciesList_sexCode
        {
            get { return _speciesList_sexCode; }
            set
            {
                if (_speciesList_sexCode != value)
                {
                    _speciesList_sexCode = value;
                    OnPropertyChanged("speciesList_sexCode");
                }
            }
        }
        private string _speciesList_sexCode;
    
        [DataMember]
        public string sexCode
        {
            get { return _sexCode; }
            set
            {
                if (_sexCode != value)
                {
                    _sexCode = value;
                    OnPropertyChanged("sexCode");
                }
            }
        }
        private string _sexCode;
    
        [DataMember]
        public string representative
        {
            get { return _representative; }
            set
            {
                if (_representative != value)
                {
                    _representative = value;
                    OnPropertyChanged("representative");
                }
            }
        }
        private string _representative;
    
        [DataMember]
        public Nullable<int> individNum
        {
            get { return _individNum; }
            set
            {
                if (_individNum != value)
                {
                    _individNum = value;
                    OnPropertyChanged("individNum");
                }
            }
        }
        private Nullable<int> _individNum;
    
        [DataMember]
        public int number
        {
            get { return _number; }
            set
            {
                if (_number != value)
                {
                    _number = value;
                    OnPropertyChanged("number");
                }
            }
        }
        private int _number;
    
        [DataMember]
        public Nullable<int> length
        {
            get { return _length; }
            set
            {
                if (_length != value)
                {
                    _length = value;
                    OnPropertyChanged("length");
                }
            }
        }
        private Nullable<int> _length;
    
        [DataMember]
        public string lengthMeasureType
        {
            get { return _lengthMeasureType; }
            set
            {
                if (_lengthMeasureType != value)
                {
                    _lengthMeasureType = value;
                    OnPropertyChanged("lengthMeasureType");
                }
            }
        }
        private string _lengthMeasureType;
    
        [DataMember]
        public Nullable<int> age1
        {
            get { return _age1; }
            set
            {
                if (_age1 != value)
                {
                    _age1 = value;
                    OnPropertyChanged("age1");
                }
            }
        }
        private Nullable<int> _age1;
    
        [DataMember]
        public Nullable<int> agePlusGroup
        {
            get { return _agePlusGroup; }
            set
            {
                if (_agePlusGroup != value)
                {
                    _agePlusGroup = value;
                    OnPropertyChanged("agePlusGroup");
                }
            }
        }
        private Nullable<int> _agePlusGroup;
    
        [DataMember]
        public Nullable<decimal> otolithWeight
        {
            get { return _otolithWeight; }
            set
            {
                if (_otolithWeight != value)
                {
                    _otolithWeight = value;
                    OnPropertyChanged("otolithWeight");
                }
            }
        }
        private Nullable<decimal> _otolithWeight;
    
        [DataMember]
        public string edgeStructure
        {
            get { return _edgeStructure; }
            set
            {
                if (_edgeStructure != value)
                {
                    _edgeStructure = value;
                    OnPropertyChanged("edgeStructure");
                }
            }
        }
        private string _edgeStructure;
    
        [DataMember]
        public string otolithReadingRemark
        {
            get { return _otolithReadingRemark; }
            set
            {
                if (_otolithReadingRemark != value)
                {
                    _otolithReadingRemark = value;
                    OnPropertyChanged("otolithReadingRemark");
                }
            }
        }
        private string _otolithReadingRemark;
    
        [DataMember]
        public Nullable<int> hatchMonth
        {
            get { return _hatchMonth; }
            set
            {
                if (_hatchMonth != value)
                {
                    _hatchMonth = value;
                    OnPropertyChanged("hatchMonth");
                }
            }
        }
        private Nullable<int> _hatchMonth;
    
        [DataMember]
        public string hatchMonthRemark
        {
            get { return _hatchMonthRemark; }
            set
            {
                if (_hatchMonthRemark != value)
                {
                    _hatchMonthRemark = value;
                    OnPropertyChanged("hatchMonthRemark");
                }
            }
        }
        private string _hatchMonthRemark;
    
        [DataMember]
        public Nullable<int> ageReadId
        {
            get { return _ageReadId; }
            set
            {
                if (_ageReadId != value)
                {
                    _ageReadId = value;
                    OnPropertyChanged("ageReadId");
                }
            }
        }
        private Nullable<int> _ageReadId;
    
        [DataMember]
        public string ageReadName
        {
            get { return _ageReadName; }
            set
            {
                if (_ageReadName != value)
                {
                    _ageReadName = value;
                    OnPropertyChanged("ageReadName");
                }
            }
        }
        private string _ageReadName;
    
        [DataMember]
        public Nullable<int> hatchMonthReaderId
        {
            get { return _hatchMonthReaderId; }
            set
            {
                if (_hatchMonthReaderId != value)
                {
                    _hatchMonthReaderId = value;
                    OnPropertyChanged("hatchMonthReaderId");
                }
            }
        }
        private Nullable<int> _hatchMonthReaderId;
    
        [DataMember]
        public string hatchMonthReaderName
        {
            get { return _hatchMonthReaderName; }
            set
            {
                if (_hatchMonthReaderName != value)
                {
                    _hatchMonthReaderName = value;
                    OnPropertyChanged("hatchMonthReaderName");
                }
            }
        }
        private string _hatchMonthReaderName;
    
        [DataMember]
        public string remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public Nullable<bool> genetics
        {
            get { return _genetics; }
            set
            {
                if (_genetics != value)
                {
                    _genetics = value;
                    OnPropertyChanged("genetics");
                }
            }
        }
        private Nullable<bool> _genetics;
    
        [DataMember]
        public string visualStock
        {
            get { return _visualStock; }
            set
            {
                if (_visualStock != value)
                {
                    _visualStock = value;
                    OnPropertyChanged("visualStock");
                }
            }
        }
        private string _visualStock;
    
        [DataMember]
        public string geneticStock
        {
            get { return _geneticStock; }
            set
            {
                if (_geneticStock != value)
                {
                    _geneticStock = value;
                    OnPropertyChanged("geneticStock");
                }
            }
        }
        private string _geneticStock;
    
        [DataMember]
        public Nullable<bool> sdAgeInfoUpdated
        {
            get { return _sdAgeInfoUpdated; }
            set
            {
                if (_sdAgeInfoUpdated != value)
                {
                    _sdAgeInfoUpdated = value;
                    OnPropertyChanged("sdAgeInfoUpdated");
                }
            }
        }
        private Nullable<bool> _sdAgeInfoUpdated;
    
        [DataMember]
        public Nullable<int> sdAgeReadId
        {
            get { return _sdAgeReadId; }
            set
            {
                if (_sdAgeReadId != value)
                {
                    _sdAgeReadId = value;
                    OnPropertyChanged("sdAgeReadId");
                }
            }
        }
        private Nullable<int> _sdAgeReadId;
    
        [DataMember]
        public string sdAgeReadName
        {
            get { return _sdAgeReadName; }
            set
            {
                if (_sdAgeReadName != value)
                {
                    _sdAgeReadName = value;
                    OnPropertyChanged("sdAgeReadName");
                }
            }
        }
        private string _sdAgeReadName;
    
        [DataMember]
        public Nullable<int> sdAnnotationId
        {
            get { return _sdAnnotationId; }
            set
            {
                if (_sdAnnotationId != value)
                {
                    _sdAnnotationId = value;
                    OnPropertyChanged("sdAnnotationId");
                }
            }
        }
        private Nullable<int> _sdAnnotationId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Animal Animal
        {
            get { return _animal; }
            set
            {
                if (!ReferenceEquals(_animal, value))
                {
                    var previousValue = _animal;
                    _animal = value;
                    FixupAnimal(previousValue);
                    OnNavigationPropertyChanged("Animal");
                }
            }
        }
        private Animal _animal;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Animal = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupAnimal(Animal previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Ages.Contains(this))
            {
                previousValue.Ages.Remove(this);
            }
    
            if (Animal != null)
            {
                if (!Animal.Ages.Contains(this))
                {
                    Animal.Ages.Add(this);
                }
    
                animalId = Animal.animalId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Animal")
                    && (ChangeTracker.OriginalValues["Animal"] == Animal))
                {
                    ChangeTracker.OriginalValues.Remove("Animal");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Animal", previousValue);
                }
                if (Animal != null && !Animal.ChangeTracker.ChangeTrackingEnabled)
                {
                    Animal.StartTracking();
                }
            }
        }

        #endregion

    }
}
