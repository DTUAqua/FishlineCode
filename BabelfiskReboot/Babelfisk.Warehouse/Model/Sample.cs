//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Warehouse.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Trip))]
    [KnownType(typeof(SpeciesList))]
    [KnownType(typeof(SpeciesListRaised))]
    public partial class Sample: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int sampleId
        {
            get { return _sampleId; }
            set
            {
                if (_sampleId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'sampleId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _sampleId = value;
                    OnPropertyChanged("sampleId");
                }
            }
        }
        private int _sampleId;
    
        [DataMember]
        public int tripId
        {
            get { return _tripId; }
            set
            {
                if (_tripId != value)
                {
                    ChangeTracker.RecordOriginalValue("tripId", _tripId);
                    if (!IsDeserializing)
                    {
                        if (Trip1 != null && Trip1.tripId != value)
                        {
                            Trip1 = null;
                        }
                    }
                    _tripId = value;
                    OnPropertyChanged("tripId");
                }
            }
        }
        private int _tripId;
    
        [DataMember]
        public int year
        {
            get { return _year; }
            set
            {
                if (_year != value)
                {
                    _year = value;
                    OnPropertyChanged("year");
                }
            }
        }
        private int _year;
    
        [DataMember]
        public string cruise
        {
            get { return _cruise; }
            set
            {
                if (_cruise != value)
                {
                    _cruise = value;
                    OnPropertyChanged("cruise");
                }
            }
        }
        private string _cruise;
    
        [DataMember]
        public string trip
        {
            get { return _trip; }
            set
            {
                if (_trip != value)
                {
                    _trip = value;
                    OnPropertyChanged("trip");
                }
            }
        }
        private string _trip;
    
        [DataMember]
        public string tripType
        {
            get { return _tripType; }
            set
            {
                if (_tripType != value)
                {
                    _tripType = value;
                    OnPropertyChanged("tripType");
                }
            }
        }
        private string _tripType;
    
        [DataMember]
        public string station
        {
            get { return _station; }
            set
            {
                if (_station != value)
                {
                    _station = value;
                    OnPropertyChanged("station");
                }
            }
        }
        private string _station;
    
        [DataMember]
        public string stationName
        {
            get { return _stationName; }
            set
            {
                if (_stationName != value)
                {
                    _stationName = value;
                    OnPropertyChanged("stationName");
                }
            }
        }
        private string _stationName;
    
        [DataMember]
        public string labJournalNum
        {
            get { return _labJournalNum; }
            set
            {
                if (_labJournalNum != value)
                {
                    _labJournalNum = value;
                    OnPropertyChanged("labJournalNum");
                }
            }
        }
        private string _labJournalNum;
    
        [DataMember]
        public string gearQuality
        {
            get { return _gearQuality; }
            set
            {
                if (_gearQuality != value)
                {
                    _gearQuality = value;
                    OnPropertyChanged("gearQuality");
                }
            }
        }
        private string _gearQuality;
    
        [DataMember]
        public string hydroStnRef
        {
            get { return _hydroStnRef; }
            set
            {
                if (_hydroStnRef != value)
                {
                    _hydroStnRef = value;
                    OnPropertyChanged("hydroStnRef");
                }
            }
        }
        private string _hydroStnRef;
    
        [DataMember]
        public string haulType
        {
            get { return _haulType; }
            set
            {
                if (_haulType != value)
                {
                    _haulType = value;
                    OnPropertyChanged("haulType");
                }
            }
        }
        private string _haulType;
    
        [DataMember]
        public System.DateTime dateGearStart
        {
            get { return _dateGearStart; }
            set
            {
                if (_dateGearStart != value)
                {
                    _dateGearStart = value;
                    OnPropertyChanged("dateGearStart");
                }
            }
        }
        private System.DateTime _dateGearStart;
    
        [DataMember]
        public System.DateTime dateGearEnd
        {
            get { return _dateGearEnd; }
            set
            {
                if (_dateGearEnd != value)
                {
                    _dateGearEnd = value;
                    OnPropertyChanged("dateGearEnd");
                }
            }
        }
        private System.DateTime _dateGearEnd;
    
        [DataMember]
        public Nullable<int> timeZone
        {
            get { return _timeZone; }
            set
            {
                if (_timeZone != value)
                {
                    _timeZone = value;
                    OnPropertyChanged("timeZone");
                }
            }
        }
        private Nullable<int> _timeZone;
    
        [DataMember]
        public Nullable<int> quarterGearStart
        {
            get { return _quarterGearStart; }
            set
            {
                if (_quarterGearStart != value)
                {
                    _quarterGearStart = value;
                    OnPropertyChanged("quarterGearStart");
                }
            }
        }
        private Nullable<int> _quarterGearStart;
    
        [DataMember]
        public Nullable<decimal> fishingtime
        {
            get { return _fishingtime; }
            set
            {
                if (_fishingtime != value)
                {
                    _fishingtime = value;
                    OnPropertyChanged("fishingtime");
                }
            }
        }
        private Nullable<decimal> _fishingtime;
    
        [DataMember]
        public string latPosStartText
        {
            get { return _latPosStartText; }
            set
            {
                if (_latPosStartText != value)
                {
                    _latPosStartText = value;
                    OnPropertyChanged("latPosStartText");
                }
            }
        }
        private string _latPosStartText;
    
        [DataMember]
        public string lonPosStartText
        {
            get { return _lonPosStartText; }
            set
            {
                if (_lonPosStartText != value)
                {
                    _lonPosStartText = value;
                    OnPropertyChanged("lonPosStartText");
                }
            }
        }
        private string _lonPosStartText;
    
        [DataMember]
        public string latPosEndText
        {
            get { return _latPosEndText; }
            set
            {
                if (_latPosEndText != value)
                {
                    _latPosEndText = value;
                    OnPropertyChanged("latPosEndText");
                }
            }
        }
        private string _latPosEndText;
    
        [DataMember]
        public string lonPosEndText
        {
            get { return _lonPosEndText; }
            set
            {
                if (_lonPosEndText != value)
                {
                    _lonPosEndText = value;
                    OnPropertyChanged("lonPosEndText");
                }
            }
        }
        private string _lonPosEndText;
    
        [DataMember]
        public Nullable<decimal> latPosStartDec
        {
            get { return _latPosStartDec; }
            set
            {
                if (_latPosStartDec != value)
                {
                    _latPosStartDec = value;
                    OnPropertyChanged("latPosStartDec");
                }
            }
        }
        private Nullable<decimal> _latPosStartDec;
    
        [DataMember]
        public Nullable<decimal> lonPosStartDec
        {
            get { return _lonPosStartDec; }
            set
            {
                if (_lonPosStartDec != value)
                {
                    _lonPosStartDec = value;
                    OnPropertyChanged("lonPosStartDec");
                }
            }
        }
        private Nullable<decimal> _lonPosStartDec;
    
        [DataMember]
        public Nullable<decimal> latPosEndDec
        {
            get { return _latPosEndDec; }
            set
            {
                if (_latPosEndDec != value)
                {
                    _latPosEndDec = value;
                    OnPropertyChanged("latPosEndDec");
                }
            }
        }
        private Nullable<decimal> _latPosEndDec;
    
        [DataMember]
        public Nullable<decimal> lonPosEndDec
        {
            get { return _lonPosEndDec; }
            set
            {
                if (_lonPosEndDec != value)
                {
                    _lonPosEndDec = value;
                    OnPropertyChanged("lonPosEndDec");
                }
            }
        }
        private Nullable<decimal> _lonPosEndDec;
    
        [DataMember]
        public string dfuArea
        {
            get { return _dfuArea; }
            set
            {
                if (_dfuArea != value)
                {
                    _dfuArea = value;
                    OnPropertyChanged("dfuArea");
                }
            }
        }
        private string _dfuArea;
    
        [DataMember]
        public string dfuAreaEnd
        {
            get { return _dfuAreaEnd; }
            set
            {
                if (_dfuAreaEnd != value)
                {
                    _dfuAreaEnd = value;
                    OnPropertyChanged("dfuAreaEnd");
                }
            }
        }
        private string _dfuAreaEnd;
    
        [DataMember]
        public string statisticalRectangle
        {
            get { return _statisticalRectangle; }
            set
            {
                if (_statisticalRectangle != value)
                {
                    _statisticalRectangle = value;
                    OnPropertyChanged("statisticalRectangle");
                }
            }
        }
        private string _statisticalRectangle;
    
        [DataMember]
        public string statisticalRectangleEnd
        {
            get { return _statisticalRectangleEnd; }
            set
            {
                if (_statisticalRectangleEnd != value)
                {
                    _statisticalRectangleEnd = value;
                    OnPropertyChanged("statisticalRectangleEnd");
                }
            }
        }
        private string _statisticalRectangleEnd;
    
        [DataMember]
        public Nullable<decimal> distancePositions
        {
            get { return _distancePositions; }
            set
            {
                if (_distancePositions != value)
                {
                    _distancePositions = value;
                    OnPropertyChanged("distancePositions");
                }
            }
        }
        private Nullable<decimal> _distancePositions;
    
        [DataMember]
        public Nullable<decimal> distanceBottom
        {
            get { return _distanceBottom; }
            set
            {
                if (_distanceBottom != value)
                {
                    _distanceBottom = value;
                    OnPropertyChanged("distanceBottom");
                }
            }
        }
        private Nullable<decimal> _distanceBottom;
    
        [DataMember]
        public Nullable<int> courseTrack
        {
            get { return _courseTrack; }
            set
            {
                if (_courseTrack != value)
                {
                    _courseTrack = value;
                    OnPropertyChanged("courseTrack");
                }
            }
        }
        private Nullable<int> _courseTrack;
    
        [DataMember]
        public string targetSpecies1
        {
            get { return _targetSpecies1; }
            set
            {
                if (_targetSpecies1 != value)
                {
                    _targetSpecies1 = value;
                    OnPropertyChanged("targetSpecies1");
                }
            }
        }
        private string _targetSpecies1;
    
        [DataMember]
        public string targetSpecies2
        {
            get { return _targetSpecies2; }
            set
            {
                if (_targetSpecies2 != value)
                {
                    _targetSpecies2 = value;
                    OnPropertyChanged("targetSpecies2");
                }
            }
        }
        private string _targetSpecies2;
    
        [DataMember]
        public string targetSpecies3
        {
            get { return _targetSpecies3; }
            set
            {
                if (_targetSpecies3 != value)
                {
                    _targetSpecies3 = value;
                    OnPropertyChanged("targetSpecies3");
                }
            }
        }
        private string _targetSpecies3;
    
        [DataMember]
        public string catchRegistration
        {
            get { return _catchRegistration; }
            set
            {
                if (_catchRegistration != value)
                {
                    _catchRegistration = value;
                    OnPropertyChanged("catchRegistration");
                }
            }
        }
        private string _catchRegistration;
    
        [DataMember]
        public string speciesRegistration
        {
            get { return _speciesRegistration; }
            set
            {
                if (_speciesRegistration != value)
                {
                    _speciesRegistration = value;
                    OnPropertyChanged("speciesRegistration");
                }
            }
        }
        private string _speciesRegistration;
    
        [DataMember]
        public string gearType
        {
            get { return _gearType; }
            set
            {
                if (_gearType != value)
                {
                    _gearType = value;
                    OnPropertyChanged("gearType");
                }
            }
        }
        private string _gearType;
    
        [DataMember]
        public string selectionDevice
        {
            get { return _selectionDevice; }
            set
            {
                if (_selectionDevice != value)
                {
                    _selectionDevice = value;
                    OnPropertyChanged("selectionDevice");
                }
            }
        }
        private string _selectionDevice;
    
        [DataMember]
        public string selectionDeviceSource
        {
            get { return _selectionDeviceSource; }
            set
            {
                if (_selectionDeviceSource != value)
                {
                    _selectionDeviceSource = value;
                    OnPropertyChanged("selectionDeviceSource");
                }
            }
        }
        private string _selectionDeviceSource;
    
        [DataMember]
        public Nullable<decimal> meshSize
        {
            get { return _meshSize; }
            set
            {
                if (_meshSize != value)
                {
                    _meshSize = value;
                    OnPropertyChanged("meshSize");
                }
            }
        }
        private Nullable<decimal> _meshSize;
    
        [DataMember]
        public Nullable<decimal> netOpening
        {
            get { return _netOpening; }
            set
            {
                if (_netOpening != value)
                {
                    _netOpening = value;
                    OnPropertyChanged("netOpening");
                }
            }
        }
        private Nullable<decimal> _netOpening;
    
        [DataMember]
        public Nullable<decimal> otterBoardDist
        {
            get { return _otterBoardDist; }
            set
            {
                if (_otterBoardDist != value)
                {
                    _otterBoardDist = value;
                    OnPropertyChanged("otterBoardDist");
                }
            }
        }
        private Nullable<decimal> _otterBoardDist;
    
        [DataMember]
        public Nullable<int> numberTrawls
        {
            get { return _numberTrawls; }
            set
            {
                if (_numberTrawls != value)
                {
                    _numberTrawls = value;
                    OnPropertyChanged("numberTrawls");
                }
            }
        }
        private Nullable<int> _numberTrawls;
    
        [DataMember]
        public Nullable<int> wireLength
        {
            get { return _wireLength; }
            set
            {
                if (_wireLength != value)
                {
                    _wireLength = value;
                    OnPropertyChanged("wireLength");
                }
            }
        }
        private Nullable<int> _wireLength;
    
        [DataMember]
        public Nullable<decimal> wingSpread
        {
            get { return _wingSpread; }
            set
            {
                if (_wingSpread != value)
                {
                    _wingSpread = value;
                    OnPropertyChanged("wingSpread");
                }
            }
        }
        private Nullable<decimal> _wingSpread;
    
        [DataMember]
        public Nullable<int> numNets
        {
            get { return _numNets; }
            set
            {
                if (_numNets != value)
                {
                    _numNets = value;
                    OnPropertyChanged("numNets");
                }
            }
        }
        private Nullable<int> _numNets;
    
        [DataMember]
        public Nullable<int> lostNets
        {
            get { return _lostNets; }
            set
            {
                if (_lostNets != value)
                {
                    _lostNets = value;
                    OnPropertyChanged("lostNets");
                }
            }
        }
        private Nullable<int> _lostNets;
    
        [DataMember]
        public Nullable<decimal> heightNets
        {
            get { return _heightNets; }
            set
            {
                if (_heightNets != value)
                {
                    _heightNets = value;
                    OnPropertyChanged("heightNets");
                }
            }
        }
        private Nullable<decimal> _heightNets;
    
        [DataMember]
        public Nullable<decimal> lengthNets
        {
            get { return _lengthNets; }
            set
            {
                if (_lengthNets != value)
                {
                    _lengthNets = value;
                    OnPropertyChanged("lengthNets");
                }
            }
        }
        private Nullable<decimal> _lengthNets;
    
        [DataMember]
        public Nullable<decimal> lengthRopeFlyer
        {
            get { return _lengthRopeFlyer; }
            set
            {
                if (_lengthRopeFlyer != value)
                {
                    _lengthRopeFlyer = value;
                    OnPropertyChanged("lengthRopeFlyer");
                }
            }
        }
        private Nullable<decimal> _lengthRopeFlyer;
    
        [DataMember]
        public Nullable<decimal> widthRopeFlyer
        {
            get { return _widthRopeFlyer; }
            set
            {
                if (_widthRopeFlyer != value)
                {
                    _widthRopeFlyer = value;
                    OnPropertyChanged("widthRopeFlyer");
                }
            }
        }
        private Nullable<decimal> _widthRopeFlyer;
    
        [DataMember]
        public Nullable<int> numberHooks
        {
            get { return _numberHooks; }
            set
            {
                if (_numberHooks != value)
                {
                    _numberHooks = value;
                    OnPropertyChanged("numberHooks");
                }
            }
        }
        private Nullable<int> _numberHooks;
    
        [DataMember]
        public Nullable<decimal> lengthBeam
        {
            get { return _lengthBeam; }
            set
            {
                if (_lengthBeam != value)
                {
                    _lengthBeam = value;
                    OnPropertyChanged("lengthBeam");
                }
            }
        }
        private Nullable<decimal> _lengthBeam;
    
        [DataMember]
        public Nullable<decimal> depthAveGear
        {
            get { return _depthAveGear; }
            set
            {
                if (_depthAveGear != value)
                {
                    _depthAveGear = value;
                    OnPropertyChanged("depthAveGear");
                }
            }
        }
        private Nullable<decimal> _depthAveGear;
    
        [DataMember]
        public Nullable<short> haulDirection
        {
            get { return _haulDirection; }
            set
            {
                if (_haulDirection != value)
                {
                    _haulDirection = value;
                    OnPropertyChanged("haulDirection");
                }
            }
        }
        private Nullable<short> _haulDirection;
    
        [DataMember]
        public Nullable<decimal> haulSpeedBot
        {
            get { return _haulSpeedBot; }
            set
            {
                if (_haulSpeedBot != value)
                {
                    _haulSpeedBot = value;
                    OnPropertyChanged("haulSpeedBot");
                }
            }
        }
        private Nullable<decimal> _haulSpeedBot;
    
        [DataMember]
        public Nullable<decimal> haulSpeedWat
        {
            get { return _haulSpeedWat; }
            set
            {
                if (_haulSpeedWat != value)
                {
                    _haulSpeedWat = value;
                    OnPropertyChanged("haulSpeedWat");
                }
            }
        }
        private Nullable<decimal> _haulSpeedWat;
    
        [DataMember]
        public string gearRemark
        {
            get { return _gearRemark; }
            set
            {
                if (_gearRemark != value)
                {
                    _gearRemark = value;
                    OnPropertyChanged("gearRemark");
                }
            }
        }
        private string _gearRemark;
    
        [DataMember]
        public Nullable<decimal> depthAvg
        {
            get { return _depthAvg; }
            set
            {
                if (_depthAvg != value)
                {
                    _depthAvg = value;
                    OnPropertyChanged("depthAvg");
                }
            }
        }
        private Nullable<decimal> _depthAvg;
    
        [DataMember]
        public string bottomType
        {
            get { return _bottomType; }
            set
            {
                if (_bottomType != value)
                {
                    _bottomType = value;
                    OnPropertyChanged("bottomType");
                }
            }
        }
        private string _bottomType;
    
        [DataMember]
        public Nullable<short> windDirection
        {
            get { return _windDirection; }
            set
            {
                if (_windDirection != value)
                {
                    _windDirection = value;
                    OnPropertyChanged("windDirection");
                }
            }
        }
        private Nullable<short> _windDirection;
    
        [DataMember]
        public Nullable<int> windSpeed
        {
            get { return _windSpeed; }
            set
            {
                if (_windSpeed != value)
                {
                    _windSpeed = value;
                    OnPropertyChanged("windSpeed");
                }
            }
        }
        private Nullable<int> _windSpeed;
    
        [DataMember]
        public Nullable<short> currentDirectionSrf
        {
            get { return _currentDirectionSrf; }
            set
            {
                if (_currentDirectionSrf != value)
                {
                    _currentDirectionSrf = value;
                    OnPropertyChanged("currentDirectionSrf");
                }
            }
        }
        private Nullable<short> _currentDirectionSrf;
    
        [DataMember]
        public Nullable<decimal> currentSpeedSrf
        {
            get { return _currentSpeedSrf; }
            set
            {
                if (_currentSpeedSrf != value)
                {
                    _currentSpeedSrf = value;
                    OnPropertyChanged("currentSpeedSrf");
                }
            }
        }
        private Nullable<decimal> _currentSpeedSrf;
    
        [DataMember]
        public Nullable<short> currentDirectionBot
        {
            get { return _currentDirectionBot; }
            set
            {
                if (_currentDirectionBot != value)
                {
                    _currentDirectionBot = value;
                    OnPropertyChanged("currentDirectionBot");
                }
            }
        }
        private Nullable<short> _currentDirectionBot;
    
        [DataMember]
        public Nullable<decimal> currentSpeedBot
        {
            get { return _currentSpeedBot; }
            set
            {
                if (_currentSpeedBot != value)
                {
                    _currentSpeedBot = value;
                    OnPropertyChanged("currentSpeedBot");
                }
            }
        }
        private Nullable<decimal> _currentSpeedBot;
    
        [DataMember]
        public Nullable<short> waveDirection
        {
            get { return _waveDirection; }
            set
            {
                if (_waveDirection != value)
                {
                    _waveDirection = value;
                    OnPropertyChanged("waveDirection");
                }
            }
        }
        private Nullable<short> _waveDirection;
    
        [DataMember]
        public Nullable<decimal> waveHeigth
        {
            get { return _waveHeigth; }
            set
            {
                if (_waveHeigth != value)
                {
                    _waveHeigth = value;
                    OnPropertyChanged("waveHeigth");
                }
            }
        }
        private Nullable<decimal> _waveHeigth;
    
        [DataMember]
        public string thermoCline
        {
            get { return _thermoCline; }
            set
            {
                if (_thermoCline != value)
                {
                    _thermoCline = value;
                    OnPropertyChanged("thermoCline");
                }
            }
        }
        private string _thermoCline;
    
        [DataMember]
        public Nullable<decimal> thermoClineDepth
        {
            get { return _thermoClineDepth; }
            set
            {
                if (_thermoClineDepth != value)
                {
                    _thermoClineDepth = value;
                    OnPropertyChanged("thermoClineDepth");
                }
            }
        }
        private Nullable<decimal> _thermoClineDepth;
    
        [DataMember]
        public Nullable<decimal> temperatureSrf
        {
            get { return _temperatureSrf; }
            set
            {
                if (_temperatureSrf != value)
                {
                    _temperatureSrf = value;
                    OnPropertyChanged("temperatureSrf");
                }
            }
        }
        private Nullable<decimal> _temperatureSrf;
    
        [DataMember]
        public Nullable<decimal> temperatureBot
        {
            get { return _temperatureBot; }
            set
            {
                if (_temperatureBot != value)
                {
                    _temperatureBot = value;
                    OnPropertyChanged("temperatureBot");
                }
            }
        }
        private Nullable<decimal> _temperatureBot;
    
        [DataMember]
        public Nullable<decimal> oxygenSrf
        {
            get { return _oxygenSrf; }
            set
            {
                if (_oxygenSrf != value)
                {
                    _oxygenSrf = value;
                    OnPropertyChanged("oxygenSrf");
                }
            }
        }
        private Nullable<decimal> _oxygenSrf;
    
        [DataMember]
        public Nullable<decimal> oxygenBot
        {
            get { return _oxygenBot; }
            set
            {
                if (_oxygenBot != value)
                {
                    _oxygenBot = value;
                    OnPropertyChanged("oxygenBot");
                }
            }
        }
        private Nullable<decimal> _oxygenBot;
    
        [DataMember]
        public Nullable<decimal> salinitySrf
        {
            get { return _salinitySrf; }
            set
            {
                if (_salinitySrf != value)
                {
                    _salinitySrf = value;
                    OnPropertyChanged("salinitySrf");
                }
            }
        }
        private Nullable<decimal> _salinitySrf;
    
        [DataMember]
        public Nullable<decimal> salinityBot
        {
            get { return _salinityBot; }
            set
            {
                if (_salinityBot != value)
                {
                    _salinityBot = value;
                    OnPropertyChanged("salinityBot");
                }
            }
        }
        private Nullable<decimal> _salinityBot;
    
        [DataMember]
        public Nullable<int> samplePersonId
        {
            get { return _samplePersonId; }
            set
            {
                if (_samplePersonId != value)
                {
                    _samplePersonId = value;
                    OnPropertyChanged("samplePersonId");
                }
            }
        }
        private Nullable<int> _samplePersonId;
    
        [DataMember]
        public string samplePersonName
        {
            get { return _samplePersonName; }
            set
            {
                if (_samplePersonName != value)
                {
                    _samplePersonName = value;
                    OnPropertyChanged("samplePersonName");
                }
            }
        }
        private string _samplePersonName;
    
        [DataMember]
        public Nullable<int> analysisPersonId
        {
            get { return _analysisPersonId; }
            set
            {
                if (_analysisPersonId != value)
                {
                    _analysisPersonId = value;
                    OnPropertyChanged("analysisPersonId");
                }
            }
        }
        private Nullable<int> _analysisPersonId;
    
        [DataMember]
        public string analysisPersonName
        {
            get { return _analysisPersonName; }
            set
            {
                if (_analysisPersonName != value)
                {
                    _analysisPersonName = value;
                    OnPropertyChanged("analysisPersonName");
                }
            }
        }
        private string _analysisPersonName;
    
        [DataMember]
        public string remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public string sgId
        {
            get { return _sgId; }
            set
            {
                if (_sgId != value)
                {
                    _sgId = value;
                    OnPropertyChanged("sgId");
                }
            }
        }
        private string _sgId;
    
        [DataMember]
        public string weekdayWeekend
        {
            get { return _weekdayWeekend; }
            set
            {
                if (_weekdayWeekend != value)
                {
                    _weekdayWeekend = value;
                    OnPropertyChanged("weekdayWeekend");
                }
            }
        }
        private string _weekdayWeekend;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Trip Trip1
        {
            get { return _trip1; }
            set
            {
                if (!ReferenceEquals(_trip1, value))
                {
                    var previousValue = _trip1;
                    _trip1 = value;
                    FixupTrip1(previousValue);
                    OnNavigationPropertyChanged("Trip1");
                }
            }
        }
        private Trip _trip1;
    
        [DataMember]
        public TrackableCollection<SpeciesList> SpeciesLists
        {
            get
            {
                if (_speciesLists == null)
                {
                    _speciesLists = new TrackableCollection<SpeciesList>();
                    _speciesLists.CollectionChanged += FixupSpeciesLists;
                }
                return _speciesLists;
            }
            set
            {
                if (!ReferenceEquals(_speciesLists, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_speciesLists != null)
                    {
                        _speciesLists.CollectionChanged -= FixupSpeciesLists;
                    }
                    _speciesLists = value;
                    if (_speciesLists != null)
                    {
                        _speciesLists.CollectionChanged += FixupSpeciesLists;
                    }
                    OnNavigationPropertyChanged("SpeciesLists");
                }
            }
        }
        private TrackableCollection<SpeciesList> _speciesLists;
    
        [DataMember]
        public TrackableCollection<SpeciesListRaised> SpeciesListRaiseds
        {
            get
            {
                if (_speciesListRaiseds == null)
                {
                    _speciesListRaiseds = new TrackableCollection<SpeciesListRaised>();
                    _speciesListRaiseds.CollectionChanged += FixupSpeciesListRaiseds;
                }
                return _speciesListRaiseds;
            }
            set
            {
                if (!ReferenceEquals(_speciesListRaiseds, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_speciesListRaiseds != null)
                    {
                        _speciesListRaiseds.CollectionChanged -= FixupSpeciesListRaiseds;
                    }
                    _speciesListRaiseds = value;
                    if (_speciesListRaiseds != null)
                    {
                        _speciesListRaiseds.CollectionChanged += FixupSpeciesListRaiseds;
                    }
                    OnNavigationPropertyChanged("SpeciesListRaiseds");
                }
            }
        }
        private TrackableCollection<SpeciesListRaised> _speciesListRaiseds;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Trip1 = null;
            SpeciesLists.Clear();
            SpeciesListRaiseds.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupTrip1(Trip previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Samples.Contains(this))
            {
                previousValue.Samples.Remove(this);
            }
    
            if (Trip1 != null)
            {
                if (!Trip1.Samples.Contains(this))
                {
                    Trip1.Samples.Add(this);
                }
    
                tripId = Trip1.tripId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Trip1")
                    && (ChangeTracker.OriginalValues["Trip1"] == Trip1))
                {
                    ChangeTracker.OriginalValues.Remove("Trip1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Trip1", previousValue);
                }
                if (Trip1 != null && !Trip1.ChangeTracker.ChangeTrackingEnabled)
                {
                    Trip1.StartTracking();
                }
            }
        }
    
        private void FixupSpeciesLists(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SpeciesList item in e.NewItems)
                {
                    item.Sample = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SpeciesLists", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SpeciesList item in e.OldItems)
                {
                    if (ReferenceEquals(item.Sample, this))
                    {
                        item.Sample = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SpeciesLists", item);
                    }
                }
            }
        }
    
        private void FixupSpeciesListRaiseds(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SpeciesListRaised item in e.NewItems)
                {
                    item.Sample = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SpeciesListRaiseds", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SpeciesListRaised item in e.OldItems)
                {
                    if (ReferenceEquals(item.Sample, this))
                    {
                        item.Sample = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SpeciesListRaiseds", item);
                    }
                }
            }
        }

        #endregion

    }
}
