//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Warehouse.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Trip))]
    public partial class Cruise: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int cruiseId
        {
            get { return _cruiseId; }
            set
            {
                if (_cruiseId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'cruiseId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cruiseId = value;
                    OnPropertyChanged("cruiseId");
                }
            }
        }
        private int _cruiseId;
    
        [DataMember]
        public int year
        {
            get { return _year; }
            set
            {
                if (_year != value)
                {
                    _year = value;
                    OnPropertyChanged("year");
                }
            }
        }
        private int _year;
    
        [DataMember]
        public string cruise1
        {
            get { return _cruise1; }
            set
            {
                if (_cruise1 != value)
                {
                    _cruise1 = value;
                    OnPropertyChanged("cruise1");
                }
            }
        }
        private string _cruise1;
    
        [DataMember]
        public Nullable<int> responsibleId
        {
            get { return _responsibleId; }
            set
            {
                if (_responsibleId != value)
                {
                    _responsibleId = value;
                    OnPropertyChanged("responsibleId");
                }
            }
        }
        private Nullable<int> _responsibleId;
    
        [DataMember]
        public string responsibleName
        {
            get { return _responsibleName; }
            set
            {
                if (_responsibleName != value)
                {
                    _responsibleName = value;
                    OnPropertyChanged("responsibleName");
                }
            }
        }
        private string _responsibleName;
    
        [DataMember]
        public string participants
        {
            get { return _participants; }
            set
            {
                if (_participants != value)
                {
                    _participants = value;
                    OnPropertyChanged("participants");
                }
            }
        }
        private string _participants;
    
        [DataMember]
        public string summary
        {
            get { return _summary; }
            set
            {
                if (_summary != value)
                {
                    _summary = value;
                    OnPropertyChanged("summary");
                }
            }
        }
        private string _summary;
    
        [DataMember]
        public string remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("remark");
                }
            }
        }
        private string _remark;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Trip> Trips
        {
            get
            {
                if (_trips == null)
                {
                    _trips = new TrackableCollection<Trip>();
                    _trips.CollectionChanged += FixupTrips;
                }
                return _trips;
            }
            set
            {
                if (!ReferenceEquals(_trips, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_trips != null)
                    {
                        _trips.CollectionChanged -= FixupTrips;
                    }
                    _trips = value;
                    if (_trips != null)
                    {
                        _trips.CollectionChanged += FixupTrips;
                    }
                    OnNavigationPropertyChanged("Trips");
                }
            }
        }
        private TrackableCollection<Trip> _trips;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Trips.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupTrips(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Trip item in e.NewItems)
                {
                    item.Cruise1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Trips", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Trip item in e.OldItems)
                {
                    if (ReferenceEquals(item.Cruise1, this))
                    {
                        item.Cruise1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Trips", item);
                    }
                }
            }
        }

        #endregion

    }
}
