//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(L_Platform))]
    [KnownType(typeof(Trip))]
    public partial class Person: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int personId
        {
            get { return _personId; }
            set
            {
                if (_personId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'personId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _personId = value;
                    OnPropertyChanged("personId");
                }
            }
        }
        private int _personId;
    
        [DataMember]
        public string name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string organization
        {
            get { return _organization; }
            set
            {
                if (_organization != value)
                {
                    _organization = value;
                    OnPropertyChanged("organization");
                }
            }
        }
        private string _organization;
    
        [DataMember]
        public string address
        {
            get { return _address; }
            set
            {
                if (_address != value)
                {
                    _address = value;
                    OnPropertyChanged("address");
                }
            }
        }
        private string _address;
    
        [DataMember]
        public string zipTown
        {
            get { return _zipTown; }
            set
            {
                if (_zipTown != value)
                {
                    _zipTown = value;
                    OnPropertyChanged("zipTown");
                }
            }
        }
        private string _zipTown;
    
        [DataMember]
        public string telephone
        {
            get { return _telephone; }
            set
            {
                if (_telephone != value)
                {
                    _telephone = value;
                    OnPropertyChanged("telephone");
                }
            }
        }
        private string _telephone;
    
        [DataMember]
        public string SEno
        {
            get { return _sEno; }
            set
            {
                if (_sEno != value)
                {
                    _sEno = value;
                    OnPropertyChanged("SEno");
                }
            }
        }
        private string _sEno;
    
        [DataMember]
        public string bankAccountNo
        {
            get { return _bankAccountNo; }
            set
            {
                if (_bankAccountNo != value)
                {
                    _bankAccountNo = value;
                    OnPropertyChanged("bankAccountNo");
                }
            }
        }
        private string _bankAccountNo;
    
        [DataMember]
        public string telephonePrivate
        {
            get { return _telephonePrivate; }
            set
            {
                if (_telephonePrivate != value)
                {
                    _telephonePrivate = value;
                    OnPropertyChanged("telephonePrivate");
                }
            }
        }
        private string _telephonePrivate;
    
        [DataMember]
        public string telephoneMobile
        {
            get { return _telephoneMobile; }
            set
            {
                if (_telephoneMobile != value)
                {
                    _telephoneMobile = value;
                    OnPropertyChanged("telephoneMobile");
                }
            }
        }
        private string _telephoneMobile;
    
        [DataMember]
        public string email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public string facebook
        {
            get { return _facebook; }
            set
            {
                if (_facebook != value)
                {
                    _facebook = value;
                    OnPropertyChanged("facebook");
                }
            }
        }
        private string _facebook;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<L_Platform> L_Platform
        {
            get
            {
                if (_l_Platform == null)
                {
                    _l_Platform = new TrackableCollection<L_Platform>();
                    _l_Platform.CollectionChanged += FixupL_Platform;
                }
                return _l_Platform;
            }
            set
            {
                if (!ReferenceEquals(_l_Platform, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_l_Platform != null)
                    {
                        _l_Platform.CollectionChanged -= FixupL_Platform;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (L_Platform item in _l_Platform)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _l_Platform = value;
                    if (_l_Platform != null)
                    {
                        _l_Platform.CollectionChanged += FixupL_Platform;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (L_Platform item in _l_Platform)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("L_Platform");
                }
            }
        }
        private TrackableCollection<L_Platform> _l_Platform;
    
        [DataMember]
        public TrackableCollection<Trip> Trip
        {
            get
            {
                if (_trip == null)
                {
                    _trip = new TrackableCollection<Trip>();
                    _trip.CollectionChanged += FixupTrip;
                }
                return _trip;
            }
            set
            {
                if (!ReferenceEquals(_trip, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_trip != null)
                    {
                        _trip.CollectionChanged -= FixupTrip;
                    }
                    _trip = value;
                    if (_trip != null)
                    {
                        _trip.CollectionChanged += FixupTrip;
                    }
                    OnNavigationPropertyChanged("Trip");
                }
            }
        }
        private TrackableCollection<Trip> _trip;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            L_Platform.Clear();
            Trip.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupL_Platform(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (L_Platform item in e.NewItems)
                {
                    item.Person = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("L_Platform", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (L_Platform item in e.OldItems)
                {
                    if (ReferenceEquals(item.Person, this))
                    {
                        item.Person = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("L_Platform", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTrip(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Trip item in e.NewItems)
                {
                    item.Person = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Trip", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Trip item in e.OldItems)
                {
                    if (ReferenceEquals(item.Person, this))
                    {
                        item.Person = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Trip", item);
                    }
                }
            }
        }

        #endregion

    }
}
