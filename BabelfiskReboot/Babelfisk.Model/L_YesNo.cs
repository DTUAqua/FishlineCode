//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Est_MethodStep))]
    [KnownType(typeof(Est_Strata))]
    [KnownType(typeof(SubSample))]
    public partial class L_YesNo: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int L_YesNoId
        {
            get { return _l_YesNoId; }
            set
            {
                if (_l_YesNoId != value)
                {
                    _l_YesNoId = value;
                    OnPropertyChanged("L_YesNoId");
                }
            }
        }
        private int _l_YesNoId;
    
        [DataMember]
        public string YesNo
        {
            get { return _yesNo; }
            set
            {
                if (_yesNo != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'YesNo' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _yesNo = value;
                    OnPropertyChanged("YesNo");
                }
            }
        }
        private string _yesNo;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Est_MethodStep> Est_MethodStep
        {
            get
            {
                if (_est_MethodStep == null)
                {
                    _est_MethodStep = new TrackableCollection<Est_MethodStep>();
                    _est_MethodStep.CollectionChanged += FixupEst_MethodStep;
                }
                return _est_MethodStep;
            }
            set
            {
                if (!ReferenceEquals(_est_MethodStep, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_est_MethodStep != null)
                    {
                        _est_MethodStep.CollectionChanged -= FixupEst_MethodStep;
                    }
                    _est_MethodStep = value;
                    if (_est_MethodStep != null)
                    {
                        _est_MethodStep.CollectionChanged += FixupEst_MethodStep;
                    }
                    OnNavigationPropertyChanged("Est_MethodStep");
                }
            }
        }
        private TrackableCollection<Est_MethodStep> _est_MethodStep;
    
        [DataMember]
        public TrackableCollection<Est_Strata> Est_Strata
        {
            get
            {
                if (_est_Strata == null)
                {
                    _est_Strata = new TrackableCollection<Est_Strata>();
                    _est_Strata.CollectionChanged += FixupEst_Strata;
                }
                return _est_Strata;
            }
            set
            {
                if (!ReferenceEquals(_est_Strata, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_est_Strata != null)
                    {
                        _est_Strata.CollectionChanged -= FixupEst_Strata;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (Est_Strata item in _est_Strata)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _est_Strata = value;
                    if (_est_Strata != null)
                    {
                        _est_Strata.CollectionChanged += FixupEst_Strata;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (Est_Strata item in _est_Strata)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Est_Strata");
                }
            }
        }
        private TrackableCollection<Est_Strata> _est_Strata;
    
        [DataMember]
        public TrackableCollection<Est_Strata> Est_Strata1
        {
            get
            {
                if (_est_Strata1 == null)
                {
                    _est_Strata1 = new TrackableCollection<Est_Strata>();
                    _est_Strata1.CollectionChanged += FixupEst_Strata1;
                }
                return _est_Strata1;
            }
            set
            {
                if (!ReferenceEquals(_est_Strata1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_est_Strata1 != null)
                    {
                        _est_Strata1.CollectionChanged -= FixupEst_Strata1;
                    }
                    _est_Strata1 = value;
                    if (_est_Strata1 != null)
                    {
                        _est_Strata1.CollectionChanged += FixupEst_Strata1;
                    }
                    OnNavigationPropertyChanged("Est_Strata1");
                }
            }
        }
        private TrackableCollection<Est_Strata> _est_Strata1;
    
        [DataMember]
        public TrackableCollection<SubSample> SubSample
        {
            get
            {
                if (_subSample == null)
                {
                    _subSample = new TrackableCollection<SubSample>();
                    _subSample.CollectionChanged += FixupSubSample;
                }
                return _subSample;
            }
            set
            {
                if (!ReferenceEquals(_subSample, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_subSample != null)
                    {
                        _subSample.CollectionChanged -= FixupSubSample;
                    }
                    _subSample = value;
                    if (_subSample != null)
                    {
                        _subSample.CollectionChanged += FixupSubSample;
                    }
                    OnNavigationPropertyChanged("SubSample");
                }
            }
        }
        private TrackableCollection<SubSample> _subSample;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Est_MethodStep.Clear();
            Est_Strata.Clear();
            Est_Strata1.Clear();
            SubSample.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupEst_MethodStep(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Est_MethodStep item in e.NewItems)
                {
                    item.L_YesNo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Est_MethodStep", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Est_MethodStep item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_YesNo, this))
                    {
                        item.L_YesNo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Est_MethodStep", item);
                    }
                }
            }
        }
    
        private void FixupEst_Strata(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Est_Strata item in e.NewItems)
                {
                    item.L_YesNo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Est_Strata", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Est_Strata item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_YesNo, this))
                    {
                        item.L_YesNo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Est_Strata", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupEst_Strata1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Est_Strata item in e.NewItems)
                {
                    item.L_YesNo1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Est_Strata1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Est_Strata item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_YesNo1, this))
                    {
                        item.L_YesNo1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Est_Strata1", item);
                    }
                }
            }
        }
    
        private void FixupSubSample(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SubSample item in e.NewItems)
                {
                    item.L_YesNo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SubSample", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SubSample item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_YesNo, this))
                    {
                        item.L_YesNo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SubSample", item);
                    }
                }
            }
        }

        #endregion

    }
}
