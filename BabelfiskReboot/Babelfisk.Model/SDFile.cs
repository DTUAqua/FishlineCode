//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SDAnnotation))]
    [KnownType(typeof(SDSample))]
    public partial class SDFile: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int sdFileId
        {
            get { return _sdFileId; }
            set
            {
                if (_sdFileId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'sdFileId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _sdFileId = value;
                    OnPropertyChanged("sdFileId");
                }
            }
        }
        private int _sdFileId;
    
        [DataMember]
        public System.Guid sdFileGuid
        {
            get { return _sdFileGuid; }
            set
            {
                if (_sdFileGuid != value)
                {
                    _sdFileGuid = value;
                    OnPropertyChanged("sdFileGuid");
                }
            }
        }
        private System.Guid _sdFileGuid;
    
        [DataMember]
        public int sdSampleId
        {
            get { return _sdSampleId; }
            set
            {
                if (_sdSampleId != value)
                {
                    ChangeTracker.RecordOriginalValue("sdSampleId", _sdSampleId);
                    if (!IsDeserializing)
                    {
                        if (SDSample != null && SDSample.sdSampleId != value)
                        {
                            SDSample = null;
                        }
                    }
                    _sdSampleId = value;
                    OnPropertyChanged("sdSampleId");
                }
            }
        }
        private int _sdSampleId;
    
        [DataMember]
        public string fileName
        {
            get { return _fileName; }
            set
            {
                if (_fileName != value)
                {
                    _fileName = value;
                    OnPropertyChanged("fileName");
                }
            }
        }
        private string _fileName;
    
        [DataMember]
        public string displayName
        {
            get { return _displayName; }
            set
            {
                if (_displayName != value)
                {
                    _displayName = value;
                    OnPropertyChanged("displayName");
                }
            }
        }
        private string _displayName;
    
        [DataMember]
        public string path
        {
            get { return _path; }
            set
            {
                if (_path != value)
                {
                    _path = value;
                    OnPropertyChanged("path");
                }
            }
        }
        private string _path;
    
        [DataMember]
        public Nullable<double> scale
        {
            get { return _scale; }
            set
            {
                if (_scale != value)
                {
                    _scale = value;
                    OnPropertyChanged("scale");
                }
            }
        }
        private Nullable<double> _scale;
    
        [DataMember]
        public Nullable<int> imageWidth
        {
            get { return _imageWidth; }
            set
            {
                if (_imageWidth != value)
                {
                    _imageWidth = value;
                    OnPropertyChanged("imageWidth");
                }
            }
        }
        private Nullable<int> _imageWidth;
    
        [DataMember]
        public Nullable<int> imageHeight
        {
            get { return _imageHeight; }
            set
            {
                if (_imageHeight != value)
                {
                    _imageHeight = value;
                    OnPropertyChanged("imageHeight");
                }
            }
        }
        private Nullable<int> _imageHeight;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<SDAnnotation> SDAnnotation
        {
            get
            {
                if (_sDAnnotation == null)
                {
                    _sDAnnotation = new TrackableCollection<SDAnnotation>();
                    _sDAnnotation.CollectionChanged += FixupSDAnnotation;
                }
                return _sDAnnotation;
            }
            set
            {
                if (!ReferenceEquals(_sDAnnotation, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sDAnnotation != null)
                    {
                        _sDAnnotation.CollectionChanged -= FixupSDAnnotation;
                    }
                    _sDAnnotation = value;
                    if (_sDAnnotation != null)
                    {
                        _sDAnnotation.CollectionChanged += FixupSDAnnotation;
                    }
                    OnNavigationPropertyChanged("SDAnnotation");
                }
            }
        }
        private TrackableCollection<SDAnnotation> _sDAnnotation;
    
        [DataMember]
        public SDSample SDSample
        {
            get { return _sDSample; }
            set
            {
                if (!ReferenceEquals(_sDSample, value))
                {
                    var previousValue = _sDSample;
                    _sDSample = value;
                    FixupSDSample(previousValue);
                    OnNavigationPropertyChanged("SDSample");
                }
            }
        }
        private SDSample _sDSample;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SDAnnotation.Clear();
            SDSample = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupSDSample(SDSample previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SDFile.Contains(this))
            {
                previousValue.SDFile.Remove(this);
            }
    
            if (SDSample != null)
            {
                if (!SDSample.SDFile.Contains(this))
                {
                    SDSample.SDFile.Add(this);
                }
    
                sdSampleId = SDSample.sdSampleId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SDSample")
                    && (ChangeTracker.OriginalValues["SDSample"] == SDSample))
                {
                    ChangeTracker.OriginalValues.Remove("SDSample");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SDSample", previousValue);
                }
                if (SDSample != null && !SDSample.ChangeTracker.ChangeTrackingEnabled)
                {
                    SDSample.StartTracking();
                }
            }
        }
    
        private void FixupSDAnnotation(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SDAnnotation item in e.NewItems)
                {
                    item.SDFile = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SDAnnotation", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SDAnnotation item in e.OldItems)
                {
                    if (ReferenceEquals(item.SDFile, this))
                    {
                        item.SDFile = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SDAnnotation", item);
                    }
                }
            }
        }

        #endregion

    }
}
