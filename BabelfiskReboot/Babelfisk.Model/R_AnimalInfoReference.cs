//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AnimalInfo))]
    [KnownType(typeof(L_Reference))]
    public partial class R_AnimalInfoReference: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int R_animalInfoReferenceId
        {
            get { return _r_animalInfoReferenceId; }
            set
            {
                if (_r_animalInfoReferenceId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'R_animalInfoReferenceId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _r_animalInfoReferenceId = value;
                    OnPropertyChanged("R_animalInfoReferenceId");
                }
            }
        }
        private int _r_animalInfoReferenceId;
    
        [DataMember]
        public int animalInfoId
        {
            get { return _animalInfoId; }
            set
            {
                if (_animalInfoId != value)
                {
                    ChangeTracker.RecordOriginalValue("animalInfoId", _animalInfoId);
                    if (!IsDeserializing)
                    {
                        if (AnimalInfo != null && AnimalInfo.animalInfoId != value)
                        {
                            AnimalInfo = null;
                        }
                    }
                    _animalInfoId = value;
                    OnPropertyChanged("animalInfoId");
                }
            }
        }
        private int _animalInfoId;
    
        [DataMember]
        public int L_referenceId
        {
            get { return _l_referenceId; }
            set
            {
                if (_l_referenceId != value)
                {
                    ChangeTracker.RecordOriginalValue("L_referenceId", _l_referenceId);
                    if (!IsDeserializing)
                    {
                        if (L_Reference != null && L_Reference.L_referenceId != value)
                        {
                            L_Reference = null;
                        }
                    }
                    _l_referenceId = value;
                    OnPropertyChanged("L_referenceId");
                }
            }
        }
        private int _l_referenceId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public AnimalInfo AnimalInfo
        {
            get { return _animalInfo; }
            set
            {
                if (!ReferenceEquals(_animalInfo, value))
                {
                    var previousValue = _animalInfo;
                    _animalInfo = value;
                    FixupAnimalInfo(previousValue);
                    OnNavigationPropertyChanged("AnimalInfo");
                }
            }
        }
        private AnimalInfo _animalInfo;
    
        [DataMember]
        public L_Reference L_Reference
        {
            get { return _l_Reference; }
            set
            {
                if (!ReferenceEquals(_l_Reference, value))
                {
                    var previousValue = _l_Reference;
                    _l_Reference = value;
                    FixupL_Reference(previousValue);
                    OnNavigationPropertyChanged("L_Reference");
                }
            }
        }
        private L_Reference _l_Reference;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AnimalInfo = null;
            L_Reference = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupAnimalInfo(AnimalInfo previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.R_AnimalInfoReference.Contains(this))
            {
                previousValue.R_AnimalInfoReference.Remove(this);
            }
    
            if (AnimalInfo != null)
            {
                if (!AnimalInfo.R_AnimalInfoReference.Contains(this))
                {
                    AnimalInfo.R_AnimalInfoReference.Add(this);
                }
    
                animalInfoId = AnimalInfo.animalInfoId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AnimalInfo")
                    && (ChangeTracker.OriginalValues["AnimalInfo"] == AnimalInfo))
                {
                    ChangeTracker.OriginalValues.Remove("AnimalInfo");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AnimalInfo", previousValue);
                }
                if (AnimalInfo != null && !AnimalInfo.ChangeTracker.ChangeTrackingEnabled)
                {
                    AnimalInfo.StartTracking();
                }
            }
        }
    
        private void FixupL_Reference(L_Reference previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.R_AnimalInfoReference.Contains(this))
            {
                previousValue.R_AnimalInfoReference.Remove(this);
            }
    
            if (L_Reference != null)
            {
                if (!L_Reference.R_AnimalInfoReference.Contains(this))
                {
                    L_Reference.R_AnimalInfoReference.Add(this);
                }
    
                L_referenceId = L_Reference.L_referenceId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Reference")
                    && (ChangeTracker.OriginalValues["L_Reference"] == L_Reference))
                {
                    ChangeTracker.OriginalValues.Remove("L_Reference");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Reference", previousValue);
                }
                if (L_Reference != null && !L_Reference.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Reference.StartTracking();
                }
            }
        }

        #endregion

    }
}
