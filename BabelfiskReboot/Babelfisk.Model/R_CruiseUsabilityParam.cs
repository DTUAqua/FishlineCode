//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Cruise))]
    [KnownType(typeof(L_UsabilityParam))]
    public partial class R_CruiseUsabilityParam: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int R_CruiseUsbilityParamId
        {
            get { return _r_CruiseUsbilityParamId; }
            set
            {
                if (_r_CruiseUsbilityParamId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'R_CruiseUsbilityParamId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _r_CruiseUsbilityParamId = value;
                    OnPropertyChanged("R_CruiseUsbilityParamId");
                }
            }
        }
        private int _r_CruiseUsbilityParamId;
    
        [DataMember]
        public int cruiseId
        {
            get { return _cruiseId; }
            set
            {
                if (_cruiseId != value)
                {
                    ChangeTracker.RecordOriginalValue("cruiseId", _cruiseId);
                    if (!IsDeserializing)
                    {
                        if (Cruise != null && Cruise.cruiseId != value)
                        {
                            Cruise = null;
                        }
                    }
                    _cruiseId = value;
                    OnPropertyChanged("cruiseId");
                }
            }
        }
        private int _cruiseId;
    
        [DataMember]
        public int usabilityParamId
        {
            get { return _usabilityParamId; }
            set
            {
                if (_usabilityParamId != value)
                {
                    ChangeTracker.RecordOriginalValue("usabilityParamId", _usabilityParamId);
                    if (!IsDeserializing)
                    {
                        if (L_UsabilityParam != null && L_UsabilityParam.usabilityParamId != value)
                        {
                            L_UsabilityParam = null;
                        }
                    }
                    _usabilityParamId = value;
                    OnPropertyChanged("usabilityParamId");
                }
            }
        }
        private int _usabilityParamId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Cruise Cruise
        {
            get { return _cruise; }
            set
            {
                if (!ReferenceEquals(_cruise, value))
                {
                    var previousValue = _cruise;
                    _cruise = value;
                    FixupCruise(previousValue);
                    OnNavigationPropertyChanged("Cruise");
                }
            }
        }
        private Cruise _cruise;
    
        [DataMember]
        public L_UsabilityParam L_UsabilityParam
        {
            get { return _l_UsabilityParam; }
            set
            {
                if (!ReferenceEquals(_l_UsabilityParam, value))
                {
                    var previousValue = _l_UsabilityParam;
                    _l_UsabilityParam = value;
                    FixupL_UsabilityParam(previousValue);
                    OnNavigationPropertyChanged("L_UsabilityParam");
                }
            }
        }
        private L_UsabilityParam _l_UsabilityParam;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Cruise = null;
            L_UsabilityParam = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupCruise(Cruise previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.R_CruiseUsabilityParam.Contains(this))
            {
                previousValue.R_CruiseUsabilityParam.Remove(this);
            }
    
            if (Cruise != null)
            {
                if (!Cruise.R_CruiseUsabilityParam.Contains(this))
                {
                    Cruise.R_CruiseUsabilityParam.Add(this);
                }
    
                cruiseId = Cruise.cruiseId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Cruise")
                    && (ChangeTracker.OriginalValues["Cruise"] == Cruise))
                {
                    ChangeTracker.OriginalValues.Remove("Cruise");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Cruise", previousValue);
                }
                if (Cruise != null && !Cruise.ChangeTracker.ChangeTrackingEnabled)
                {
                    Cruise.StartTracking();
                }
            }
        }
    
        private void FixupL_UsabilityParam(L_UsabilityParam previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.R_CruiseUsabilityParam.Contains(this))
            {
                previousValue.R_CruiseUsabilityParam.Remove(this);
            }
    
            if (L_UsabilityParam != null)
            {
                if (!L_UsabilityParam.R_CruiseUsabilityParam.Contains(this))
                {
                    L_UsabilityParam.R_CruiseUsabilityParam.Add(this);
                }
    
                usabilityParamId = L_UsabilityParam.usabilityParamId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_UsabilityParam")
                    && (ChangeTracker.OriginalValues["L_UsabilityParam"] == L_UsabilityParam))
                {
                    ChangeTracker.OriginalValues.Remove("L_UsabilityParam");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_UsabilityParam", previousValue);
                }
                if (L_UsabilityParam != null && !L_UsabilityParam.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_UsabilityParam.StartTracking();
                }
            }
        }

        #endregion

    }
}
