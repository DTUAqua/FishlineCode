//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DFUPerson))]
    [KnownType(typeof(Est_Strata))]
    [KnownType(typeof(L_CatchRegistration))]
    [KnownType(typeof(L_DFUArea))]
    [KnownType(typeof(L_FishingActivityCategory))]
    [KnownType(typeof(L_Gear))]
    [KnownType(typeof(L_GearType))]
    [KnownType(typeof(L_SampleStatus))]
    [KnownType(typeof(L_SpeciesRegistration))]
    [KnownType(typeof(L_StatisticalRectangle))]
    [KnownType(typeof(R_SampleUsabilityParam))]
    [KnownType(typeof(R_TargetSpecies))]
    [KnownType(typeof(Trip))]
    [KnownType(typeof(SpeciesList))]
    [KnownType(typeof(TrawlOperation))]
    [KnownType(typeof(L_SelectionDevice))]
    [KnownType(typeof(L_HaulType))]
    [KnownType(typeof(L_ThermoCline))]
    [KnownType(typeof(L_TimeZone))]
    [KnownType(typeof(L_WeightEstimationMethod))]
    [KnownType(typeof(L_SelectionDeviceSource))]
    public partial class Sample: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int sampleId
        {
            get { return _sampleId; }
            set
            {
                if (_sampleId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'sampleId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _sampleId = value;
                    OnPropertyChanged("sampleId");
                }
            }
        }
        private int _sampleId;
    
        [DataMember]
        public int tripId
        {
            get { return _tripId; }
            set
            {
                if (_tripId != value)
                {
                    ChangeTracker.RecordOriginalValue("tripId", _tripId);
                    if (!IsDeserializing)
                    {
                        if (Trip != null && Trip.tripId != value)
                        {
                            Trip = null;
                        }
                    }
                    _tripId = value;
                    OnPropertyChanged("tripId");
                }
            }
        }
        private int _tripId;
    
        [DataMember]
        public string station
        {
            get { return _station; }
            set
            {
                if (_station != value)
                {
                    _station = value;
                    OnPropertyChanged("station");
                }
            }
        }
        private string _station;
    
        [DataMember]
        public string stationName
        {
            get { return _stationName; }
            set
            {
                if (_stationName != value)
                {
                    _stationName = value;
                    OnPropertyChanged("stationName");
                }
            }
        }
        private string _stationName;
    
        [DataMember]
        public string @virtual
        {
            get { return _virtual; }
            set
            {
                if (_virtual != value)
                {
                    _virtual = value;
                    OnPropertyChanged("virtual");
                }
            }
        }
        private string _virtual;
    
        [DataMember]
        public Nullable<int> gearId
        {
            get { return _gearId; }
            set
            {
                if (_gearId != value)
                {
                    ChangeTracker.RecordOriginalValue("gearId", _gearId);
                    if (!IsDeserializing)
                    {
                        if (L_Gear != null && L_Gear.gearId != value)
                        {
                            L_Gear = null;
                        }
                    }
                    _gearId = value;
                    OnPropertyChanged("gearId");
                }
            }
        }
        private Nullable<int> _gearId;
    
        [DataMember]
        public string sampleType
        {
            get { return _sampleType; }
            set
            {
                if (_sampleType != value)
                {
                    _sampleType = value;
                    OnPropertyChanged("sampleType");
                }
            }
        }
        private string _sampleType;
    
        [DataMember]
        public System.DateTime dateGearStart
        {
            get { return _dateGearStart; }
            set
            {
                if (_dateGearStart != value)
                {
                    _dateGearStart = value;
                    OnPropertyChanged("dateGearStart");
                }
            }
        }
        private System.DateTime _dateGearStart;
    
        [DataMember]
        public System.DateTime dateGearEnd
        {
            get { return _dateGearEnd; }
            set
            {
                if (_dateGearEnd != value)
                {
                    _dateGearEnd = value;
                    OnPropertyChanged("dateGearEnd");
                }
            }
        }
        private System.DateTime _dateGearEnd;
    
        [DataMember]
        public Nullable<int> timeZone
        {
            get { return _timeZone; }
            set
            {
                if (_timeZone != value)
                {
                    ChangeTracker.RecordOriginalValue("timeZone", _timeZone);
                    if (!IsDeserializing)
                    {
                        if (L_TimeZone != null && L_TimeZone.timeZone != value)
                        {
                            L_TimeZone = null;
                        }
                    }
                    _timeZone = value;
                    OnPropertyChanged("timeZone");
                }
            }
        }
        private Nullable<int> _timeZone;
    
        [DataMember]
        public Nullable<int> fishingtime
        {
            get { return _fishingtime; }
            set
            {
                if (_fishingtime != value)
                {
                    _fishingtime = value;
                    OnPropertyChanged("fishingtime");
                }
            }
        }
        private Nullable<int> _fishingtime;
    
        [DataMember]
        public string night
        {
            get { return _night; }
            set
            {
                if (_night != value)
                {
                    _night = value;
                    OnPropertyChanged("night");
                }
            }
        }
        private string _night;
    
        [DataMember]
        public string latPosStartText
        {
            get { return _latPosStartText; }
            set
            {
                if (_latPosStartText != value)
                {
                    _latPosStartText = value;
                    OnPropertyChanged("latPosStartText");
                }
            }
        }
        private string _latPosStartText;
    
        [DataMember]
        public string lonPosStartText
        {
            get { return _lonPosStartText; }
            set
            {
                if (_lonPosStartText != value)
                {
                    _lonPosStartText = value;
                    OnPropertyChanged("lonPosStartText");
                }
            }
        }
        private string _lonPosStartText;
    
        [DataMember]
        public string latPosEndText
        {
            get { return _latPosEndText; }
            set
            {
                if (_latPosEndText != value)
                {
                    _latPosEndText = value;
                    OnPropertyChanged("latPosEndText");
                }
            }
        }
        private string _latPosEndText;
    
        [DataMember]
        public string lonPosEndText
        {
            get { return _lonPosEndText; }
            set
            {
                if (_lonPosEndText != value)
                {
                    _lonPosEndText = value;
                    OnPropertyChanged("lonPosEndText");
                }
            }
        }
        private string _lonPosEndText;
    
        [DataMember]
        public Nullable<int> fishingActivityId
        {
            get { return _fishingActivityId; }
            set
            {
                if (_fishingActivityId != value)
                {
                    ChangeTracker.RecordOriginalValue("fishingActivityId", _fishingActivityId);
                    if (!IsDeserializing)
                    {
                        if (L_FishingActivityCategory != null && L_FishingActivityCategory.Id != value)
                        {
                            L_FishingActivityCategory = null;
                        }
                    }
                    _fishingActivityId = value;
                    OnPropertyChanged("fishingActivityId");
                }
            }
        }
        private Nullable<int> _fishingActivityId;
    
        [DataMember]
        public Nullable<int> fishingActivityNationalId
        {
            get { return _fishingActivityNationalId; }
            set
            {
                if (_fishingActivityNationalId != value)
                {
                    _fishingActivityNationalId = value;
                    OnPropertyChanged("fishingActivityNationalId");
                }
            }
        }
        private Nullable<int> _fishingActivityNationalId;
    
        [DataMember]
        public Nullable<int> catchRegistrationId
        {
            get { return _catchRegistrationId; }
            set
            {
                if (_catchRegistrationId != value)
                {
                    ChangeTracker.RecordOriginalValue("catchRegistrationId", _catchRegistrationId);
                    if (!IsDeserializing)
                    {
                        if (L_CatchRegistration != null && L_CatchRegistration.catchRegistrationId != value)
                        {
                            L_CatchRegistration = null;
                        }
                    }
                    _catchRegistrationId = value;
                    OnPropertyChanged("catchRegistrationId");
                }
            }
        }
        private Nullable<int> _catchRegistrationId;
    
        [DataMember]
        public Nullable<int> speciesRegistrationId
        {
            get { return _speciesRegistrationId; }
            set
            {
                if (_speciesRegistrationId != value)
                {
                    ChangeTracker.RecordOriginalValue("speciesRegistrationId", _speciesRegistrationId);
                    if (!IsDeserializing)
                    {
                        if (L_SpeciesRegistration != null && L_SpeciesRegistration.speciesRegistrationId != value)
                        {
                            L_SpeciesRegistration = null;
                        }
                    }
                    _speciesRegistrationId = value;
                    OnPropertyChanged("speciesRegistrationId");
                }
            }
        }
        private Nullable<int> _speciesRegistrationId;
    
        [DataMember]
        public string HVN_geartype
        {
            get { return _hVN_geartype; }
            set
            {
                if (_hVN_geartype != value)
                {
                    ChangeTracker.RecordOriginalValue("HVN_geartype", _hVN_geartype);
                    if (!IsDeserializing)
                    {
                        if (L_GearType != null && L_GearType.gearType != value)
                        {
                            L_GearType = null;
                        }
                    }
                    _hVN_geartype = value;
                    OnPropertyChanged("HVN_geartype");
                }
            }
        }
        private string _hVN_geartype;
    
        [DataMember]
        public Nullable<decimal> distance
        {
            get { return _distance; }
            set
            {
                if (_distance != value)
                {
                    _distance = value;
                    OnPropertyChanged("distance");
                }
            }
        }
        private Nullable<decimal> _distance;
    
        [DataMember]
        public string dfuArea
        {
            get { return _dfuArea; }
            set
            {
                if (_dfuArea != value)
                {
                    ChangeTracker.RecordOriginalValue("dfuArea", _dfuArea);
                    if (!IsDeserializing)
                    {
                        if (L_DFUArea != null && L_DFUArea.DFUArea != value)
                        {
                            L_DFUArea = null;
                        }
                    }
                    _dfuArea = value;
                    OnPropertyChanged("dfuArea");
                }
            }
        }
        private string _dfuArea;
    
        [DataMember]
        public string statisticalRectangle
        {
            get { return _statisticalRectangle; }
            set
            {
                if (_statisticalRectangle != value)
                {
                    ChangeTracker.RecordOriginalValue("statisticalRectangle", _statisticalRectangle);
                    if (!IsDeserializing)
                    {
                        if (L_StatisticalRectangle != null && L_StatisticalRectangle.statisticalRectangle != value)
                        {
                            L_StatisticalRectangle = null;
                        }
                    }
                    _statisticalRectangle = value;
                    OnPropertyChanged("statisticalRectangle");
                }
            }
        }
        private string _statisticalRectangle;
    
        [DataMember]
        public Nullable<decimal> depthAvg
        {
            get { return _depthAvg; }
            set
            {
                if (_depthAvg != value)
                {
                    _depthAvg = value;
                    OnPropertyChanged("depthAvg");
                }
            }
        }
        private Nullable<decimal> _depthAvg;
    
        [DataMember]
        public string bottomType
        {
            get { return _bottomType; }
            set
            {
                if (_bottomType != value)
                {
                    _bottomType = value;
                    OnPropertyChanged("bottomType");
                }
            }
        }
        private string _bottomType;
    
        [DataMember]
        public Nullable<short> windDirection
        {
            get { return _windDirection; }
            set
            {
                if (_windDirection != value)
                {
                    _windDirection = value;
                    OnPropertyChanged("windDirection");
                }
            }
        }
        private Nullable<short> _windDirection;
    
        [DataMember]
        public Nullable<int> windSpeed
        {
            get { return _windSpeed; }
            set
            {
                if (_windSpeed != value)
                {
                    _windSpeed = value;
                    OnPropertyChanged("windSpeed");
                }
            }
        }
        private Nullable<int> _windSpeed;
    
        [DataMember]
        public Nullable<short> currentDirectionSrf
        {
            get { return _currentDirectionSrf; }
            set
            {
                if (_currentDirectionSrf != value)
                {
                    _currentDirectionSrf = value;
                    OnPropertyChanged("currentDirectionSrf");
                }
            }
        }
        private Nullable<short> _currentDirectionSrf;
    
        [DataMember]
        public Nullable<decimal> currentSpeedSrf
        {
            get { return _currentSpeedSrf; }
            set
            {
                if (_currentSpeedSrf != value)
                {
                    _currentSpeedSrf = value;
                    OnPropertyChanged("currentSpeedSrf");
                }
            }
        }
        private Nullable<decimal> _currentSpeedSrf;
    
        [DataMember]
        public Nullable<short> currentDirectionBot
        {
            get { return _currentDirectionBot; }
            set
            {
                if (_currentDirectionBot != value)
                {
                    _currentDirectionBot = value;
                    OnPropertyChanged("currentDirectionBot");
                }
            }
        }
        private Nullable<short> _currentDirectionBot;
    
        [DataMember]
        public Nullable<decimal> currentSpeedBot
        {
            get { return _currentSpeedBot; }
            set
            {
                if (_currentSpeedBot != value)
                {
                    _currentSpeedBot = value;
                    OnPropertyChanged("currentSpeedBot");
                }
            }
        }
        private Nullable<decimal> _currentSpeedBot;
    
        [DataMember]
        public Nullable<short> waveDirection
        {
            get { return _waveDirection; }
            set
            {
                if (_waveDirection != value)
                {
                    _waveDirection = value;
                    OnPropertyChanged("waveDirection");
                }
            }
        }
        private Nullable<short> _waveDirection;
    
        [DataMember]
        public Nullable<decimal> waveHeigth
        {
            get { return _waveHeigth; }
            set
            {
                if (_waveHeigth != value)
                {
                    _waveHeigth = value;
                    OnPropertyChanged("waveHeigth");
                }
            }
        }
        private Nullable<decimal> _waveHeigth;
    
        [DataMember]
        public Nullable<int> startlog
        {
            get { return _startlog; }
            set
            {
                if (_startlog != value)
                {
                    _startlog = value;
                    OnPropertyChanged("startlog");
                }
            }
        }
        private Nullable<int> _startlog;
    
        [DataMember]
        public Nullable<int> endlog
        {
            get { return _endlog; }
            set
            {
                if (_endlog != value)
                {
                    _endlog = value;
                    OnPropertyChanged("endlog");
                }
            }
        }
        private Nullable<int> _endlog;
    
        [DataMember]
        public Nullable<int> datahandlerId
        {
            get { return _datahandlerId; }
            set
            {
                if (_datahandlerId != value)
                {
                    _datahandlerId = value;
                    OnPropertyChanged("datahandlerId");
                }
            }
        }
        private Nullable<int> _datahandlerId;
    
        [DataMember]
        public string gearQuality
        {
            get { return _gearQuality; }
            set
            {
                if (_gearQuality != value)
                {
                    _gearQuality = value;
                    OnPropertyChanged("gearQuality");
                }
            }
        }
        private string _gearQuality;
    
        [DataMember]
        public Nullable<int> numNets
        {
            get { return _numNets; }
            set
            {
                if (_numNets != value)
                {
                    _numNets = value;
                    OnPropertyChanged("numNets");
                }
            }
        }
        private Nullable<int> _numNets;
    
        [DataMember]
        public Nullable<int> lostNets
        {
            get { return _lostNets; }
            set
            {
                if (_lostNets != value)
                {
                    _lostNets = value;
                    OnPropertyChanged("lostNets");
                }
            }
        }
        private Nullable<int> _lostNets;
    
        [DataMember]
        public Nullable<int> tidTamp
        {
            get { return _tidTamp; }
            set
            {
                if (_tidTamp != value)
                {
                    _tidTamp = value;
                    OnPropertyChanged("tidTamp");
                }
            }
        }
        private Nullable<int> _tidTamp;
    
        [DataMember]
        public string flyerTrack
        {
            get { return _flyerTrack; }
            set
            {
                if (_flyerTrack != value)
                {
                    _flyerTrack = value;
                    OnPropertyChanged("flyerTrack");
                }
            }
        }
        private string _flyerTrack;
    
        [DataMember]
        public string released
        {
            get { return _released; }
            set
            {
                if (_released != value)
                {
                    _released = value;
                    OnPropertyChanged("released");
                }
            }
        }
        private string _released;
    
        [DataMember]
        public string sampleTaken
        {
            get { return _sampleTaken; }
            set
            {
                if (_sampleTaken != value)
                {
                    _sampleTaken = value;
                    OnPropertyChanged("sampleTaken");
                }
            }
        }
        private string _sampleTaken;
    
        [DataMember]
        public string constantFish
        {
            get { return _constantFish; }
            set
            {
                if (_constantFish != value)
                {
                    _constantFish = value;
                    OnPropertyChanged("constantFish");
                }
            }
        }
        private string _constantFish;
    
        [DataMember]
        public Nullable<decimal> haulSpeedMean
        {
            get { return _haulSpeedMean; }
            set
            {
                if (_haulSpeedMean != value)
                {
                    _haulSpeedMean = value;
                    OnPropertyChanged("haulSpeedMean");
                }
            }
        }
        private Nullable<decimal> _haulSpeedMean;
    
        [DataMember]
        public Nullable<short> haulDirection
        {
            get { return _haulDirection; }
            set
            {
                if (_haulDirection != value)
                {
                    _haulDirection = value;
                    OnPropertyChanged("haulDirection");
                }
            }
        }
        private Nullable<short> _haulDirection;
    
        [DataMember]
        public Nullable<decimal> haulSpeedBot
        {
            get { return _haulSpeedBot; }
            set
            {
                if (_haulSpeedBot != value)
                {
                    _haulSpeedBot = value;
                    OnPropertyChanged("haulSpeedBot");
                }
            }
        }
        private Nullable<decimal> _haulSpeedBot;
    
        [DataMember]
        public Nullable<decimal> haulSpeedWat
        {
            get { return _haulSpeedWat; }
            set
            {
                if (_haulSpeedWat != value)
                {
                    _haulSpeedWat = value;
                    OnPropertyChanged("haulSpeedWat");
                }
            }
        }
        private Nullable<decimal> _haulSpeedWat;
    
        [DataMember]
        public Nullable<int> wireLength
        {
            get { return _wireLength; }
            set
            {
                if (_wireLength != value)
                {
                    _wireLength = value;
                    OnPropertyChanged("wireLength");
                }
            }
        }
        private Nullable<int> _wireLength;
    
        [DataMember]
        public Nullable<decimal> wingSpread
        {
            get { return _wingSpread; }
            set
            {
                if (_wingSpread != value)
                {
                    _wingSpread = value;
                    OnPropertyChanged("wingSpread");
                }
            }
        }
        private Nullable<decimal> _wingSpread;
    
        [DataMember]
        public Nullable<int> numSamples
        {
            get { return _numSamples; }
            set
            {
                if (_numSamples != value)
                {
                    _numSamples = value;
                    OnPropertyChanged("numSamples");
                }
            }
        }
        private Nullable<int> _numSamples;
    
        [DataMember]
        public Nullable<int> courseTrack
        {
            get { return _courseTrack; }
            set
            {
                if (_courseTrack != value)
                {
                    _courseTrack = value;
                    OnPropertyChanged("courseTrack");
                }
            }
        }
        private Nullable<int> _courseTrack;
    
        [DataMember]
        public Nullable<decimal> shovelDist
        {
            get { return _shovelDist; }
            set
            {
                if (_shovelDist != value)
                {
                    _shovelDist = value;
                    OnPropertyChanged("shovelDist");
                }
            }
        }
        private Nullable<decimal> _shovelDist;
    
        [DataMember]
        public Nullable<decimal> depthAveGear
        {
            get { return _depthAveGear; }
            set
            {
                if (_depthAveGear != value)
                {
                    _depthAveGear = value;
                    OnPropertyChanged("depthAveGear");
                }
            }
        }
        private Nullable<decimal> _depthAveGear;
    
        [DataMember]
        public Nullable<decimal> netOpening
        {
            get { return _netOpening; }
            set
            {
                if (_netOpening != value)
                {
                    _netOpening = value;
                    OnPropertyChanged("netOpening");
                }
            }
        }
        private Nullable<decimal> _netOpening;
    
        [DataMember]
        public Nullable<int> depthAbove
        {
            get { return _depthAbove; }
            set
            {
                if (_depthAbove != value)
                {
                    _depthAbove = value;
                    OnPropertyChanged("depthAbove");
                }
            }
        }
        private Nullable<int> _depthAbove;
    
        [DataMember]
        public Nullable<decimal> landing
        {
            get { return _landing; }
            set
            {
                if (_landing != value)
                {
                    _landing = value;
                    OnPropertyChanged("landing");
                }
            }
        }
        private Nullable<decimal> _landing;
    
        [DataMember]
        public Nullable<int> maskWidth
        {
            get { return _maskWidth; }
            set
            {
                if (_maskWidth != value)
                {
                    _maskWidth = value;
                    OnPropertyChanged("maskWidth");
                }
            }
        }
        private Nullable<int> _maskWidth;
    
        [DataMember]
        public string externalJournalNum
        {
            get { return _externalJournalNum; }
            set
            {
                if (_externalJournalNum != value)
                {
                    _externalJournalNum = value;
                    OnPropertyChanged("externalJournalNum");
                }
            }
        }
        private string _externalJournalNum;
    
        [DataMember]
        public Nullable<int> samplePersonId
        {
            get { return _samplePersonId; }
            set
            {
                if (_samplePersonId != value)
                {
                    ChangeTracker.RecordOriginalValue("samplePersonId", _samplePersonId);
                    if (!IsDeserializing)
                    {
                        if (DFUPerson != null && DFUPerson.dfuPersonId != value)
                        {
                            DFUPerson = null;
                        }
                    }
                    _samplePersonId = value;
                    OnPropertyChanged("samplePersonId");
                }
            }
        }
        private Nullable<int> _samplePersonId;
    
        [DataMember]
        public Nullable<decimal> arrivalWeight
        {
            get { return _arrivalWeight; }
            set
            {
                if (_arrivalWeight != value)
                {
                    _arrivalWeight = value;
                    OnPropertyChanged("arrivalWeight");
                }
            }
        }
        private Nullable<decimal> _arrivalWeight;
    
        [DataMember]
        public Nullable<int> analysisPersonId
        {
            get { return _analysisPersonId; }
            set
            {
                if (_analysisPersonId != value)
                {
                    ChangeTracker.RecordOriginalValue("analysisPersonId", _analysisPersonId);
                    if (!IsDeserializing)
                    {
                        if (DFUPerson1 != null && DFUPerson1.dfuPersonId != value)
                        {
                            DFUPerson1 = null;
                        }
                    }
                    _analysisPersonId = value;
                    OnPropertyChanged("analysisPersonId");
                }
            }
        }
        private Nullable<int> _analysisPersonId;
    
        [DataMember]
        public Nullable<System.DateTime> deadline
        {
            get { return _deadline; }
            set
            {
                if (_deadline != value)
                {
                    _deadline = value;
                    OnPropertyChanged("deadline");
                }
            }
        }
        private Nullable<System.DateTime> _deadline;
    
        [DataMember]
        public string sampleStatus
        {
            get { return _sampleStatus; }
            set
            {
                if (_sampleStatus != value)
                {
                    ChangeTracker.RecordOriginalValue("sampleStatus", _sampleStatus);
                    if (!IsDeserializing)
                    {
                        if (L_SampleStatus != null && L_SampleStatus.sampleStatus != value)
                        {
                            L_SampleStatus = null;
                        }
                    }
                    _sampleStatus = value;
                    OnPropertyChanged("sampleStatus");
                }
            }
        }
        private string _sampleStatus;
    
        [DataMember]
        public Nullable<decimal> robLength
        {
            get { return _robLength; }
            set
            {
                if (_robLength != value)
                {
                    _robLength = value;
                    OnPropertyChanged("robLength");
                }
            }
        }
        private Nullable<decimal> _robLength;
    
        [DataMember]
        public string hydroStnRef
        {
            get { return _hydroStnRef; }
            set
            {
                if (_hydroStnRef != value)
                {
                    _hydroStnRef = value;
                    OnPropertyChanged("hydroStnRef");
                }
            }
        }
        private string _hydroStnRef;
    
        [DataMember]
        public string remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public string labJournalNum
        {
            get { return _labJournalNum; }
            set
            {
                if (_labJournalNum != value)
                {
                    _labJournalNum = value;
                    OnPropertyChanged("labJournalNum");
                }
            }
        }
        private string _labJournalNum;
    
        [DataMember]
        public string gearType
        {
            get { return _gearType; }
            set
            {
                if (_gearType != value)
                {
                    ChangeTracker.RecordOriginalValue("gearType", _gearType);
                    if (!IsDeserializing)
                    {
                        if (L_GearType1 != null && L_GearType1.gearType != value)
                        {
                            L_GearType1 = null;
                        }
                    }
                    _gearType = value;
                    OnPropertyChanged("gearType");
                }
            }
        }
        private string _gearType;
    
        [DataMember]
        public string selectionDevice
        {
            get { return _selectionDevice; }
            set
            {
                if (_selectionDevice != value)
                {
                    ChangeTracker.RecordOriginalValue("selectionDevice", _selectionDevice);
                    if (!IsDeserializing)
                    {
                        if (L_SelectionDevice != null && L_SelectionDevice.selectionDevice != value)
                        {
                            L_SelectionDevice = null;
                        }
                    }
                    _selectionDevice = value;
                    OnPropertyChanged("selectionDevice");
                }
            }
        }
        private string _selectionDevice;
    
        [DataMember]
        public Nullable<int> selectionDeviceSourceId
        {
            get { return _selectionDeviceSourceId; }
            set
            {
                if (_selectionDeviceSourceId != value)
                {
                    ChangeTracker.RecordOriginalValue("selectionDeviceSourceId", _selectionDeviceSourceId);
                    if (!IsDeserializing)
                    {
                        if (L_SelectionDeviceSource != null && L_SelectionDeviceSource.L_selectionDeviceSourceId != value)
                        {
                            L_SelectionDeviceSource = null;
                        }
                    }
                    _selectionDeviceSourceId = value;
                    OnPropertyChanged("selectionDeviceSourceId");
                }
            }
        }
        private Nullable<int> _selectionDeviceSourceId;
    
        [DataMember]
        public Nullable<decimal> meshSize
        {
            get { return _meshSize; }
            set
            {
                if (_meshSize != value)
                {
                    _meshSize = value;
                    OnPropertyChanged("meshSize");
                }
            }
        }
        private Nullable<decimal> _meshSize;
    
        [DataMember]
        public Nullable<int> numberTrawls
        {
            get { return _numberTrawls; }
            set
            {
                if (_numberTrawls != value)
                {
                    _numberTrawls = value;
                    OnPropertyChanged("numberTrawls");
                }
            }
        }
        private Nullable<int> _numberTrawls;
    
        [DataMember]
        public Nullable<decimal> heightNets
        {
            get { return _heightNets; }
            set
            {
                if (_heightNets != value)
                {
                    _heightNets = value;
                    OnPropertyChanged("heightNets");
                }
            }
        }
        private Nullable<decimal> _heightNets;
    
        [DataMember]
        public Nullable<decimal> lengthNets
        {
            get { return _lengthNets; }
            set
            {
                if (_lengthNets != value)
                {
                    _lengthNets = value;
                    OnPropertyChanged("lengthNets");
                }
            }
        }
        private Nullable<decimal> _lengthNets;
    
        [DataMember]
        public Nullable<decimal> lengthRopeFlyer
        {
            get { return _lengthRopeFlyer; }
            set
            {
                if (_lengthRopeFlyer != value)
                {
                    _lengthRopeFlyer = value;
                    OnPropertyChanged("lengthRopeFlyer");
                }
            }
        }
        private Nullable<decimal> _lengthRopeFlyer;
    
        [DataMember]
        public Nullable<int> numberHooks
        {
            get { return _numberHooks; }
            set
            {
                if (_numberHooks != value)
                {
                    _numberHooks = value;
                    OnPropertyChanged("numberHooks");
                }
            }
        }
        private Nullable<int> _numberHooks;
    
        [DataMember]
        public string gearRemark
        {
            get { return _gearRemark; }
            set
            {
                if (_gearRemark != value)
                {
                    _gearRemark = value;
                    OnPropertyChanged("gearRemark");
                }
            }
        }
        private string _gearRemark;
    
        [DataMember]
        public Nullable<decimal> widthRopeFlyer
        {
            get { return _widthRopeFlyer; }
            set
            {
                if (_widthRopeFlyer != value)
                {
                    _widthRopeFlyer = value;
                    OnPropertyChanged("widthRopeFlyer");
                }
            }
        }
        private Nullable<decimal> _widthRopeFlyer;
    
        [DataMember]
        public Nullable<decimal> lengthBeam
        {
            get { return _lengthBeam; }
            set
            {
                if (_lengthBeam != value)
                {
                    _lengthBeam = value;
                    OnPropertyChanged("lengthBeam");
                }
            }
        }
        private Nullable<decimal> _lengthBeam;
    
        [DataMember]
        public string haulType
        {
            get { return _haulType; }
            set
            {
                if (_haulType != value)
                {
                    ChangeTracker.RecordOriginalValue("haulType", _haulType);
                    if (!IsDeserializing)
                    {
                        if (L_HaulType != null && L_HaulType.haulType != value)
                        {
                            L_HaulType = null;
                        }
                    }
                    _haulType = value;
                    OnPropertyChanged("haulType");
                }
            }
        }
        private string _haulType;
    
        [DataMember]
        public string thermoCline
        {
            get { return _thermoCline; }
            set
            {
                if (_thermoCline != value)
                {
                    ChangeTracker.RecordOriginalValue("thermoCline", _thermoCline);
                    if (!IsDeserializing)
                    {
                        if (L_ThermoCline != null && L_ThermoCline.thermoCline != value)
                        {
                            L_ThermoCline = null;
                        }
                    }
                    _thermoCline = value;
                    OnPropertyChanged("thermoCline");
                }
            }
        }
        private string _thermoCline;
    
        [DataMember]
        public Nullable<decimal> temperatureSrf
        {
            get { return _temperatureSrf; }
            set
            {
                if (_temperatureSrf != value)
                {
                    _temperatureSrf = value;
                    OnPropertyChanged("temperatureSrf");
                }
            }
        }
        private Nullable<decimal> _temperatureSrf;
    
        [DataMember]
        public Nullable<decimal> temperatureBot
        {
            get { return _temperatureBot; }
            set
            {
                if (_temperatureBot != value)
                {
                    _temperatureBot = value;
                    OnPropertyChanged("temperatureBot");
                }
            }
        }
        private Nullable<decimal> _temperatureBot;
    
        [DataMember]
        public Nullable<decimal> oxygenSrf
        {
            get { return _oxygenSrf; }
            set
            {
                if (_oxygenSrf != value)
                {
                    _oxygenSrf = value;
                    OnPropertyChanged("oxygenSrf");
                }
            }
        }
        private Nullable<decimal> _oxygenSrf;
    
        [DataMember]
        public Nullable<decimal> oxygenBot
        {
            get { return _oxygenBot; }
            set
            {
                if (_oxygenBot != value)
                {
                    _oxygenBot = value;
                    OnPropertyChanged("oxygenBot");
                }
            }
        }
        private Nullable<decimal> _oxygenBot;
    
        [DataMember]
        public Nullable<decimal> thermoClineDepth
        {
            get { return _thermoClineDepth; }
            set
            {
                if (_thermoClineDepth != value)
                {
                    _thermoClineDepth = value;
                    OnPropertyChanged("thermoClineDepth");
                }
            }
        }
        private Nullable<decimal> _thermoClineDepth;
    
        [DataMember]
        public Nullable<decimal> salinitySrf
        {
            get { return _salinitySrf; }
            set
            {
                if (_salinitySrf != value)
                {
                    _salinitySrf = value;
                    OnPropertyChanged("salinitySrf");
                }
            }
        }
        private Nullable<decimal> _salinitySrf;
    
        [DataMember]
        public Nullable<decimal> salinityBot
        {
            get { return _salinityBot; }
            set
            {
                if (_salinityBot != value)
                {
                    _salinityBot = value;
                    OnPropertyChanged("salinityBot");
                }
            }
        }
        private Nullable<decimal> _salinityBot;
    
        [DataMember]
        public Nullable<decimal> totalWeight
        {
            get { return _totalWeight; }
            set
            {
                if (_totalWeight != value)
                {
                    _totalWeight = value;
                    OnPropertyChanged("totalWeight");
                }
            }
        }
        private Nullable<decimal> _totalWeight;
    
        [DataMember]
        public string weightEstimationMethod
        {
            get { return _weightEstimationMethod; }
            set
            {
                if (_weightEstimationMethod != value)
                {
                    ChangeTracker.RecordOriginalValue("weightEstimationMethod", _weightEstimationMethod);
                    if (!IsDeserializing)
                    {
                        if (L_WeightEstimationMethod != null && L_WeightEstimationMethod.weightEstimationMethod != value)
                        {
                            L_WeightEstimationMethod = null;
                        }
                    }
                    _weightEstimationMethod = value;
                    OnPropertyChanged("weightEstimationMethod");
                }
            }
        }
        private string _weightEstimationMethod;
    
        [DataMember]
        public string sgId
        {
            get { return _sgId; }
            set
            {
                if (_sgId != value)
                {
                    _sgId = value;
                    OnPropertyChanged("sgId");
                }
            }
        }
        private string _sgId;
    
        [DataMember]
        public string weekdayWeekend
        {
            get { return _weekdayWeekend; }
            set
            {
                if (_weekdayWeekend != value)
                {
                    _weekdayWeekend = value;
                    OnPropertyChanged("weekdayWeekend");
                }
            }
        }
        private string _weekdayWeekend;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public DFUPerson DFUPerson
        {
            get { return _dFUPerson; }
            set
            {
                if (!ReferenceEquals(_dFUPerson, value))
                {
                    var previousValue = _dFUPerson;
                    _dFUPerson = value;
                    FixupDFUPerson(previousValue);
                    OnNavigationPropertyChanged("DFUPerson");
                }
            }
        }
        private DFUPerson _dFUPerson;
    
        [DataMember]
        public DFUPerson DFUPerson1
        {
            get { return _dFUPerson1; }
            set
            {
                if (!ReferenceEquals(_dFUPerson1, value))
                {
                    var previousValue = _dFUPerson1;
                    _dFUPerson1 = value;
                    FixupDFUPerson1(previousValue);
                    OnNavigationPropertyChanged("DFUPerson1");
                }
            }
        }
        private DFUPerson _dFUPerson1;
    
        [DataMember]
        public TrackableCollection<Est_Strata> Est_Strata
        {
            get
            {
                if (_est_Strata == null)
                {
                    _est_Strata = new TrackableCollection<Est_Strata>();
                    _est_Strata.CollectionChanged += FixupEst_Strata;
                }
                return _est_Strata;
            }
            set
            {
                if (!ReferenceEquals(_est_Strata, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_est_Strata != null)
                    {
                        _est_Strata.CollectionChanged -= FixupEst_Strata;
                    }
                    _est_Strata = value;
                    if (_est_Strata != null)
                    {
                        _est_Strata.CollectionChanged += FixupEst_Strata;
                    }
                    OnNavigationPropertyChanged("Est_Strata");
                }
            }
        }
        private TrackableCollection<Est_Strata> _est_Strata;
    
        [DataMember]
        public L_CatchRegistration L_CatchRegistration
        {
            get { return _l_CatchRegistration; }
            set
            {
                if (!ReferenceEquals(_l_CatchRegistration, value))
                {
                    var previousValue = _l_CatchRegistration;
                    _l_CatchRegistration = value;
                    FixupL_CatchRegistration(previousValue);
                    OnNavigationPropertyChanged("L_CatchRegistration");
                }
            }
        }
        private L_CatchRegistration _l_CatchRegistration;
    
        [DataMember]
        public L_DFUArea L_DFUArea
        {
            get { return _l_DFUArea; }
            set
            {
                if (!ReferenceEquals(_l_DFUArea, value))
                {
                    var previousValue = _l_DFUArea;
                    _l_DFUArea = value;
                    FixupL_DFUArea(previousValue);
                    OnNavigationPropertyChanged("L_DFUArea");
                }
            }
        }
        private L_DFUArea _l_DFUArea;
    
        [DataMember]
        public L_FishingActivityCategory L_FishingActivityCategory
        {
            get { return _l_FishingActivityCategory; }
            set
            {
                if (!ReferenceEquals(_l_FishingActivityCategory, value))
                {
                    var previousValue = _l_FishingActivityCategory;
                    _l_FishingActivityCategory = value;
                    FixupL_FishingActivityCategory(previousValue);
                    OnNavigationPropertyChanged("L_FishingActivityCategory");
                }
            }
        }
        private L_FishingActivityCategory _l_FishingActivityCategory;
    
        [DataMember]
        public L_Gear L_Gear
        {
            get { return _l_Gear; }
            set
            {
                if (!ReferenceEquals(_l_Gear, value))
                {
                    var previousValue = _l_Gear;
                    _l_Gear = value;
                    FixupL_Gear(previousValue);
                    OnNavigationPropertyChanged("L_Gear");
                }
            }
        }
        private L_Gear _l_Gear;
    
        [DataMember]
        public L_GearType L_GearType
        {
            get { return _l_GearType; }
            set
            {
                if (!ReferenceEquals(_l_GearType, value))
                {
                    var previousValue = _l_GearType;
                    _l_GearType = value;
                    FixupL_GearType(previousValue);
                    OnNavigationPropertyChanged("L_GearType");
                }
            }
        }
        private L_GearType _l_GearType;
    
        [DataMember]
        public L_SampleStatus L_SampleStatus
        {
            get { return _l_SampleStatus; }
            set
            {
                if (!ReferenceEquals(_l_SampleStatus, value))
                {
                    var previousValue = _l_SampleStatus;
                    _l_SampleStatus = value;
                    FixupL_SampleStatus(previousValue);
                    OnNavigationPropertyChanged("L_SampleStatus");
                }
            }
        }
        private L_SampleStatus _l_SampleStatus;
    
        [DataMember]
        public L_SpeciesRegistration L_SpeciesRegistration
        {
            get { return _l_SpeciesRegistration; }
            set
            {
                if (!ReferenceEquals(_l_SpeciesRegistration, value))
                {
                    var previousValue = _l_SpeciesRegistration;
                    _l_SpeciesRegistration = value;
                    FixupL_SpeciesRegistration(previousValue);
                    OnNavigationPropertyChanged("L_SpeciesRegistration");
                }
            }
        }
        private L_SpeciesRegistration _l_SpeciesRegistration;
    
        [DataMember]
        public L_StatisticalRectangle L_StatisticalRectangle
        {
            get { return _l_StatisticalRectangle; }
            set
            {
                if (!ReferenceEquals(_l_StatisticalRectangle, value))
                {
                    var previousValue = _l_StatisticalRectangle;
                    _l_StatisticalRectangle = value;
                    FixupL_StatisticalRectangle(previousValue);
                    OnNavigationPropertyChanged("L_StatisticalRectangle");
                }
            }
        }
        private L_StatisticalRectangle _l_StatisticalRectangle;
    
        [DataMember]
        public TrackableCollection<R_SampleUsabilityParam> R_SampleUsabilityParam
        {
            get
            {
                if (_r_SampleUsabilityParam == null)
                {
                    _r_SampleUsabilityParam = new TrackableCollection<R_SampleUsabilityParam>();
                    _r_SampleUsabilityParam.CollectionChanged += FixupR_SampleUsabilityParam;
                }
                return _r_SampleUsabilityParam;
            }
            set
            {
                if (!ReferenceEquals(_r_SampleUsabilityParam, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_r_SampleUsabilityParam != null)
                    {
                        _r_SampleUsabilityParam.CollectionChanged -= FixupR_SampleUsabilityParam;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (R_SampleUsabilityParam item in _r_SampleUsabilityParam)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _r_SampleUsabilityParam = value;
                    if (_r_SampleUsabilityParam != null)
                    {
                        _r_SampleUsabilityParam.CollectionChanged += FixupR_SampleUsabilityParam;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (R_SampleUsabilityParam item in _r_SampleUsabilityParam)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("R_SampleUsabilityParam");
                }
            }
        }
        private TrackableCollection<R_SampleUsabilityParam> _r_SampleUsabilityParam;
    
        [DataMember]
        public TrackableCollection<R_TargetSpecies> R_TargetSpecies
        {
            get
            {
                if (_r_TargetSpecies == null)
                {
                    _r_TargetSpecies = new TrackableCollection<R_TargetSpecies>();
                    _r_TargetSpecies.CollectionChanged += FixupR_TargetSpecies;
                }
                return _r_TargetSpecies;
            }
            set
            {
                if (!ReferenceEquals(_r_TargetSpecies, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_r_TargetSpecies != null)
                    {
                        _r_TargetSpecies.CollectionChanged -= FixupR_TargetSpecies;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (R_TargetSpecies item in _r_TargetSpecies)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _r_TargetSpecies = value;
                    if (_r_TargetSpecies != null)
                    {
                        _r_TargetSpecies.CollectionChanged += FixupR_TargetSpecies;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (R_TargetSpecies item in _r_TargetSpecies)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("R_TargetSpecies");
                }
            }
        }
        private TrackableCollection<R_TargetSpecies> _r_TargetSpecies;
    
        [DataMember]
        public Trip Trip
        {
            get { return _trip; }
            set
            {
                if (!ReferenceEquals(_trip, value))
                {
                    var previousValue = _trip;
                    _trip = value;
                    FixupTrip(previousValue);
                    OnNavigationPropertyChanged("Trip");
                }
            }
        }
        private Trip _trip;
    
        [DataMember]
        public TrackableCollection<SpeciesList> SpeciesList
        {
            get
            {
                if (_speciesList == null)
                {
                    _speciesList = new TrackableCollection<SpeciesList>();
                    _speciesList.CollectionChanged += FixupSpeciesList;
                }
                return _speciesList;
            }
            set
            {
                if (!ReferenceEquals(_speciesList, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_speciesList != null)
                    {
                        _speciesList.CollectionChanged -= FixupSpeciesList;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (SpeciesList item in _speciesList)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _speciesList = value;
                    if (_speciesList != null)
                    {
                        _speciesList.CollectionChanged += FixupSpeciesList;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (SpeciesList item in _speciesList)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("SpeciesList");
                }
            }
        }
        private TrackableCollection<SpeciesList> _speciesList;
    
        [DataMember]
        public TrackableCollection<TrawlOperation> TrawlOperation
        {
            get
            {
                if (_trawlOperation == null)
                {
                    _trawlOperation = new TrackableCollection<TrawlOperation>();
                    _trawlOperation.CollectionChanged += FixupTrawlOperation;
                }
                return _trawlOperation;
            }
            set
            {
                if (!ReferenceEquals(_trawlOperation, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_trawlOperation != null)
                    {
                        _trawlOperation.CollectionChanged -= FixupTrawlOperation;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TrawlOperation item in _trawlOperation)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _trawlOperation = value;
                    if (_trawlOperation != null)
                    {
                        _trawlOperation.CollectionChanged += FixupTrawlOperation;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TrawlOperation item in _trawlOperation)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TrawlOperation");
                }
            }
        }
        private TrackableCollection<TrawlOperation> _trawlOperation;
    
        [DataMember]
        public L_GearType L_GearType1
        {
            get { return _l_GearType1; }
            set
            {
                if (!ReferenceEquals(_l_GearType1, value))
                {
                    var previousValue = _l_GearType1;
                    _l_GearType1 = value;
                    FixupL_GearType1(previousValue);
                    OnNavigationPropertyChanged("L_GearType1");
                }
            }
        }
        private L_GearType _l_GearType1;
    
        [DataMember]
        public L_SelectionDevice L_SelectionDevice
        {
            get { return _l_SelectionDevice; }
            set
            {
                if (!ReferenceEquals(_l_SelectionDevice, value))
                {
                    var previousValue = _l_SelectionDevice;
                    _l_SelectionDevice = value;
                    FixupL_SelectionDevice(previousValue);
                    OnNavigationPropertyChanged("L_SelectionDevice");
                }
            }
        }
        private L_SelectionDevice _l_SelectionDevice;
    
        [DataMember]
        public L_HaulType L_HaulType
        {
            get { return _l_HaulType; }
            set
            {
                if (!ReferenceEquals(_l_HaulType, value))
                {
                    var previousValue = _l_HaulType;
                    _l_HaulType = value;
                    FixupL_HaulType(previousValue);
                    OnNavigationPropertyChanged("L_HaulType");
                }
            }
        }
        private L_HaulType _l_HaulType;
    
        [DataMember]
        public L_ThermoCline L_ThermoCline
        {
            get { return _l_ThermoCline; }
            set
            {
                if (!ReferenceEquals(_l_ThermoCline, value))
                {
                    var previousValue = _l_ThermoCline;
                    _l_ThermoCline = value;
                    FixupL_ThermoCline(previousValue);
                    OnNavigationPropertyChanged("L_ThermoCline");
                }
            }
        }
        private L_ThermoCline _l_ThermoCline;
    
        [DataMember]
        public L_TimeZone L_TimeZone
        {
            get { return _l_TimeZone; }
            set
            {
                if (!ReferenceEquals(_l_TimeZone, value))
                {
                    var previousValue = _l_TimeZone;
                    _l_TimeZone = value;
                    FixupL_TimeZone(previousValue);
                    OnNavigationPropertyChanged("L_TimeZone");
                }
            }
        }
        private L_TimeZone _l_TimeZone;
    
        [DataMember]
        public L_WeightEstimationMethod L_WeightEstimationMethod
        {
            get { return _l_WeightEstimationMethod; }
            set
            {
                if (!ReferenceEquals(_l_WeightEstimationMethod, value))
                {
                    var previousValue = _l_WeightEstimationMethod;
                    _l_WeightEstimationMethod = value;
                    FixupL_WeightEstimationMethod(previousValue);
                    OnNavigationPropertyChanged("L_WeightEstimationMethod");
                }
            }
        }
        private L_WeightEstimationMethod _l_WeightEstimationMethod;
    
        [DataMember]
        public L_SelectionDeviceSource L_SelectionDeviceSource
        {
            get { return _l_SelectionDeviceSource; }
            set
            {
                if (!ReferenceEquals(_l_SelectionDeviceSource, value))
                {
                    var previousValue = _l_SelectionDeviceSource;
                    _l_SelectionDeviceSource = value;
                    FixupL_SelectionDeviceSource(previousValue);
                    OnNavigationPropertyChanged("L_SelectionDeviceSource");
                }
            }
        }
        private L_SelectionDeviceSource _l_SelectionDeviceSource;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DFUPerson = null;
            DFUPerson1 = null;
            Est_Strata.Clear();
            L_CatchRegistration = null;
            L_DFUArea = null;
            L_FishingActivityCategory = null;
            L_Gear = null;
            L_GearType = null;
            L_SampleStatus = null;
            L_SpeciesRegistration = null;
            L_StatisticalRectangle = null;
            R_SampleUsabilityParam.Clear();
            R_TargetSpecies.Clear();
            Trip = null;
            SpeciesList.Clear();
            TrawlOperation.Clear();
            L_GearType1 = null;
            L_SelectionDevice = null;
            L_HaulType = null;
            L_ThermoCline = null;
            L_TimeZone = null;
            L_WeightEstimationMethod = null;
            L_SelectionDeviceSource = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupDFUPerson(DFUPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Sample.Contains(this))
            {
                previousValue.Sample.Remove(this);
            }
    
            if (DFUPerson != null)
            {
                if (!DFUPerson.Sample.Contains(this))
                {
                    DFUPerson.Sample.Add(this);
                }
    
                samplePersonId = DFUPerson.dfuPersonId;
            }
            else if (!skipKeys)
            {
                samplePersonId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DFUPerson")
                    && (ChangeTracker.OriginalValues["DFUPerson"] == DFUPerson))
                {
                    ChangeTracker.OriginalValues.Remove("DFUPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DFUPerson", previousValue);
                }
                if (DFUPerson != null && !DFUPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    DFUPerson.StartTracking();
                }
            }
        }
    
        private void FixupDFUPerson1(DFUPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Sample1.Contains(this))
            {
                previousValue.Sample1.Remove(this);
            }
    
            if (DFUPerson1 != null)
            {
                if (!DFUPerson1.Sample1.Contains(this))
                {
                    DFUPerson1.Sample1.Add(this);
                }
    
                analysisPersonId = DFUPerson1.dfuPersonId;
            }
            else if (!skipKeys)
            {
                analysisPersonId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DFUPerson1")
                    && (ChangeTracker.OriginalValues["DFUPerson1"] == DFUPerson1))
                {
                    ChangeTracker.OriginalValues.Remove("DFUPerson1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DFUPerson1", previousValue);
                }
                if (DFUPerson1 != null && !DFUPerson1.ChangeTracker.ChangeTrackingEnabled)
                {
                    DFUPerson1.StartTracking();
                }
            }
        }
    
        private void FixupL_CatchRegistration(L_CatchRegistration previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Sample.Contains(this))
            {
                previousValue.Sample.Remove(this);
            }
    
            if (L_CatchRegistration != null)
            {
                if (!L_CatchRegistration.Sample.Contains(this))
                {
                    L_CatchRegistration.Sample.Add(this);
                }
    
                catchRegistrationId = L_CatchRegistration.catchRegistrationId;
            }
            else if (!skipKeys)
            {
                catchRegistrationId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_CatchRegistration")
                    && (ChangeTracker.OriginalValues["L_CatchRegistration"] == L_CatchRegistration))
                {
                    ChangeTracker.OriginalValues.Remove("L_CatchRegistration");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_CatchRegistration", previousValue);
                }
                if (L_CatchRegistration != null && !L_CatchRegistration.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_CatchRegistration.StartTracking();
                }
            }
        }
    
        private void FixupL_DFUArea(L_DFUArea previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Sample.Contains(this))
            {
                previousValue.Sample.Remove(this);
            }
    
            if (L_DFUArea != null)
            {
                if (!L_DFUArea.Sample.Contains(this))
                {
                    L_DFUArea.Sample.Add(this);
                }
    
                dfuArea = L_DFUArea.DFUArea;
            }
            else if (!skipKeys)
            {
                dfuArea = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_DFUArea")
                    && (ChangeTracker.OriginalValues["L_DFUArea"] == L_DFUArea))
                {
                    ChangeTracker.OriginalValues.Remove("L_DFUArea");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_DFUArea", previousValue);
                }
                if (L_DFUArea != null && !L_DFUArea.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_DFUArea.StartTracking();
                }
            }
        }
    
        private void FixupL_FishingActivityCategory(L_FishingActivityCategory previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Sample.Contains(this))
            {
                previousValue.Sample.Remove(this);
            }
    
            if (L_FishingActivityCategory != null)
            {
                if (!L_FishingActivityCategory.Sample.Contains(this))
                {
                    L_FishingActivityCategory.Sample.Add(this);
                }
    
                fishingActivityId = L_FishingActivityCategory.Id;
            }
            else if (!skipKeys)
            {
                fishingActivityId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_FishingActivityCategory")
                    && (ChangeTracker.OriginalValues["L_FishingActivityCategory"] == L_FishingActivityCategory))
                {
                    ChangeTracker.OriginalValues.Remove("L_FishingActivityCategory");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_FishingActivityCategory", previousValue);
                }
                if (L_FishingActivityCategory != null && !L_FishingActivityCategory.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_FishingActivityCategory.StartTracking();
                }
            }
        }
    
        private void FixupL_Gear(L_Gear previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Sample.Contains(this))
            {
                previousValue.Sample.Remove(this);
            }
    
            if (L_Gear != null)
            {
                if (!L_Gear.Sample.Contains(this))
                {
                    L_Gear.Sample.Add(this);
                }
    
                gearId = L_Gear.gearId;
            }
            else if (!skipKeys)
            {
                gearId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Gear")
                    && (ChangeTracker.OriginalValues["L_Gear"] == L_Gear))
                {
                    ChangeTracker.OriginalValues.Remove("L_Gear");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Gear", previousValue);
                }
                if (L_Gear != null && !L_Gear.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Gear.StartTracking();
                }
            }
        }
    
        private void FixupL_GearType(L_GearType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Sample.Contains(this))
            {
                previousValue.Sample.Remove(this);
            }
    
            if (L_GearType != null)
            {
                if (!L_GearType.Sample.Contains(this))
                {
                    L_GearType.Sample.Add(this);
                }
    
                HVN_geartype = L_GearType.gearType;
            }
            else if (!skipKeys)
            {
                HVN_geartype = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_GearType")
                    && (ChangeTracker.OriginalValues["L_GearType"] == L_GearType))
                {
                    ChangeTracker.OriginalValues.Remove("L_GearType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_GearType", previousValue);
                }
                if (L_GearType != null && !L_GearType.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_GearType.StartTracking();
                }
            }
        }
    
        private void FixupL_SampleStatus(L_SampleStatus previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Sample.Contains(this))
            {
                previousValue.Sample.Remove(this);
            }
    
            if (L_SampleStatus != null)
            {
                if (!L_SampleStatus.Sample.Contains(this))
                {
                    L_SampleStatus.Sample.Add(this);
                }
    
                sampleStatus = L_SampleStatus.sampleStatus;
            }
            else if (!skipKeys)
            {
                sampleStatus = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SampleStatus")
                    && (ChangeTracker.OriginalValues["L_SampleStatus"] == L_SampleStatus))
                {
                    ChangeTracker.OriginalValues.Remove("L_SampleStatus");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SampleStatus", previousValue);
                }
                if (L_SampleStatus != null && !L_SampleStatus.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SampleStatus.StartTracking();
                }
            }
        }
    
        private void FixupL_SpeciesRegistration(L_SpeciesRegistration previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Sample.Contains(this))
            {
                previousValue.Sample.Remove(this);
            }
    
            if (L_SpeciesRegistration != null)
            {
                if (!L_SpeciesRegistration.Sample.Contains(this))
                {
                    L_SpeciesRegistration.Sample.Add(this);
                }
    
                speciesRegistrationId = L_SpeciesRegistration.speciesRegistrationId;
            }
            else if (!skipKeys)
            {
                speciesRegistrationId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SpeciesRegistration")
                    && (ChangeTracker.OriginalValues["L_SpeciesRegistration"] == L_SpeciesRegistration))
                {
                    ChangeTracker.OriginalValues.Remove("L_SpeciesRegistration");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SpeciesRegistration", previousValue);
                }
                if (L_SpeciesRegistration != null && !L_SpeciesRegistration.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SpeciesRegistration.StartTracking();
                }
            }
        }
    
        private void FixupL_StatisticalRectangle(L_StatisticalRectangle previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Sample.Contains(this))
            {
                previousValue.Sample.Remove(this);
            }
    
            if (L_StatisticalRectangle != null)
            {
                if (!L_StatisticalRectangle.Sample.Contains(this))
                {
                    L_StatisticalRectangle.Sample.Add(this);
                }
    
                statisticalRectangle = L_StatisticalRectangle.statisticalRectangle;
            }
            else if (!skipKeys)
            {
                statisticalRectangle = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_StatisticalRectangle")
                    && (ChangeTracker.OriginalValues["L_StatisticalRectangle"] == L_StatisticalRectangle))
                {
                    ChangeTracker.OriginalValues.Remove("L_StatisticalRectangle");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_StatisticalRectangle", previousValue);
                }
                if (L_StatisticalRectangle != null && !L_StatisticalRectangle.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_StatisticalRectangle.StartTracking();
                }
            }
        }
    
        private void FixupTrip(Trip previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Sample.Contains(this))
            {
                previousValue.Sample.Remove(this);
            }
    
            if (Trip != null)
            {
                if (!Trip.Sample.Contains(this))
                {
                    Trip.Sample.Add(this);
                }
    
                tripId = Trip.tripId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Trip")
                    && (ChangeTracker.OriginalValues["Trip"] == Trip))
                {
                    ChangeTracker.OriginalValues.Remove("Trip");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Trip", previousValue);
                }
                if (Trip != null && !Trip.ChangeTracker.ChangeTrackingEnabled)
                {
                    Trip.StartTracking();
                }
            }
        }
    
        private void FixupL_GearType1(L_GearType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Sample1.Contains(this))
            {
                previousValue.Sample1.Remove(this);
            }
    
            if (L_GearType1 != null)
            {
                if (!L_GearType1.Sample1.Contains(this))
                {
                    L_GearType1.Sample1.Add(this);
                }
    
                gearType = L_GearType1.gearType;
            }
            else if (!skipKeys)
            {
                gearType = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_GearType1")
                    && (ChangeTracker.OriginalValues["L_GearType1"] == L_GearType1))
                {
                    ChangeTracker.OriginalValues.Remove("L_GearType1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_GearType1", previousValue);
                }
                if (L_GearType1 != null && !L_GearType1.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_GearType1.StartTracking();
                }
            }
        }
    
        private void FixupL_SelectionDevice(L_SelectionDevice previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Sample.Contains(this))
            {
                previousValue.Sample.Remove(this);
            }
    
            if (L_SelectionDevice != null)
            {
                if (!L_SelectionDevice.Sample.Contains(this))
                {
                    L_SelectionDevice.Sample.Add(this);
                }
    
                selectionDevice = L_SelectionDevice.selectionDevice;
            }
            else if (!skipKeys)
            {
                selectionDevice = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SelectionDevice")
                    && (ChangeTracker.OriginalValues["L_SelectionDevice"] == L_SelectionDevice))
                {
                    ChangeTracker.OriginalValues.Remove("L_SelectionDevice");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SelectionDevice", previousValue);
                }
                if (L_SelectionDevice != null && !L_SelectionDevice.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SelectionDevice.StartTracking();
                }
            }
        }
    
        private void FixupL_HaulType(L_HaulType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Sample.Contains(this))
            {
                previousValue.Sample.Remove(this);
            }
    
            if (L_HaulType != null)
            {
                if (!L_HaulType.Sample.Contains(this))
                {
                    L_HaulType.Sample.Add(this);
                }
    
                haulType = L_HaulType.haulType;
            }
            else if (!skipKeys)
            {
                haulType = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_HaulType")
                    && (ChangeTracker.OriginalValues["L_HaulType"] == L_HaulType))
                {
                    ChangeTracker.OriginalValues.Remove("L_HaulType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_HaulType", previousValue);
                }
                if (L_HaulType != null && !L_HaulType.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_HaulType.StartTracking();
                }
            }
        }
    
        private void FixupL_ThermoCline(L_ThermoCline previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Sample.Contains(this))
            {
                previousValue.Sample.Remove(this);
            }
    
            if (L_ThermoCline != null)
            {
                if (!L_ThermoCline.Sample.Contains(this))
                {
                    L_ThermoCline.Sample.Add(this);
                }
    
                thermoCline = L_ThermoCline.thermoCline;
            }
            else if (!skipKeys)
            {
                thermoCline = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_ThermoCline")
                    && (ChangeTracker.OriginalValues["L_ThermoCline"] == L_ThermoCline))
                {
                    ChangeTracker.OriginalValues.Remove("L_ThermoCline");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_ThermoCline", previousValue);
                }
                if (L_ThermoCline != null && !L_ThermoCline.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_ThermoCline.StartTracking();
                }
            }
        }
    
        private void FixupL_TimeZone(L_TimeZone previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Sample.Contains(this))
            {
                previousValue.Sample.Remove(this);
            }
    
            if (L_TimeZone != null)
            {
                if (!L_TimeZone.Sample.Contains(this))
                {
                    L_TimeZone.Sample.Add(this);
                }
    
                timeZone = L_TimeZone.timeZone;
            }
            else if (!skipKeys)
            {
                timeZone = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_TimeZone")
                    && (ChangeTracker.OriginalValues["L_TimeZone"] == L_TimeZone))
                {
                    ChangeTracker.OriginalValues.Remove("L_TimeZone");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_TimeZone", previousValue);
                }
                if (L_TimeZone != null && !L_TimeZone.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_TimeZone.StartTracking();
                }
            }
        }
    
        private void FixupL_WeightEstimationMethod(L_WeightEstimationMethod previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Sample.Contains(this))
            {
                previousValue.Sample.Remove(this);
            }
    
            if (L_WeightEstimationMethod != null)
            {
                if (!L_WeightEstimationMethod.Sample.Contains(this))
                {
                    L_WeightEstimationMethod.Sample.Add(this);
                }
    
                weightEstimationMethod = L_WeightEstimationMethod.weightEstimationMethod;
            }
            else if (!skipKeys)
            {
                weightEstimationMethod = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_WeightEstimationMethod")
                    && (ChangeTracker.OriginalValues["L_WeightEstimationMethod"] == L_WeightEstimationMethod))
                {
                    ChangeTracker.OriginalValues.Remove("L_WeightEstimationMethod");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_WeightEstimationMethod", previousValue);
                }
                if (L_WeightEstimationMethod != null && !L_WeightEstimationMethod.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_WeightEstimationMethod.StartTracking();
                }
            }
        }
    
        private void FixupL_SelectionDeviceSource(L_SelectionDeviceSource previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_SelectionDeviceSource != null)
            {
                selectionDeviceSourceId = L_SelectionDeviceSource.L_selectionDeviceSourceId;
            }
    
            else if (!skipKeys)
            {
                selectionDeviceSourceId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SelectionDeviceSource")
                    && (ChangeTracker.OriginalValues["L_SelectionDeviceSource"] == L_SelectionDeviceSource))
                {
                    ChangeTracker.OriginalValues.Remove("L_SelectionDeviceSource");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SelectionDeviceSource", previousValue);
                }
                if (L_SelectionDeviceSource != null && !L_SelectionDeviceSource.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SelectionDeviceSource.StartTracking();
                }
            }
        }
    
        private void FixupEst_Strata(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Est_Strata item in e.NewItems)
                {
                    item.Sample = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Est_Strata", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Est_Strata item in e.OldItems)
                {
                    if (ReferenceEquals(item.Sample, this))
                    {
                        item.Sample = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Est_Strata", item);
                    }
                }
            }
        }
    
        private void FixupR_SampleUsabilityParam(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_SampleUsabilityParam item in e.NewItems)
                {
                    item.Sample = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_SampleUsabilityParam", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_SampleUsabilityParam item in e.OldItems)
                {
                    if (ReferenceEquals(item.Sample, this))
                    {
                        item.Sample = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_SampleUsabilityParam", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupR_TargetSpecies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_TargetSpecies item in e.NewItems)
                {
                    item.Sample = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_TargetSpecies", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_TargetSpecies item in e.OldItems)
                {
                    if (ReferenceEquals(item.Sample, this))
                    {
                        item.Sample = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_TargetSpecies", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupSpeciesList(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SpeciesList item in e.NewItems)
                {
                    item.Sample = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SpeciesList", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SpeciesList item in e.OldItems)
                {
                    if (ReferenceEquals(item.Sample, this))
                    {
                        item.Sample = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SpeciesList", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTrawlOperation(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TrawlOperation item in e.NewItems)
                {
                    item.Sample = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TrawlOperation", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TrawlOperation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Sample, this))
                    {
                        item.Sample = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TrawlOperation", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
