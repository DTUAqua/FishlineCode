//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Cruise))]
    [KnownType(typeof(DFUPerson))]
    [KnownType(typeof(Est_Strata))]
    [KnownType(typeof(L_Harbour))]
    [KnownType(typeof(L_Nationality))]
    [KnownType(typeof(L_SamplingMethod))]
    [KnownType(typeof(L_SamplingType))]
    [KnownType(typeof(L_TripType))]
    [KnownType(typeof(NumberOfStationsPerTrip))]
    [KnownType(typeof(Person))]
    [KnownType(typeof(R_TripPlatformVersion))]
    [KnownType(typeof(R_TripUsabilityParam))]
    [KnownType(typeof(Sample))]
    [KnownType(typeof(L_Platform))]
    [KnownType(typeof(L_FisheryType))]
    [KnownType(typeof(L_TimeZone))]
    public partial class Trip: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int tripId
        {
            get { return _tripId; }
            set
            {
                if (_tripId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'tripId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tripId = value;
                    OnPropertyChanged("tripId");
                }
            }
        }
        private int _tripId;
    
        [DataMember]
        public int cruiseId
        {
            get { return _cruiseId; }
            set
            {
                if (_cruiseId != value)
                {
                    ChangeTracker.RecordOriginalValue("cruiseId", _cruiseId);
                    if (!IsDeserializing)
                    {
                        if (Cruise != null && Cruise.cruiseId != value)
                        {
                            Cruise = null;
                        }
                    }
                    _cruiseId = value;
                    OnPropertyChanged("cruiseId");
                }
            }
        }
        private int _cruiseId;
    
        [DataMember]
        public string trip1
        {
            get { return _trip1; }
            set
            {
                if (_trip1 != value)
                {
                    _trip1 = value;
                    OnPropertyChanged("trip1");
                }
            }
        }
        private string _trip1;
    
        [DataMember]
        public string tripType
        {
            get { return _tripType; }
            set
            {
                if (_tripType != value)
                {
                    ChangeTracker.RecordOriginalValue("tripType", _tripType);
                    if (!IsDeserializing)
                    {
                        if (L_TripType != null && L_TripType.tripType != value)
                        {
                            L_TripType = null;
                        }
                    }
                    _tripType = value;
                    OnPropertyChanged("tripType");
                }
            }
        }
        private string _tripType;
    
        [DataMember]
        public Nullable<int> samplingTypeId
        {
            get { return _samplingTypeId; }
            set
            {
                if (_samplingTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("samplingTypeId", _samplingTypeId);
                    if (!IsDeserializing)
                    {
                        if (L_SamplingType != null && L_SamplingType.samplingTypeId != value)
                        {
                            L_SamplingType = null;
                        }
                    }
                    _samplingTypeId = value;
                    OnPropertyChanged("samplingTypeId");
                }
            }
        }
        private Nullable<int> _samplingTypeId;
    
        [DataMember]
        public Nullable<int> samplingMethodId
        {
            get { return _samplingMethodId; }
            set
            {
                if (_samplingMethodId != value)
                {
                    ChangeTracker.RecordOriginalValue("samplingMethodId", _samplingMethodId);
                    if (!IsDeserializing)
                    {
                        if (L_SamplingMethod != null && L_SamplingMethod.samplingMethodId != value)
                        {
                            L_SamplingMethod = null;
                        }
                    }
                    _samplingMethodId = value;
                    OnPropertyChanged("samplingMethodId");
                }
            }
        }
        private Nullable<int> _samplingMethodId;
    
        [DataMember]
        public Nullable<int> numOfHaulsPerTrip
        {
            get { return _numOfHaulsPerTrip; }
            set
            {
                if (_numOfHaulsPerTrip != value)
                {
                    _numOfHaulsPerTrip = value;
                    OnPropertyChanged("numOfHaulsPerTrip");
                }
            }
        }
        private Nullable<int> _numOfHaulsPerTrip;
    
        [DataMember]
        public Nullable<int> manualCount
        {
            get { return _manualCount; }
            set
            {
                if (_manualCount != value)
                {
                    _manualCount = value;
                    OnPropertyChanged("manualCount");
                }
            }
        }
        private Nullable<int> _manualCount;
    
        [DataMember]
        public string stationStart
        {
            get { return _stationStart; }
            set
            {
                if (_stationStart != value)
                {
                    _stationStart = value;
                    OnPropertyChanged("stationStart");
                }
            }
        }
        private string _stationStart;
    
        [DataMember]
        public Nullable<System.DateTime> dateStart
        {
            get { return _dateStart; }
            set
            {
                if (_dateStart != value)
                {
                    _dateStart = value;
                    OnPropertyChanged("dateStart");
                }
            }
        }
        private Nullable<System.DateTime> _dateStart;
    
        [DataMember]
        public Nullable<int> timeZone
        {
            get { return _timeZone; }
            set
            {
                if (_timeZone != value)
                {
                    ChangeTracker.RecordOriginalValue("timeZone", _timeZone);
                    if (!IsDeserializing)
                    {
                        if (L_TimeZone != null && L_TimeZone.timeZone != value)
                        {
                            L_TimeZone = null;
                        }
                    }
                    _timeZone = value;
                    OnPropertyChanged("timeZone");
                }
            }
        }
        private Nullable<int> _timeZone;
    
        [DataMember]
        public string stationEnd
        {
            get { return _stationEnd; }
            set
            {
                if (_stationEnd != value)
                {
                    _stationEnd = value;
                    OnPropertyChanged("stationEnd");
                }
            }
        }
        private string _stationEnd;
    
        [DataMember]
        public Nullable<System.DateTime> dateEnd
        {
            get { return _dateEnd; }
            set
            {
                if (_dateEnd != value)
                {
                    _dateEnd = value;
                    OnPropertyChanged("dateEnd");
                }
            }
        }
        private Nullable<System.DateTime> _dateEnd;
    
        [DataMember]
        public string nationality
        {
            get { return _nationality; }
            set
            {
                if (_nationality != value)
                {
                    ChangeTracker.RecordOriginalValue("nationality", _nationality);
                    if (!IsDeserializing)
                    {
                        if (L_Nationality != null && L_Nationality.nationality != value)
                        {
                            L_Nationality = null;
                        }
                    }
                    _nationality = value;
                    OnPropertyChanged("nationality");
                }
            }
        }
        private string _nationality;
    
        [DataMember]
        public Nullable<int> tripLeaderId
        {
            get { return _tripLeaderId; }
            set
            {
                if (_tripLeaderId != value)
                {
                    ChangeTracker.RecordOriginalValue("tripLeaderId", _tripLeaderId);
                    if (!IsDeserializing)
                    {
                        if (DFUPerson != null && DFUPerson.dfuPersonId != value)
                        {
                            DFUPerson = null;
                        }
                    }
                    _tripLeaderId = value;
                    OnPropertyChanged("tripLeaderId");
                }
            }
        }
        private Nullable<int> _tripLeaderId;
    
        [DataMember]
        public string harbourLanding
        {
            get { return _harbourLanding; }
            set
            {
                if (_harbourLanding != value)
                {
                    ChangeTracker.RecordOriginalValue("harbourLanding", _harbourLanding);
                    if (!IsDeserializing)
                    {
                        if (L_Harbour != null && L_Harbour.harbour != value)
                        {
                            L_Harbour = null;
                        }
                    }
                    _harbourLanding = value;
                    OnPropertyChanged("harbourLanding");
                }
            }
        }
        private string _harbourLanding;
    
        [DataMember]
        public Nullable<int> contactPersonId
        {
            get { return _contactPersonId; }
            set
            {
                if (_contactPersonId != value)
                {
                    ChangeTracker.RecordOriginalValue("contactPersonId", _contactPersonId);
                    if (!IsDeserializing)
                    {
                        if (Person != null && Person.personId != value)
                        {
                            Person = null;
                        }
                    }
                    _contactPersonId = value;
                    OnPropertyChanged("contactPersonId");
                }
            }
        }
        private Nullable<int> _contactPersonId;
    
        [DataMember]
        public Nullable<int> dataHandlerId
        {
            get { return _dataHandlerId; }
            set
            {
                if (_dataHandlerId != value)
                {
                    ChangeTracker.RecordOriginalValue("dataHandlerId", _dataHandlerId);
                    if (!IsDeserializing)
                    {
                        if (DFUPerson1 != null && DFUPerson1.dfuPersonId != value)
                        {
                            DFUPerson1 = null;
                        }
                    }
                    _dataHandlerId = value;
                    OnPropertyChanged("dataHandlerId");
                }
            }
        }
        private Nullable<int> _dataHandlerId;
    
        [DataMember]
        public Nullable<System.DateTime> dateEstimTrip
        {
            get { return _dateEstimTrip; }
            set
            {
                if (_dateEstimTrip != value)
                {
                    _dateEstimTrip = value;
                    OnPropertyChanged("dateEstimTrip");
                }
            }
        }
        private Nullable<System.DateTime> _dateEstimTrip;
    
        [DataMember]
        public Nullable<System.DateTime> dateUpdated
        {
            get { return _dateUpdated; }
            set
            {
                if (_dateUpdated != value)
                {
                    _dateUpdated = value;
                    OnPropertyChanged("dateUpdated");
                }
            }
        }
        private Nullable<System.DateTime> _dateUpdated;
    
        [DataMember]
        public string remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public string logBldNr
        {
            get { return _logBldNr; }
            set
            {
                if (_logBldNr != value)
                {
                    _logBldNr = value;
                    OnPropertyChanged("logBldNr");
                }
            }
        }
        private string _logBldNr;
    
        [DataMember]
        public Nullable<bool> fDFVessel
        {
            get { return _fDFVessel; }
            set
            {
                if (_fDFVessel != value)
                {
                    _fDFVessel = value;
                    OnPropertyChanged("fDFVessel");
                }
            }
        }
        private Nullable<bool> _fDFVessel;
    
        [DataMember]
        public string platform1
        {
            get { return _platform1; }
            set
            {
                if (_platform1 != value)
                {
                    ChangeTracker.RecordOriginalValue("platform1", _platform1);
                    if (!IsDeserializing)
                    {
                        if (L_Platform != null && L_Platform.platform != value)
                        {
                            L_Platform = null;
                        }
                    }
                    _platform1 = value;
                    OnPropertyChanged("platform1");
                }
            }
        }
        private string _platform1;
    
        [DataMember]
        public string platform2
        {
            get { return _platform2; }
            set
            {
                if (_platform2 != value)
                {
                    ChangeTracker.RecordOriginalValue("platform2", _platform2);
                    if (!IsDeserializing)
                    {
                        if (L_Platform1 != null && L_Platform1.platform != value)
                        {
                            L_Platform1 = null;
                        }
                    }
                    _platform2 = value;
                    OnPropertyChanged("platform2");
                }
            }
        }
        private string _platform2;
    
        [DataMember]
        public string fisheryType
        {
            get { return _fisheryType; }
            set
            {
                if (_fisheryType != value)
                {
                    ChangeTracker.RecordOriginalValue("fisheryType", _fisheryType);
                    if (!IsDeserializing)
                    {
                        if (L_FisheryType != null && L_FisheryType.fisheryType != value)
                        {
                            L_FisheryType = null;
                        }
                    }
                    _fisheryType = value;
                    OnPropertyChanged("fisheryType");
                }
            }
        }
        private string _fisheryType;
    
        [DataMember]
        public Nullable<System.DateTime> dateSample
        {
            get { return _dateSample; }
            set
            {
                if (_dateSample != value)
                {
                    _dateSample = value;
                    OnPropertyChanged("dateSample");
                }
            }
        }
        private Nullable<System.DateTime> _dateSample;
    
        [DataMember]
        public string harbourSample
        {
            get { return _harbourSample; }
            set
            {
                if (_harbourSample != value)
                {
                    ChangeTracker.RecordOriginalValue("harbourSample", _harbourSample);
                    if (!IsDeserializing)
                    {
                        if (L_Harbour1 != null && L_Harbour1.harbour != value)
                        {
                            L_Harbour1 = null;
                        }
                    }
                    _harbourSample = value;
                    OnPropertyChanged("harbourSample");
                }
            }
        }
        private string _harbourSample;
    
        [DataMember]
        public string sgTripId
        {
            get { return _sgTripId; }
            set
            {
                if (_sgTripId != value)
                {
                    _sgTripId = value;
                    OnPropertyChanged("sgTripId");
                }
            }
        }
        private string _sgTripId;
    
        [DataMember]
        public string tripNum
        {
            get { return _tripNum; }
            set
            {
                if (_tripNum != value)
                {
                    _tripNum = value;
                    OnPropertyChanged("tripNum");
                }
            }
        }
        private string _tripNum;
    
        [DataMember]
        public string placeName
        {
            get { return _placeName; }
            set
            {
                if (_placeName != value)
                {
                    _placeName = value;
                    OnPropertyChanged("placeName");
                }
            }
        }
        private string _placeName;
    
        [DataMember]
        public string placeCode
        {
            get { return _placeCode; }
            set
            {
                if (_placeCode != value)
                {
                    _placeCode = value;
                    OnPropertyChanged("placeCode");
                }
            }
        }
        private string _placeCode;
    
        [DataMember]
        public Nullable<int> postalCode
        {
            get { return _postalCode; }
            set
            {
                if (_postalCode != value)
                {
                    _postalCode = value;
                    OnPropertyChanged("postalCode");
                }
            }
        }
        private Nullable<int> _postalCode;
    
        [DataMember]
        public Nullable<int> numberInPlace
        {
            get { return _numberInPlace; }
            set
            {
                if (_numberInPlace != value)
                {
                    _numberInPlace = value;
                    OnPropertyChanged("numberInPlace");
                }
            }
        }
        private Nullable<int> _numberInPlace;
    
        [DataMember]
        public Nullable<int> respYes
        {
            get { return _respYes; }
            set
            {
                if (_respYes != value)
                {
                    _respYes = value;
                    OnPropertyChanged("respYes");
                }
            }
        }
        private Nullable<int> _respYes;
    
        [DataMember]
        public Nullable<int> respNo
        {
            get { return _respNo; }
            set
            {
                if (_respNo != value)
                {
                    _respNo = value;
                    OnPropertyChanged("respNo");
                }
            }
        }
        private Nullable<int> _respNo;
    
        [DataMember]
        public Nullable<int> respTot
        {
            get { return _respTot; }
            set
            {
                if (_respTot != value)
                {
                    _respTot = value;
                    OnPropertyChanged("respTot");
                }
            }
        }
        private Nullable<int> _respTot;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Cruise Cruise
        {
            get { return _cruise; }
            set
            {
                if (!ReferenceEquals(_cruise, value))
                {
                    var previousValue = _cruise;
                    _cruise = value;
                    FixupCruise(previousValue);
                    OnNavigationPropertyChanged("Cruise");
                }
            }
        }
        private Cruise _cruise;
    
        [DataMember]
        public DFUPerson DFUPerson
        {
            get { return _dFUPerson; }
            set
            {
                if (!ReferenceEquals(_dFUPerson, value))
                {
                    var previousValue = _dFUPerson;
                    _dFUPerson = value;
                    FixupDFUPerson(previousValue);
                    OnNavigationPropertyChanged("DFUPerson");
                }
            }
        }
        private DFUPerson _dFUPerson;
    
        [DataMember]
        public DFUPerson DFUPerson1
        {
            get { return _dFUPerson1; }
            set
            {
                if (!ReferenceEquals(_dFUPerson1, value))
                {
                    var previousValue = _dFUPerson1;
                    _dFUPerson1 = value;
                    FixupDFUPerson1(previousValue);
                    OnNavigationPropertyChanged("DFUPerson1");
                }
            }
        }
        private DFUPerson _dFUPerson1;
    
        [DataMember]
        public TrackableCollection<Est_Strata> Est_Strata
        {
            get
            {
                if (_est_Strata == null)
                {
                    _est_Strata = new TrackableCollection<Est_Strata>();
                    _est_Strata.CollectionChanged += FixupEst_Strata;
                }
                return _est_Strata;
            }
            set
            {
                if (!ReferenceEquals(_est_Strata, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_est_Strata != null)
                    {
                        _est_Strata.CollectionChanged -= FixupEst_Strata;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (Est_Strata item in _est_Strata)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _est_Strata = value;
                    if (_est_Strata != null)
                    {
                        _est_Strata.CollectionChanged += FixupEst_Strata;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (Est_Strata item in _est_Strata)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Est_Strata");
                }
            }
        }
        private TrackableCollection<Est_Strata> _est_Strata;
    
        [DataMember]
        public L_Harbour L_Harbour
        {
            get { return _l_Harbour; }
            set
            {
                if (!ReferenceEquals(_l_Harbour, value))
                {
                    var previousValue = _l_Harbour;
                    _l_Harbour = value;
                    FixupL_Harbour(previousValue);
                    OnNavigationPropertyChanged("L_Harbour");
                }
            }
        }
        private L_Harbour _l_Harbour;
    
        [DataMember]
        public L_Nationality L_Nationality
        {
            get { return _l_Nationality; }
            set
            {
                if (!ReferenceEquals(_l_Nationality, value))
                {
                    var previousValue = _l_Nationality;
                    _l_Nationality = value;
                    FixupL_Nationality(previousValue);
                    OnNavigationPropertyChanged("L_Nationality");
                }
            }
        }
        private L_Nationality _l_Nationality;
    
        [DataMember]
        public L_SamplingMethod L_SamplingMethod
        {
            get { return _l_SamplingMethod; }
            set
            {
                if (!ReferenceEquals(_l_SamplingMethod, value))
                {
                    var previousValue = _l_SamplingMethod;
                    _l_SamplingMethod = value;
                    FixupL_SamplingMethod(previousValue);
                    OnNavigationPropertyChanged("L_SamplingMethod");
                }
            }
        }
        private L_SamplingMethod _l_SamplingMethod;
    
        [DataMember]
        public L_SamplingType L_SamplingType
        {
            get { return _l_SamplingType; }
            set
            {
                if (!ReferenceEquals(_l_SamplingType, value))
                {
                    var previousValue = _l_SamplingType;
                    _l_SamplingType = value;
                    FixupL_SamplingType(previousValue);
                    OnNavigationPropertyChanged("L_SamplingType");
                }
            }
        }
        private L_SamplingType _l_SamplingType;
    
        [DataMember]
        public L_TripType L_TripType
        {
            get { return _l_TripType; }
            set
            {
                if (!ReferenceEquals(_l_TripType, value))
                {
                    var previousValue = _l_TripType;
                    _l_TripType = value;
                    FixupL_TripType(previousValue);
                    OnNavigationPropertyChanged("L_TripType");
                }
            }
        }
        private L_TripType _l_TripType;
    
        [DataMember]
        public TrackableCollection<NumberOfStationsPerTrip> NumberOfStationsPerTrip
        {
            get
            {
                if (_numberOfStationsPerTrip == null)
                {
                    _numberOfStationsPerTrip = new TrackableCollection<NumberOfStationsPerTrip>();
                    _numberOfStationsPerTrip.CollectionChanged += FixupNumberOfStationsPerTrip;
                }
                return _numberOfStationsPerTrip;
            }
            set
            {
                if (!ReferenceEquals(_numberOfStationsPerTrip, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_numberOfStationsPerTrip != null)
                    {
                        _numberOfStationsPerTrip.CollectionChanged -= FixupNumberOfStationsPerTrip;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (NumberOfStationsPerTrip item in _numberOfStationsPerTrip)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _numberOfStationsPerTrip = value;
                    if (_numberOfStationsPerTrip != null)
                    {
                        _numberOfStationsPerTrip.CollectionChanged += FixupNumberOfStationsPerTrip;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (NumberOfStationsPerTrip item in _numberOfStationsPerTrip)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("NumberOfStationsPerTrip");
                }
            }
        }
        private TrackableCollection<NumberOfStationsPerTrip> _numberOfStationsPerTrip;
    
        [DataMember]
        public Person Person
        {
            get { return _person; }
            set
            {
                if (!ReferenceEquals(_person, value))
                {
                    var previousValue = _person;
                    _person = value;
                    FixupPerson(previousValue);
                    OnNavigationPropertyChanged("Person");
                }
            }
        }
        private Person _person;
    
        [DataMember]
        public TrackableCollection<R_TripPlatformVersion> R_TripPlatformVersion
        {
            get
            {
                if (_r_TripPlatformVersion == null)
                {
                    _r_TripPlatformVersion = new TrackableCollection<R_TripPlatformVersion>();
                    _r_TripPlatformVersion.CollectionChanged += FixupR_TripPlatformVersion;
                }
                return _r_TripPlatformVersion;
            }
            set
            {
                if (!ReferenceEquals(_r_TripPlatformVersion, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_r_TripPlatformVersion != null)
                    {
                        _r_TripPlatformVersion.CollectionChanged -= FixupR_TripPlatformVersion;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (R_TripPlatformVersion item in _r_TripPlatformVersion)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _r_TripPlatformVersion = value;
                    if (_r_TripPlatformVersion != null)
                    {
                        _r_TripPlatformVersion.CollectionChanged += FixupR_TripPlatformVersion;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (R_TripPlatformVersion item in _r_TripPlatformVersion)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("R_TripPlatformVersion");
                }
            }
        }
        private TrackableCollection<R_TripPlatformVersion> _r_TripPlatformVersion;
    
        [DataMember]
        public TrackableCollection<R_TripUsabilityParam> R_TripUsabilityParam
        {
            get
            {
                if (_r_TripUsabilityParam == null)
                {
                    _r_TripUsabilityParam = new TrackableCollection<R_TripUsabilityParam>();
                    _r_TripUsabilityParam.CollectionChanged += FixupR_TripUsabilityParam;
                }
                return _r_TripUsabilityParam;
            }
            set
            {
                if (!ReferenceEquals(_r_TripUsabilityParam, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_r_TripUsabilityParam != null)
                    {
                        _r_TripUsabilityParam.CollectionChanged -= FixupR_TripUsabilityParam;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (R_TripUsabilityParam item in _r_TripUsabilityParam)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _r_TripUsabilityParam = value;
                    if (_r_TripUsabilityParam != null)
                    {
                        _r_TripUsabilityParam.CollectionChanged += FixupR_TripUsabilityParam;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (R_TripUsabilityParam item in _r_TripUsabilityParam)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("R_TripUsabilityParam");
                }
            }
        }
        private TrackableCollection<R_TripUsabilityParam> _r_TripUsabilityParam;
    
        [DataMember]
        public TrackableCollection<Sample> Sample
        {
            get
            {
                if (_sample == null)
                {
                    _sample = new TrackableCollection<Sample>();
                    _sample.CollectionChanged += FixupSample;
                }
                return _sample;
            }
            set
            {
                if (!ReferenceEquals(_sample, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sample != null)
                    {
                        _sample.CollectionChanged -= FixupSample;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (Sample item in _sample)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _sample = value;
                    if (_sample != null)
                    {
                        _sample.CollectionChanged += FixupSample;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (Sample item in _sample)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Sample");
                }
            }
        }
        private TrackableCollection<Sample> _sample;
    
        [DataMember]
        public L_Platform L_Platform
        {
            get { return _l_Platform; }
            set
            {
                if (!ReferenceEquals(_l_Platform, value))
                {
                    var previousValue = _l_Platform;
                    _l_Platform = value;
                    FixupL_Platform(previousValue);
                    OnNavigationPropertyChanged("L_Platform");
                }
            }
        }
        private L_Platform _l_Platform;
    
        [DataMember]
        public L_Platform L_Platform1
        {
            get { return _l_Platform1; }
            set
            {
                if (!ReferenceEquals(_l_Platform1, value))
                {
                    var previousValue = _l_Platform1;
                    _l_Platform1 = value;
                    FixupL_Platform1(previousValue);
                    OnNavigationPropertyChanged("L_Platform1");
                }
            }
        }
        private L_Platform _l_Platform1;
    
        [DataMember]
        public L_FisheryType L_FisheryType
        {
            get { return _l_FisheryType; }
            set
            {
                if (!ReferenceEquals(_l_FisheryType, value))
                {
                    var previousValue = _l_FisheryType;
                    _l_FisheryType = value;
                    FixupL_FisheryType(previousValue);
                    OnNavigationPropertyChanged("L_FisheryType");
                }
            }
        }
        private L_FisheryType _l_FisheryType;
    
        [DataMember]
        public L_TimeZone L_TimeZone
        {
            get { return _l_TimeZone; }
            set
            {
                if (!ReferenceEquals(_l_TimeZone, value))
                {
                    var previousValue = _l_TimeZone;
                    _l_TimeZone = value;
                    FixupL_TimeZone(previousValue);
                    OnNavigationPropertyChanged("L_TimeZone");
                }
            }
        }
        private L_TimeZone _l_TimeZone;
    
        [DataMember]
        public L_Harbour L_Harbour1
        {
            get { return _l_Harbour1; }
            set
            {
                if (!ReferenceEquals(_l_Harbour1, value))
                {
                    var previousValue = _l_Harbour1;
                    _l_Harbour1 = value;
                    FixupL_Harbour1(previousValue);
                    OnNavigationPropertyChanged("L_Harbour1");
                }
            }
        }
        private L_Harbour _l_Harbour1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Cruise = null;
            DFUPerson = null;
            DFUPerson1 = null;
            Est_Strata.Clear();
            L_Harbour = null;
            L_Nationality = null;
            L_SamplingMethod = null;
            L_SamplingType = null;
            L_TripType = null;
            NumberOfStationsPerTrip.Clear();
            Person = null;
            R_TripPlatformVersion.Clear();
            R_TripUsabilityParam.Clear();
            Sample.Clear();
            L_Platform = null;
            L_Platform1 = null;
            L_FisheryType = null;
            L_TimeZone = null;
            L_Harbour1 = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupCruise(Cruise previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Trip.Contains(this))
            {
                previousValue.Trip.Remove(this);
            }
    
            if (Cruise != null)
            {
                if (!Cruise.Trip.Contains(this))
                {
                    Cruise.Trip.Add(this);
                }
    
                cruiseId = Cruise.cruiseId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Cruise")
                    && (ChangeTracker.OriginalValues["Cruise"] == Cruise))
                {
                    ChangeTracker.OriginalValues.Remove("Cruise");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Cruise", previousValue);
                }
                if (Cruise != null && !Cruise.ChangeTracker.ChangeTrackingEnabled)
                {
                    Cruise.StartTracking();
                }
            }
        }
    
        private void FixupDFUPerson(DFUPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Trip.Contains(this))
            {
                previousValue.Trip.Remove(this);
            }
    
            if (DFUPerson != null)
            {
                if (!DFUPerson.Trip.Contains(this))
                {
                    DFUPerson.Trip.Add(this);
                }
    
                tripLeaderId = DFUPerson.dfuPersonId;
            }
            else if (!skipKeys)
            {
                tripLeaderId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DFUPerson")
                    && (ChangeTracker.OriginalValues["DFUPerson"] == DFUPerson))
                {
                    ChangeTracker.OriginalValues.Remove("DFUPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DFUPerson", previousValue);
                }
                if (DFUPerson != null && !DFUPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    DFUPerson.StartTracking();
                }
            }
        }
    
        private void FixupDFUPerson1(DFUPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Trip1.Contains(this))
            {
                previousValue.Trip1.Remove(this);
            }
    
            if (DFUPerson1 != null)
            {
                if (!DFUPerson1.Trip1.Contains(this))
                {
                    DFUPerson1.Trip1.Add(this);
                }
    
                dataHandlerId = DFUPerson1.dfuPersonId;
            }
            else if (!skipKeys)
            {
                dataHandlerId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DFUPerson1")
                    && (ChangeTracker.OriginalValues["DFUPerson1"] == DFUPerson1))
                {
                    ChangeTracker.OriginalValues.Remove("DFUPerson1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DFUPerson1", previousValue);
                }
                if (DFUPerson1 != null && !DFUPerson1.ChangeTracker.ChangeTrackingEnabled)
                {
                    DFUPerson1.StartTracking();
                }
            }
        }
    
        private void FixupL_Harbour(L_Harbour previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Trip.Contains(this))
            {
                previousValue.Trip.Remove(this);
            }
    
            if (L_Harbour != null)
            {
                if (!L_Harbour.Trip.Contains(this))
                {
                    L_Harbour.Trip.Add(this);
                }
    
                harbourLanding = L_Harbour.harbour;
            }
            else if (!skipKeys)
            {
                harbourLanding = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Harbour")
                    && (ChangeTracker.OriginalValues["L_Harbour"] == L_Harbour))
                {
                    ChangeTracker.OriginalValues.Remove("L_Harbour");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Harbour", previousValue);
                }
                if (L_Harbour != null && !L_Harbour.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Harbour.StartTracking();
                }
            }
        }
    
        private void FixupL_Nationality(L_Nationality previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Trip.Contains(this))
            {
                previousValue.Trip.Remove(this);
            }
    
            if (L_Nationality != null)
            {
                if (!L_Nationality.Trip.Contains(this))
                {
                    L_Nationality.Trip.Add(this);
                }
    
                nationality = L_Nationality.nationality;
            }
            else if (!skipKeys)
            {
                nationality = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Nationality")
                    && (ChangeTracker.OriginalValues["L_Nationality"] == L_Nationality))
                {
                    ChangeTracker.OriginalValues.Remove("L_Nationality");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Nationality", previousValue);
                }
                if (L_Nationality != null && !L_Nationality.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Nationality.StartTracking();
                }
            }
        }
    
        private void FixupL_SamplingMethod(L_SamplingMethod previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Trip.Contains(this))
            {
                previousValue.Trip.Remove(this);
            }
    
            if (L_SamplingMethod != null)
            {
                if (!L_SamplingMethod.Trip.Contains(this))
                {
                    L_SamplingMethod.Trip.Add(this);
                }
    
                samplingMethodId = L_SamplingMethod.samplingMethodId;
            }
            else if (!skipKeys)
            {
                samplingMethodId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SamplingMethod")
                    && (ChangeTracker.OriginalValues["L_SamplingMethod"] == L_SamplingMethod))
                {
                    ChangeTracker.OriginalValues.Remove("L_SamplingMethod");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SamplingMethod", previousValue);
                }
                if (L_SamplingMethod != null && !L_SamplingMethod.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SamplingMethod.StartTracking();
                }
            }
        }
    
        private void FixupL_SamplingType(L_SamplingType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Trip.Contains(this))
            {
                previousValue.Trip.Remove(this);
            }
    
            if (L_SamplingType != null)
            {
                if (!L_SamplingType.Trip.Contains(this))
                {
                    L_SamplingType.Trip.Add(this);
                }
    
                samplingTypeId = L_SamplingType.samplingTypeId;
            }
            else if (!skipKeys)
            {
                samplingTypeId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SamplingType")
                    && (ChangeTracker.OriginalValues["L_SamplingType"] == L_SamplingType))
                {
                    ChangeTracker.OriginalValues.Remove("L_SamplingType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SamplingType", previousValue);
                }
                if (L_SamplingType != null && !L_SamplingType.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SamplingType.StartTracking();
                }
            }
        }
    
        private void FixupL_TripType(L_TripType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Trip.Contains(this))
            {
                previousValue.Trip.Remove(this);
            }
    
            if (L_TripType != null)
            {
                if (!L_TripType.Trip.Contains(this))
                {
                    L_TripType.Trip.Add(this);
                }
    
                tripType = L_TripType.tripType;
            }
            else if (!skipKeys)
            {
                tripType = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_TripType")
                    && (ChangeTracker.OriginalValues["L_TripType"] == L_TripType))
                {
                    ChangeTracker.OriginalValues.Remove("L_TripType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_TripType", previousValue);
                }
                if (L_TripType != null && !L_TripType.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_TripType.StartTracking();
                }
            }
        }
    
        private void FixupPerson(Person previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Trip.Contains(this))
            {
                previousValue.Trip.Remove(this);
            }
    
            if (Person != null)
            {
                if (!Person.Trip.Contains(this))
                {
                    Person.Trip.Add(this);
                }
    
                contactPersonId = Person.personId;
            }
            else if (!skipKeys)
            {
                contactPersonId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Person")
                    && (ChangeTracker.OriginalValues["Person"] == Person))
                {
                    ChangeTracker.OriginalValues.Remove("Person");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Person", previousValue);
                }
                if (Person != null && !Person.ChangeTracker.ChangeTrackingEnabled)
                {
                    Person.StartTracking();
                }
            }
        }
    
        private void FixupL_Platform(L_Platform previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Trip.Contains(this))
            {
                previousValue.Trip.Remove(this);
            }
    
            if (L_Platform != null)
            {
                if (!L_Platform.Trip.Contains(this))
                {
                    L_Platform.Trip.Add(this);
                }
    
                platform1 = L_Platform.platform;
            }
            else if (!skipKeys)
            {
                platform1 = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Platform")
                    && (ChangeTracker.OriginalValues["L_Platform"] == L_Platform))
                {
                    ChangeTracker.OriginalValues.Remove("L_Platform");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Platform", previousValue);
                }
                if (L_Platform != null && !L_Platform.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Platform.StartTracking();
                }
            }
        }
    
        private void FixupL_Platform1(L_Platform previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Trip1.Contains(this))
            {
                previousValue.Trip1.Remove(this);
            }
    
            if (L_Platform1 != null)
            {
                if (!L_Platform1.Trip1.Contains(this))
                {
                    L_Platform1.Trip1.Add(this);
                }
    
                platform2 = L_Platform1.platform;
            }
            else if (!skipKeys)
            {
                platform2 = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Platform1")
                    && (ChangeTracker.OriginalValues["L_Platform1"] == L_Platform1))
                {
                    ChangeTracker.OriginalValues.Remove("L_Platform1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Platform1", previousValue);
                }
                if (L_Platform1 != null && !L_Platform1.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Platform1.StartTracking();
                }
            }
        }
    
        private void FixupL_FisheryType(L_FisheryType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Trip.Contains(this))
            {
                previousValue.Trip.Remove(this);
            }
    
            if (L_FisheryType != null)
            {
                if (!L_FisheryType.Trip.Contains(this))
                {
                    L_FisheryType.Trip.Add(this);
                }
    
                fisheryType = L_FisheryType.fisheryType;
            }
            else if (!skipKeys)
            {
                fisheryType = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_FisheryType")
                    && (ChangeTracker.OriginalValues["L_FisheryType"] == L_FisheryType))
                {
                    ChangeTracker.OriginalValues.Remove("L_FisheryType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_FisheryType", previousValue);
                }
                if (L_FisheryType != null && !L_FisheryType.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_FisheryType.StartTracking();
                }
            }
        }
    
        private void FixupL_TimeZone(L_TimeZone previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Trip.Contains(this))
            {
                previousValue.Trip.Remove(this);
            }
    
            if (L_TimeZone != null)
            {
                if (!L_TimeZone.Trip.Contains(this))
                {
                    L_TimeZone.Trip.Add(this);
                }
    
                timeZone = L_TimeZone.timeZone;
            }
            else if (!skipKeys)
            {
                timeZone = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_TimeZone")
                    && (ChangeTracker.OriginalValues["L_TimeZone"] == L_TimeZone))
                {
                    ChangeTracker.OriginalValues.Remove("L_TimeZone");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_TimeZone", previousValue);
                }
                if (L_TimeZone != null && !L_TimeZone.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_TimeZone.StartTracking();
                }
            }
        }
    
        private void FixupL_Harbour1(L_Harbour previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Trip1.Contains(this))
            {
                previousValue.Trip1.Remove(this);
            }
    
            if (L_Harbour1 != null)
            {
                if (!L_Harbour1.Trip1.Contains(this))
                {
                    L_Harbour1.Trip1.Add(this);
                }
    
                harbourSample = L_Harbour1.harbour;
            }
            else if (!skipKeys)
            {
                harbourSample = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Harbour1")
                    && (ChangeTracker.OriginalValues["L_Harbour1"] == L_Harbour1))
                {
                    ChangeTracker.OriginalValues.Remove("L_Harbour1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Harbour1", previousValue);
                }
                if (L_Harbour1 != null && !L_Harbour1.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Harbour1.StartTracking();
                }
            }
        }
    
        private void FixupEst_Strata(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Est_Strata item in e.NewItems)
                {
                    item.Trip = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Est_Strata", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Est_Strata item in e.OldItems)
                {
                    if (ReferenceEquals(item.Trip, this))
                    {
                        item.Trip = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Est_Strata", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupNumberOfStationsPerTrip(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NumberOfStationsPerTrip item in e.NewItems)
                {
                    item.Trip = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NumberOfStationsPerTrip", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NumberOfStationsPerTrip item in e.OldItems)
                {
                    if (ReferenceEquals(item.Trip, this))
                    {
                        item.Trip = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NumberOfStationsPerTrip", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupR_TripPlatformVersion(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_TripPlatformVersion item in e.NewItems)
                {
                    item.Trip = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_TripPlatformVersion", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_TripPlatformVersion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Trip, this))
                    {
                        item.Trip = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_TripPlatformVersion", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupR_TripUsabilityParam(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_TripUsabilityParam item in e.NewItems)
                {
                    item.Trip = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_TripUsabilityParam", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_TripUsabilityParam item in e.OldItems)
                {
                    if (ReferenceEquals(item.Trip, this))
                    {
                        item.Trip = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_TripUsabilityParam", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupSample(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Sample item in e.NewItems)
                {
                    item.Trip = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Sample", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Sample item in e.OldItems)
                {
                    if (ReferenceEquals(item.Trip, this))
                    {
                        item.Trip = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Sample", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
