//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    public partial class L_MissingLookup: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string dataTable
        {
            get { return _dataTable; }
            set
            {
                if (_dataTable != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'dataTable' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dataTable = value;
                    OnPropertyChanged("dataTable");
                }
            }
        }
        private string _dataTable;
    
        [DataMember]
        public string dataField
        {
            get { return _dataField; }
            set
            {
                if (_dataField != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'dataField' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dataField = value;
                    OnPropertyChanged("dataField");
                }
            }
        }
        private string _dataField;
    
        [DataMember]
        public string dataValue
        {
            get { return _dataValue; }
            set
            {
                if (_dataValue != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'dataValue' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dataValue = value;
                    OnPropertyChanged("dataValue");
                }
            }
        }
        private string _dataValue;
    
        [DataMember]
        public string keydata
        {
            get { return _keydata; }
            set
            {
                if (_keydata != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'keydata' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _keydata = value;
                    OnPropertyChanged("keydata");
                }
            }
        }
        private string _keydata;
    
        [DataMember]
        public Nullable<int> cruiseId
        {
            get { return _cruiseId; }
            set
            {
                if (_cruiseId != value)
                {
                    _cruiseId = value;
                    OnPropertyChanged("cruiseId");
                }
            }
        }
        private Nullable<int> _cruiseId;
    
        [DataMember]
        public Nullable<int> tripId
        {
            get { return _tripId; }
            set
            {
                if (_tripId != value)
                {
                    _tripId = value;
                    OnPropertyChanged("tripId");
                }
            }
        }
        private Nullable<int> _tripId;
    
        [DataMember]
        public Nullable<int> sampleId
        {
            get { return _sampleId; }
            set
            {
                if (_sampleId != value)
                {
                    _sampleId = value;
                    OnPropertyChanged("sampleId");
                }
            }
        }
        private Nullable<int> _sampleId;
    
        [DataMember]
        public Nullable<int> specieslistId
        {
            get { return _specieslistId; }
            set
            {
                if (_specieslistId != value)
                {
                    _specieslistId = value;
                    OnPropertyChanged("specieslistId");
                }
            }
        }
        private Nullable<int> _specieslistId;
    
        [DataMember]
        public Nullable<int> subsampleId
        {
            get { return _subsampleId; }
            set
            {
                if (_subsampleId != value)
                {
                    _subsampleId = value;
                    OnPropertyChanged("subsampleId");
                }
            }
        }
        private Nullable<int> _subsampleId;
    
        [DataMember]
        public Nullable<int> animalId
        {
            get { return _animalId; }
            set
            {
                if (_animalId != value)
                {
                    _animalId = value;
                    OnPropertyChanged("animalId");
                }
            }
        }
        private Nullable<int> _animalId;
    
        [DataMember]
        public Nullable<int> ageId
        {
            get { return _ageId; }
            set
            {
                if (_ageId != value)
                {
                    _ageId = value;
                    OnPropertyChanged("ageId");
                }
            }
        }
        private Nullable<int> _ageId;
    
        [DataMember]
        public Nullable<int> LFrecordId
        {
            get { return _lFrecordId; }
            set
            {
                if (_lFrecordId != value)
                {
                    _lFrecordId = value;
                    OnPropertyChanged("LFrecordId");
                }
            }
        }
        private Nullable<int> _lFrecordId;
    
        [DataMember]
        public Nullable<int> artsrecordId
        {
            get { return _artsrecordId; }
            set
            {
                if (_artsrecordId != value)
                {
                    _artsrecordId = value;
                    OnPropertyChanged("artsrecordId");
                }
            }
        }
        private Nullable<int> _artsrecordId;
    
        [DataMember]
        public string errorType
        {
            get { return _errorType; }
            set
            {
                if (_errorType != value)
                {
                    _errorType = value;
                    OnPropertyChanged("errorType");
                }
            }
        }
        private string _errorType;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
