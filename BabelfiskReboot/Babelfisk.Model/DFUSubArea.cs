//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(L_DFUArea))]
    public partial class DFUSubArea: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int dfuSubAreaId
        {
            get { return _dfuSubAreaId; }
            set
            {
                if (_dfuSubAreaId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'dfuSubAreaId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dfuSubAreaId = value;
                    OnPropertyChanged("dfuSubAreaId");
                }
            }
        }
        private int _dfuSubAreaId;
    
        [DataMember]
        public string DFUArea
        {
            get { return _dFUArea; }
            set
            {
                if (_dFUArea != value)
                {
                    ChangeTracker.RecordOriginalValue("DFUArea", _dFUArea);
                    if (!IsDeserializing)
                    {
                        if (L_DFUArea != null && L_DFUArea.DFUArea != value)
                        {
                            L_DFUArea = null;
                        }
                    }
                    _dFUArea = value;
                    OnPropertyChanged("DFUArea");
                }
            }
        }
        private string _dFUArea;
    
        [DataMember]
        public string northDefinitionLatitudeText
        {
            get { return _northDefinitionLatitudeText; }
            set
            {
                if (_northDefinitionLatitudeText != value)
                {
                    _northDefinitionLatitudeText = value;
                    OnPropertyChanged("northDefinitionLatitudeText");
                }
            }
        }
        private string _northDefinitionLatitudeText;
    
        [DataMember]
        public string southDefinitionLatitudeText
        {
            get { return _southDefinitionLatitudeText; }
            set
            {
                if (_southDefinitionLatitudeText != value)
                {
                    _southDefinitionLatitudeText = value;
                    OnPropertyChanged("southDefinitionLatitudeText");
                }
            }
        }
        private string _southDefinitionLatitudeText;
    
        [DataMember]
        public string westDefinitionLongitudeText
        {
            get { return _westDefinitionLongitudeText; }
            set
            {
                if (_westDefinitionLongitudeText != value)
                {
                    _westDefinitionLongitudeText = value;
                    OnPropertyChanged("westDefinitionLongitudeText");
                }
            }
        }
        private string _westDefinitionLongitudeText;
    
        [DataMember]
        public string eastDefinitionLongitudeText
        {
            get { return _eastDefinitionLongitudeText; }
            set
            {
                if (_eastDefinitionLongitudeText != value)
                {
                    _eastDefinitionLongitudeText = value;
                    OnPropertyChanged("eastDefinitionLongitudeText");
                }
            }
        }
        private string _eastDefinitionLongitudeText;
    
        [DataMember]
        public string SubAreaType
        {
            get { return _subAreaType; }
            set
            {
                if (_subAreaType != value)
                {
                    _subAreaType = value;
                    OnPropertyChanged("SubAreaType");
                }
            }
        }
        private string _subAreaType;
    
        [DataMember]
        public decimal northDefinitionLatitudeDec
        {
            get { return _northDefinitionLatitudeDec; }
            set
            {
                if (_northDefinitionLatitudeDec != value)
                {
                    _northDefinitionLatitudeDec = value;
                    OnPropertyChanged("northDefinitionLatitudeDec");
                }
            }
        }
        private decimal _northDefinitionLatitudeDec;
    
        [DataMember]
        public decimal southDefinitionLatitudeDec
        {
            get { return _southDefinitionLatitudeDec; }
            set
            {
                if (_southDefinitionLatitudeDec != value)
                {
                    _southDefinitionLatitudeDec = value;
                    OnPropertyChanged("southDefinitionLatitudeDec");
                }
            }
        }
        private decimal _southDefinitionLatitudeDec;
    
        [DataMember]
        public decimal westDefinitionLongitudeDec
        {
            get { return _westDefinitionLongitudeDec; }
            set
            {
                if (_westDefinitionLongitudeDec != value)
                {
                    _westDefinitionLongitudeDec = value;
                    OnPropertyChanged("westDefinitionLongitudeDec");
                }
            }
        }
        private decimal _westDefinitionLongitudeDec;
    
        [DataMember]
        public decimal eastDefinitionLongitudeDec
        {
            get { return _eastDefinitionLongitudeDec; }
            set
            {
                if (_eastDefinitionLongitudeDec != value)
                {
                    _eastDefinitionLongitudeDec = value;
                    OnPropertyChanged("eastDefinitionLongitudeDec");
                }
            }
        }
        private decimal _eastDefinitionLongitudeDec;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public L_DFUArea L_DFUArea
        {
            get { return _l_DFUArea; }
            set
            {
                if (!ReferenceEquals(_l_DFUArea, value))
                {
                    var previousValue = _l_DFUArea;
                    _l_DFUArea = value;
                    FixupL_DFUArea(previousValue);
                    OnNavigationPropertyChanged("L_DFUArea");
                }
            }
        }
        private L_DFUArea _l_DFUArea;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            L_DFUArea = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupL_DFUArea(L_DFUArea previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DFUSubArea.Contains(this))
            {
                previousValue.DFUSubArea.Remove(this);
            }
    
            if (L_DFUArea != null)
            {
                if (!L_DFUArea.DFUSubArea.Contains(this))
                {
                    L_DFUArea.DFUSubArea.Add(this);
                }
    
                DFUArea = L_DFUArea.DFUArea;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_DFUArea")
                    && (ChangeTracker.OriginalValues["L_DFUArea"] == L_DFUArea))
                {
                    ChangeTracker.OriginalValues.Remove("L_DFUArea");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_DFUArea", previousValue);
                }
                if (L_DFUArea != null && !L_DFUArea.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_DFUArea.StartTracking();
                }
            }
        }

        #endregion

    }
}
