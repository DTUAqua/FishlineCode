//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DFUSubArea))]
    [KnownType(typeof(L_DFUArea))]
    [KnownType(typeof(Sample))]
    [KnownType(typeof(R_StockSpeciesArea))]
    [KnownType(typeof(SDEvent))]
    public partial class L_DFUArea: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int L_DFUAreaId
        {
            get { return _l_DFUAreaId; }
            set
            {
                if (_l_DFUAreaId != value)
                {
                    _l_DFUAreaId = value;
                    OnPropertyChanged("L_DFUAreaId");
                }
            }
        }
        private int _l_DFUAreaId;
    
        [DataMember]
        public string DFUArea
        {
            get { return _dFUArea; }
            set
            {
                if (_dFUArea != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DFUArea' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dFUArea = value;
                    OnPropertyChanged("DFUArea");
                }
            }
        }
        private string _dFUArea;
    
        [DataMember]
        public string description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string parentDFUArea
        {
            get { return _parentDFUArea; }
            set
            {
                if (_parentDFUArea != value)
                {
                    ChangeTracker.RecordOriginalValue("parentDFUArea", _parentDFUArea);
                    if (!IsDeserializing)
                    {
                        if (L_DFUArea2 != null && L_DFUArea2.DFUArea != value)
                        {
                            L_DFUArea2 = null;
                        }
                    }
                    _parentDFUArea = value;
                    OnPropertyChanged("parentDFUArea");
                }
            }
        }
        private string _parentDFUArea;
    
        [DataMember]
        public string areaNES
        {
            get { return _areaNES; }
            set
            {
                if (_areaNES != value)
                {
                    _areaNES = value;
                    OnPropertyChanged("areaNES");
                }
            }
        }
        private string _areaNES;
    
        [DataMember]
        public string areaICES
        {
            get { return _areaICES; }
            set
            {
                if (_areaICES != value)
                {
                    _areaICES = value;
                    OnPropertyChanged("areaICES");
                }
            }
        }
        private string _areaICES;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<DFUSubArea> DFUSubArea
        {
            get
            {
                if (_dFUSubArea == null)
                {
                    _dFUSubArea = new TrackableCollection<DFUSubArea>();
                    _dFUSubArea.CollectionChanged += FixupDFUSubArea;
                }
                return _dFUSubArea;
            }
            set
            {
                if (!ReferenceEquals(_dFUSubArea, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dFUSubArea != null)
                    {
                        _dFUSubArea.CollectionChanged -= FixupDFUSubArea;
                    }
                    _dFUSubArea = value;
                    if (_dFUSubArea != null)
                    {
                        _dFUSubArea.CollectionChanged += FixupDFUSubArea;
                    }
                    OnNavigationPropertyChanged("DFUSubArea");
                }
            }
        }
        private TrackableCollection<DFUSubArea> _dFUSubArea;
    
        [DataMember]
        public TrackableCollection<L_DFUArea> L_DFUArea1
        {
            get
            {
                if (_l_DFUArea1 == null)
                {
                    _l_DFUArea1 = new TrackableCollection<L_DFUArea>();
                    _l_DFUArea1.CollectionChanged += FixupL_DFUArea1;
                }
                return _l_DFUArea1;
            }
            set
            {
                if (!ReferenceEquals(_l_DFUArea1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_l_DFUArea1 != null)
                    {
                        _l_DFUArea1.CollectionChanged -= FixupL_DFUArea1;
                    }
                    _l_DFUArea1 = value;
                    if (_l_DFUArea1 != null)
                    {
                        _l_DFUArea1.CollectionChanged += FixupL_DFUArea1;
                    }
                    OnNavigationPropertyChanged("L_DFUArea1");
                }
            }
        }
        private TrackableCollection<L_DFUArea> _l_DFUArea1;
    
        [DataMember]
        public L_DFUArea L_DFUArea2
        {
            get { return _l_DFUArea2; }
            set
            {
                if (!ReferenceEquals(_l_DFUArea2, value))
                {
                    var previousValue = _l_DFUArea2;
                    _l_DFUArea2 = value;
                    FixupL_DFUArea2(previousValue);
                    OnNavigationPropertyChanged("L_DFUArea2");
                }
            }
        }
        private L_DFUArea _l_DFUArea2;
    
        [DataMember]
        public TrackableCollection<Sample> Sample
        {
            get
            {
                if (_sample == null)
                {
                    _sample = new TrackableCollection<Sample>();
                    _sample.CollectionChanged += FixupSample;
                }
                return _sample;
            }
            set
            {
                if (!ReferenceEquals(_sample, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sample != null)
                    {
                        _sample.CollectionChanged -= FixupSample;
                    }
                    _sample = value;
                    if (_sample != null)
                    {
                        _sample.CollectionChanged += FixupSample;
                    }
                    OnNavigationPropertyChanged("Sample");
                }
            }
        }
        private TrackableCollection<Sample> _sample;
    
        [DataMember]
        public TrackableCollection<R_StockSpeciesArea> R_StockSpeciesArea
        {
            get
            {
                if (_r_StockSpeciesArea == null)
                {
                    _r_StockSpeciesArea = new TrackableCollection<R_StockSpeciesArea>();
                    _r_StockSpeciesArea.CollectionChanged += FixupR_StockSpeciesArea;
                }
                return _r_StockSpeciesArea;
            }
            set
            {
                if (!ReferenceEquals(_r_StockSpeciesArea, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_r_StockSpeciesArea != null)
                    {
                        _r_StockSpeciesArea.CollectionChanged -= FixupR_StockSpeciesArea;
                    }
                    _r_StockSpeciesArea = value;
                    if (_r_StockSpeciesArea != null)
                    {
                        _r_StockSpeciesArea.CollectionChanged += FixupR_StockSpeciesArea;
                    }
                    OnNavigationPropertyChanged("R_StockSpeciesArea");
                }
            }
        }
        private TrackableCollection<R_StockSpeciesArea> _r_StockSpeciesArea;
    
        [DataMember]
        public TrackableCollection<SDEvent> SDEvent
        {
            get
            {
                if (_sDEvent == null)
                {
                    _sDEvent = new TrackableCollection<SDEvent>();
                    _sDEvent.CollectionChanged += FixupSDEvent;
                }
                return _sDEvent;
            }
            set
            {
                if (!ReferenceEquals(_sDEvent, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sDEvent != null)
                    {
                        _sDEvent.CollectionChanged -= FixupSDEvent;
                    }
                    _sDEvent = value;
                    if (_sDEvent != null)
                    {
                        _sDEvent.CollectionChanged += FixupSDEvent;
                    }
                    OnNavigationPropertyChanged("SDEvent");
                }
            }
        }
        private TrackableCollection<SDEvent> _sDEvent;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DFUSubArea.Clear();
            L_DFUArea1.Clear();
            L_DFUArea2 = null;
            Sample.Clear();
            R_StockSpeciesArea.Clear();
            SDEvent.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupL_DFUArea2(L_DFUArea previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.L_DFUArea1.Contains(this))
            {
                previousValue.L_DFUArea1.Remove(this);
            }
    
            if (L_DFUArea2 != null)
            {
                if (!L_DFUArea2.L_DFUArea1.Contains(this))
                {
                    L_DFUArea2.L_DFUArea1.Add(this);
                }
    
                parentDFUArea = L_DFUArea2.DFUArea;
            }
            else if (!skipKeys)
            {
                parentDFUArea = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_DFUArea2")
                    && (ChangeTracker.OriginalValues["L_DFUArea2"] == L_DFUArea2))
                {
                    ChangeTracker.OriginalValues.Remove("L_DFUArea2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_DFUArea2", previousValue);
                }
                if (L_DFUArea2 != null && !L_DFUArea2.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_DFUArea2.StartTracking();
                }
            }
        }
    
        private void FixupDFUSubArea(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DFUSubArea item in e.NewItems)
                {
                    item.L_DFUArea = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DFUSubArea", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DFUSubArea item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_DFUArea, this))
                    {
                        item.L_DFUArea = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DFUSubArea", item);
                    }
                }
            }
        }
    
        private void FixupL_DFUArea1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (L_DFUArea item in e.NewItems)
                {
                    item.L_DFUArea2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("L_DFUArea1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (L_DFUArea item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_DFUArea2, this))
                    {
                        item.L_DFUArea2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("L_DFUArea1", item);
                    }
                }
            }
        }
    
        private void FixupSample(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Sample item in e.NewItems)
                {
                    item.L_DFUArea = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Sample", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Sample item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_DFUArea, this))
                    {
                        item.L_DFUArea = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Sample", item);
                    }
                }
            }
        }
    
        private void FixupR_StockSpeciesArea(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_StockSpeciesArea item in e.NewItems)
                {
                    item.L_DFUArea = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_StockSpeciesArea", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_StockSpeciesArea item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_DFUArea, this))
                    {
                        item.L_DFUArea = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_StockSpeciesArea", item);
                    }
                }
            }
        }
    
        private void FixupSDEvent(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SDEvent item in e.NewItems)
                {
                    if (!item.L_DFUAreas.Contains(this))
                    {
                        item.L_DFUAreas.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SDEvent", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SDEvent item in e.OldItems)
                {
                    if (item.L_DFUAreas.Contains(this))
                    {
                        item.L_DFUAreas.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SDEvent", item);
                    }
                }
            }
        }

        #endregion

    }
}
