//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(L_Treatment))]
    [KnownType(typeof(L_TreatmentFactorGroup))]
    public partial class TreatmentFactor: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int treatmentFactorId
        {
            get { return _treatmentFactorId; }
            set
            {
                if (_treatmentFactorId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'treatmentFactorId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _treatmentFactorId = value;
                    OnPropertyChanged("treatmentFactorId");
                }
            }
        }
        private int _treatmentFactorId;
    
        [DataMember]
        public string treatmentFactorGroup
        {
            get { return _treatmentFactorGroup; }
            set
            {
                if (_treatmentFactorGroup != value)
                {
                    ChangeTracker.RecordOriginalValue("treatmentFactorGroup", _treatmentFactorGroup);
                    if (!IsDeserializing)
                    {
                        if (L_TreatmentFactorGroup != null && L_TreatmentFactorGroup.treatmentFactorGroup != value)
                        {
                            L_TreatmentFactorGroup = null;
                        }
                    }
                    _treatmentFactorGroup = value;
                    OnPropertyChanged("treatmentFactorGroup");
                }
            }
        }
        private string _treatmentFactorGroup;
    
        [DataMember]
        public string treatment
        {
            get { return _treatment; }
            set
            {
                if (_treatment != value)
                {
                    ChangeTracker.RecordOriginalValue("treatment", _treatment);
                    if (!IsDeserializing)
                    {
                        if (L_Treatment != null && L_Treatment.treatment != value)
                        {
                            L_Treatment = null;
                        }
                    }
                    _treatment = value;
                    OnPropertyChanged("treatment");
                }
            }
        }
        private string _treatment;
    
        [DataMember]
        public decimal factor
        {
            get { return _factor; }
            set
            {
                if (_factor != value)
                {
                    _factor = value;
                    OnPropertyChanged("factor");
                }
            }
        }
        private decimal _factor;
    
        [DataMember]
        public string description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public System.DateTime versioningDate
        {
            get { return _versioningDate; }
            set
            {
                if (_versioningDate != value)
                {
                    _versioningDate = value;
                    OnPropertyChanged("versioningDate");
                }
            }
        }
        private System.DateTime _versioningDate;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public L_Treatment L_Treatment
        {
            get { return _l_Treatment; }
            set
            {
                if (!ReferenceEquals(_l_Treatment, value))
                {
                    var previousValue = _l_Treatment;
                    _l_Treatment = value;
                    FixupL_Treatment(previousValue);
                    OnNavigationPropertyChanged("L_Treatment");
                }
            }
        }
        private L_Treatment _l_Treatment;
    
        [DataMember]
        public L_TreatmentFactorGroup L_TreatmentFactorGroup
        {
            get { return _l_TreatmentFactorGroup; }
            set
            {
                if (!ReferenceEquals(_l_TreatmentFactorGroup, value))
                {
                    var previousValue = _l_TreatmentFactorGroup;
                    _l_TreatmentFactorGroup = value;
                    FixupL_TreatmentFactorGroup(previousValue);
                    OnNavigationPropertyChanged("L_TreatmentFactorGroup");
                }
            }
        }
        private L_TreatmentFactorGroup _l_TreatmentFactorGroup;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            L_Treatment = null;
            L_TreatmentFactorGroup = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupL_Treatment(L_Treatment previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TreatmentFactor.Contains(this))
            {
                previousValue.TreatmentFactor.Remove(this);
            }
    
            if (L_Treatment != null)
            {
                if (!L_Treatment.TreatmentFactor.Contains(this))
                {
                    L_Treatment.TreatmentFactor.Add(this);
                }
    
                treatment = L_Treatment.treatment;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Treatment")
                    && (ChangeTracker.OriginalValues["L_Treatment"] == L_Treatment))
                {
                    ChangeTracker.OriginalValues.Remove("L_Treatment");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Treatment", previousValue);
                }
                if (L_Treatment != null && !L_Treatment.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Treatment.StartTracking();
                }
            }
        }
    
        private void FixupL_TreatmentFactorGroup(L_TreatmentFactorGroup previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TreatmentFactor.Contains(this))
            {
                previousValue.TreatmentFactor.Remove(this);
            }
    
            if (L_TreatmentFactorGroup != null)
            {
                if (!L_TreatmentFactorGroup.TreatmentFactor.Contains(this))
                {
                    L_TreatmentFactorGroup.TreatmentFactor.Add(this);
                }
    
                treatmentFactorGroup = L_TreatmentFactorGroup.treatmentFactorGroup;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_TreatmentFactorGroup")
                    && (ChangeTracker.OriginalValues["L_TreatmentFactorGroup"] == L_TreatmentFactorGroup))
                {
                    ChangeTracker.OriginalValues.Remove("L_TreatmentFactorGroup");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_TreatmentFactorGroup", previousValue);
                }
                if (L_TreatmentFactorGroup != null && !L_TreatmentFactorGroup.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_TreatmentFactorGroup.StartTracking();
                }
            }
        }

        #endregion

    }
}
