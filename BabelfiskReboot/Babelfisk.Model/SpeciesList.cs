//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DFUPerson))]
    [KnownType(typeof(L_CuticulaHardness))]
    [KnownType(typeof(L_DFUBase_Category))]
    [KnownType(typeof(L_LandingCategory))]
    [KnownType(typeof(L_SexCode))]
    [KnownType(typeof(L_SizeSortingDFU))]
    [KnownType(typeof(L_SizeSortingEU))]
    [KnownType(typeof(L_Species))]
    [KnownType(typeof(L_Treatment))]
    [KnownType(typeof(Sample))]
    [KnownType(typeof(SubSample))]
    [KnownType(typeof(L_WeightEstimationMethod))]
    [KnownType(typeof(L_Application))]
    public partial class SpeciesList: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int speciesListId
        {
            get { return _speciesListId; }
            set
            {
                if (_speciesListId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'speciesListId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _speciesListId = value;
                    OnPropertyChanged("speciesListId");
                }
            }
        }
        private int _speciesListId;
    
        [DataMember]
        public int sampleId
        {
            get { return _sampleId; }
            set
            {
                if (_sampleId != value)
                {
                    ChangeTracker.RecordOriginalValue("sampleId", _sampleId);
                    if (!IsDeserializing)
                    {
                        if (Sample != null && Sample.sampleId != value)
                        {
                            Sample = null;
                        }
                    }
                    _sampleId = value;
                    OnPropertyChanged("sampleId");
                }
            }
        }
        private int _sampleId;
    
        [DataMember]
        public string speciesCode
        {
            get { return _speciesCode; }
            set
            {
                if (_speciesCode != value)
                {
                    ChangeTracker.RecordOriginalValue("speciesCode", _speciesCode);
                    if (!IsDeserializing)
                    {
                        if (L_Species != null && L_Species.speciesCode != value)
                        {
                            L_Species = null;
                        }
                    }
                    _speciesCode = value;
                    OnPropertyChanged("speciesCode");
                }
            }
        }
        private string _speciesCode;
    
        [DataMember]
        public string landingCategory
        {
            get { return _landingCategory; }
            set
            {
                if (_landingCategory != value)
                {
                    ChangeTracker.RecordOriginalValue("landingCategory", _landingCategory);
                    if (!IsDeserializing)
                    {
                        if (L_LandingCategory != null && L_LandingCategory.landingCategory != value)
                        {
                            L_LandingCategory = null;
                        }
                    }
                    _landingCategory = value;
                    OnPropertyChanged("landingCategory");
                }
            }
        }
        private string _landingCategory;
    
        [DataMember]
        public string dfuBase_Category
        {
            get { return _dfuBase_Category; }
            set
            {
                if (_dfuBase_Category != value)
                {
                    ChangeTracker.RecordOriginalValue("dfuBase_Category", _dfuBase_Category);
                    if (!IsDeserializing)
                    {
                        if (L_DFUBase_Category != null && L_DFUBase_Category.dfuBase_Category != value)
                        {
                            L_DFUBase_Category = null;
                        }
                    }
                    _dfuBase_Category = value;
                    OnPropertyChanged("dfuBase_Category");
                }
            }
        }
        private string _dfuBase_Category;
    
        [DataMember]
        public Nullable<int> sizeSortingEU
        {
            get { return _sizeSortingEU; }
            set
            {
                if (_sizeSortingEU != value)
                {
                    ChangeTracker.RecordOriginalValue("sizeSortingEU", _sizeSortingEU);
                    if (!IsDeserializing)
                    {
                        if (L_SizeSortingEU != null && L_SizeSortingEU.sizeSortingEU != value)
                        {
                            L_SizeSortingEU = null;
                        }
                    }
                    _sizeSortingEU = value;
                    OnPropertyChanged("sizeSortingEU");
                }
            }
        }
        private Nullable<int> _sizeSortingEU;
    
        [DataMember]
        public string sizeSortingDFU
        {
            get { return _sizeSortingDFU; }
            set
            {
                if (_sizeSortingDFU != value)
                {
                    ChangeTracker.RecordOriginalValue("sizeSortingDFU", _sizeSortingDFU);
                    if (!IsDeserializing)
                    {
                        if (L_SizeSortingDFU != null && L_SizeSortingDFU.sizeSortingDFU != value)
                        {
                            L_SizeSortingDFU = null;
                        }
                    }
                    _sizeSortingDFU = value;
                    OnPropertyChanged("sizeSortingDFU");
                }
            }
        }
        private string _sizeSortingDFU;
    
        [DataMember]
        public string sexCode
        {
            get { return _sexCode; }
            set
            {
                if (_sexCode != value)
                {
                    ChangeTracker.RecordOriginalValue("sexCode", _sexCode);
                    if (!IsDeserializing)
                    {
                        if (L_SexCode != null && L_SexCode.sexCode != value)
                        {
                            L_SexCode = null;
                        }
                    }
                    _sexCode = value;
                    OnPropertyChanged("sexCode");
                }
            }
        }
        private string _sexCode;
    
        [DataMember]
        public string ovigorous
        {
            get { return _ovigorous; }
            set
            {
                if (_ovigorous != value)
                {
                    _ovigorous = value;
                    OnPropertyChanged("ovigorous");
                }
            }
        }
        private string _ovigorous;
    
        [DataMember]
        public string cuticulaHardness
        {
            get { return _cuticulaHardness; }
            set
            {
                if (_cuticulaHardness != value)
                {
                    ChangeTracker.RecordOriginalValue("cuticulaHardness", _cuticulaHardness);
                    if (!IsDeserializing)
                    {
                        if (L_CuticulaHardness != null && L_CuticulaHardness.cuticulaHardness != value)
                        {
                            L_CuticulaHardness = null;
                        }
                    }
                    _cuticulaHardness = value;
                    OnPropertyChanged("cuticulaHardness");
                }
            }
        }
        private string _cuticulaHardness;
    
        [DataMember]
        public Nullable<int> dfuBase_ArtRecordId
        {
            get { return _dfuBase_ArtRecordId; }
            set
            {
                if (_dfuBase_ArtRecordId != value)
                {
                    _dfuBase_ArtRecordId = value;
                    OnPropertyChanged("dfuBase_ArtRecordId");
                }
            }
        }
        private Nullable<int> _dfuBase_ArtRecordId;
    
        [DataMember]
        public string treatment
        {
            get { return _treatment; }
            set
            {
                if (_treatment != value)
                {
                    ChangeTracker.RecordOriginalValue("treatment", _treatment);
                    if (!IsDeserializing)
                    {
                        if (L_Treatment != null && L_Treatment.treatment != value)
                        {
                            L_Treatment = null;
                        }
                    }
                    _treatment = value;
                    OnPropertyChanged("treatment");
                }
            }
        }
        private string _treatment;
    
        [DataMember]
        public Nullable<int> agePlusGroup
        {
            get { return _agePlusGroup; }
            set
            {
                if (_agePlusGroup != value)
                {
                    _agePlusGroup = value;
                    OnPropertyChanged("agePlusGroup");
                }
            }
        }
        private Nullable<int> _agePlusGroup;
    
        [DataMember]
        public Nullable<int> ageReadId
        {
            get { return _ageReadId; }
            set
            {
                if (_ageReadId != value)
                {
                    ChangeTracker.RecordOriginalValue("ageReadId", _ageReadId);
                    if (!IsDeserializing)
                    {
                        if (DFUPerson != null && DFUPerson.dfuPersonId != value)
                        {
                            DFUPerson = null;
                        }
                    }
                    _ageReadId = value;
                    OnPropertyChanged("ageReadId");
                }
            }
        }
        private Nullable<int> _ageReadId;
    
        [DataMember]
        public Nullable<int> datahandlerId
        {
            get { return _datahandlerId; }
            set
            {
                if (_datahandlerId != value)
                {
                    ChangeTracker.RecordOriginalValue("datahandlerId", _datahandlerId);
                    if (!IsDeserializing)
                    {
                        if (DFUPerson1 != null && DFUPerson1.dfuPersonId != value)
                        {
                            DFUPerson1 = null;
                        }
                    }
                    _datahandlerId = value;
                    OnPropertyChanged("datahandlerId");
                }
            }
        }
        private Nullable<int> _datahandlerId;
    
        [DataMember]
        public Nullable<int> stockId
        {
            get { return _stockId; }
            set
            {
                if (_stockId != value)
                {
                    _stockId = value;
                    OnPropertyChanged("stockId");
                }
            }
        }
        private Nullable<int> _stockId;
    
        [DataMember]
        public string remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public Nullable<int> number
        {
            get { return _number; }
            set
            {
                if (_number != value)
                {
                    _number = value;
                    OnPropertyChanged("number");
                }
            }
        }
        private Nullable<int> _number;
    
        [DataMember]
        public Nullable<decimal> bmsNonRep
        {
            get { return _bmsNonRep; }
            set
            {
                if (_bmsNonRep != value)
                {
                    _bmsNonRep = value;
                    OnPropertyChanged("bmsNonRep");
                }
            }
        }
        private Nullable<decimal> _bmsNonRep;
    
        [DataMember]
        public string weightEstimationMethod
        {
            get { return _weightEstimationMethod; }
            set
            {
                if (_weightEstimationMethod != value)
                {
                    ChangeTracker.RecordOriginalValue("weightEstimationMethod", _weightEstimationMethod);
                    if (!IsDeserializing)
                    {
                        if (L_WeightEstimationMethod != null && L_WeightEstimationMethod.weightEstimationMethod != value)
                        {
                            L_WeightEstimationMethod = null;
                        }
                    }
                    _weightEstimationMethod = value;
                    OnPropertyChanged("weightEstimationMethod");
                }
            }
        }
        private string _weightEstimationMethod;
    
        [DataMember]
        public Nullable<int> hatchMonthReaderId
        {
            get { return _hatchMonthReaderId; }
            set
            {
                if (_hatchMonthReaderId != value)
                {
                    ChangeTracker.RecordOriginalValue("hatchMonthReaderId", _hatchMonthReaderId);
                    if (!IsDeserializing)
                    {
                        if (HatchMontReader != null && HatchMontReader.dfuPersonId != value)
                        {
                            HatchMontReader = null;
                        }
                    }
                    _hatchMonthReaderId = value;
                    OnPropertyChanged("hatchMonthReaderId");
                }
            }
        }
        private Nullable<int> _hatchMonthReaderId;
    
        [DataMember]
        public Nullable<int> maturityReaderId
        {
            get { return _maturityReaderId; }
            set
            {
                if (_maturityReaderId != value)
                {
                    ChangeTracker.RecordOriginalValue("maturityReaderId", _maturityReaderId);
                    if (!IsDeserializing)
                    {
                        if (MaturityReader != null && MaturityReader.dfuPersonId != value)
                        {
                            MaturityReader = null;
                        }
                    }
                    _maturityReaderId = value;
                    OnPropertyChanged("maturityReaderId");
                }
            }
        }
        private Nullable<int> _maturityReaderId;
    
        [DataMember]
        public Nullable<int> applicationId
        {
            get { return _applicationId; }
            set
            {
                if (_applicationId != value)
                {
                    ChangeTracker.RecordOriginalValue("applicationId", _applicationId);
                    if (!IsDeserializing)
                    {
                        if (L_Application != null && L_Application.L_applicationId != value)
                        {
                            L_Application = null;
                        }
                    }
                    _applicationId = value;
                    OnPropertyChanged("applicationId");
                }
            }
        }
        private Nullable<int> _applicationId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public DFUPerson DFUPerson
        {
            get { return _dFUPerson; }
            set
            {
                if (!ReferenceEquals(_dFUPerson, value))
                {
                    var previousValue = _dFUPerson;
                    _dFUPerson = value;
                    FixupDFUPerson(previousValue);
                    OnNavigationPropertyChanged("DFUPerson");
                }
            }
        }
        private DFUPerson _dFUPerson;
    
        [DataMember]
        public DFUPerson DFUPerson1
        {
            get { return _dFUPerson1; }
            set
            {
                if (!ReferenceEquals(_dFUPerson1, value))
                {
                    var previousValue = _dFUPerson1;
                    _dFUPerson1 = value;
                    FixupDFUPerson1(previousValue);
                    OnNavigationPropertyChanged("DFUPerson1");
                }
            }
        }
        private DFUPerson _dFUPerson1;
    
        [DataMember]
        public L_CuticulaHardness L_CuticulaHardness
        {
            get { return _l_CuticulaHardness; }
            set
            {
                if (!ReferenceEquals(_l_CuticulaHardness, value))
                {
                    var previousValue = _l_CuticulaHardness;
                    _l_CuticulaHardness = value;
                    FixupL_CuticulaHardness(previousValue);
                    OnNavigationPropertyChanged("L_CuticulaHardness");
                }
            }
        }
        private L_CuticulaHardness _l_CuticulaHardness;
    
        [DataMember]
        public L_DFUBase_Category L_DFUBase_Category
        {
            get { return _l_DFUBase_Category; }
            set
            {
                if (!ReferenceEquals(_l_DFUBase_Category, value))
                {
                    var previousValue = _l_DFUBase_Category;
                    _l_DFUBase_Category = value;
                    FixupL_DFUBase_Category(previousValue);
                    OnNavigationPropertyChanged("L_DFUBase_Category");
                }
            }
        }
        private L_DFUBase_Category _l_DFUBase_Category;
    
        [DataMember]
        public L_LandingCategory L_LandingCategory
        {
            get { return _l_LandingCategory; }
            set
            {
                if (!ReferenceEquals(_l_LandingCategory, value))
                {
                    var previousValue = _l_LandingCategory;
                    _l_LandingCategory = value;
                    FixupL_LandingCategory(previousValue);
                    OnNavigationPropertyChanged("L_LandingCategory");
                }
            }
        }
        private L_LandingCategory _l_LandingCategory;
    
        [DataMember]
        public L_SexCode L_SexCode
        {
            get { return _l_SexCode; }
            set
            {
                if (!ReferenceEquals(_l_SexCode, value))
                {
                    var previousValue = _l_SexCode;
                    _l_SexCode = value;
                    FixupL_SexCode(previousValue);
                    OnNavigationPropertyChanged("L_SexCode");
                }
            }
        }
        private L_SexCode _l_SexCode;
    
        [DataMember]
        public L_SizeSortingDFU L_SizeSortingDFU
        {
            get { return _l_SizeSortingDFU; }
            set
            {
                if (!ReferenceEquals(_l_SizeSortingDFU, value))
                {
                    var previousValue = _l_SizeSortingDFU;
                    _l_SizeSortingDFU = value;
                    FixupL_SizeSortingDFU(previousValue);
                    OnNavigationPropertyChanged("L_SizeSortingDFU");
                }
            }
        }
        private L_SizeSortingDFU _l_SizeSortingDFU;
    
        [DataMember]
        public L_SizeSortingEU L_SizeSortingEU
        {
            get { return _l_SizeSortingEU; }
            set
            {
                if (!ReferenceEquals(_l_SizeSortingEU, value))
                {
                    var previousValue = _l_SizeSortingEU;
                    _l_SizeSortingEU = value;
                    FixupL_SizeSortingEU(previousValue);
                    OnNavigationPropertyChanged("L_SizeSortingEU");
                }
            }
        }
        private L_SizeSortingEU _l_SizeSortingEU;
    
        [DataMember]
        public L_Species L_Species
        {
            get { return _l_Species; }
            set
            {
                if (!ReferenceEquals(_l_Species, value))
                {
                    var previousValue = _l_Species;
                    _l_Species = value;
                    FixupL_Species(previousValue);
                    OnNavigationPropertyChanged("L_Species");
                }
            }
        }
        private L_Species _l_Species;
    
        [DataMember]
        public L_Treatment L_Treatment
        {
            get { return _l_Treatment; }
            set
            {
                if (!ReferenceEquals(_l_Treatment, value))
                {
                    var previousValue = _l_Treatment;
                    _l_Treatment = value;
                    FixupL_Treatment(previousValue);
                    OnNavigationPropertyChanged("L_Treatment");
                }
            }
        }
        private L_Treatment _l_Treatment;
    
        [DataMember]
        public Sample Sample
        {
            get { return _sample; }
            set
            {
                if (!ReferenceEquals(_sample, value))
                {
                    var previousValue = _sample;
                    _sample = value;
                    FixupSample(previousValue);
                    OnNavigationPropertyChanged("Sample");
                }
            }
        }
        private Sample _sample;
    
        [DataMember]
        public TrackableCollection<SubSample> SubSample
        {
            get
            {
                if (_subSample == null)
                {
                    _subSample = new TrackableCollection<SubSample>();
                    _subSample.CollectionChanged += FixupSubSample;
                }
                return _subSample;
            }
            set
            {
                if (!ReferenceEquals(_subSample, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_subSample != null)
                    {
                        _subSample.CollectionChanged -= FixupSubSample;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (SubSample item in _subSample)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _subSample = value;
                    if (_subSample != null)
                    {
                        _subSample.CollectionChanged += FixupSubSample;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (SubSample item in _subSample)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("SubSample");
                }
            }
        }
        private TrackableCollection<SubSample> _subSample;
    
        [DataMember]
        public L_WeightEstimationMethod L_WeightEstimationMethod
        {
            get { return _l_WeightEstimationMethod; }
            set
            {
                if (!ReferenceEquals(_l_WeightEstimationMethod, value))
                {
                    var previousValue = _l_WeightEstimationMethod;
                    _l_WeightEstimationMethod = value;
                    FixupL_WeightEstimationMethod(previousValue);
                    OnNavigationPropertyChanged("L_WeightEstimationMethod");
                }
            }
        }
        private L_WeightEstimationMethod _l_WeightEstimationMethod;
    
        [DataMember]
        public DFUPerson MaturityReader
        {
            get { return _maturityReader; }
            set
            {
                if (!ReferenceEquals(_maturityReader, value))
                {
                    var previousValue = _maturityReader;
                    _maturityReader = value;
                    FixupMaturityReader(previousValue);
                    OnNavigationPropertyChanged("MaturityReader");
                }
            }
        }
        private DFUPerson _maturityReader;
    
        [DataMember]
        public DFUPerson HatchMontReader
        {
            get { return _hatchMontReader; }
            set
            {
                if (!ReferenceEquals(_hatchMontReader, value))
                {
                    var previousValue = _hatchMontReader;
                    _hatchMontReader = value;
                    FixupHatchMontReader(previousValue);
                    OnNavigationPropertyChanged("HatchMontReader");
                }
            }
        }
        private DFUPerson _hatchMontReader;
    
        [DataMember]
        public L_Application L_Application
        {
            get { return _l_Application; }
            set
            {
                if (!ReferenceEquals(_l_Application, value))
                {
                    var previousValue = _l_Application;
                    _l_Application = value;
                    FixupL_Application(previousValue);
                    OnNavigationPropertyChanged("L_Application");
                }
            }
        }
        private L_Application _l_Application;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DFUPerson = null;
            DFUPerson1 = null;
            L_CuticulaHardness = null;
            L_DFUBase_Category = null;
            L_LandingCategory = null;
            L_SexCode = null;
            L_SizeSortingDFU = null;
            L_SizeSortingEU = null;
            L_Species = null;
            L_Treatment = null;
            Sample = null;
            SubSample.Clear();
            L_WeightEstimationMethod = null;
            MaturityReader = null;
            HatchMontReader = null;
            L_Application = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupDFUPerson(DFUPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SpeciesList.Contains(this))
            {
                previousValue.SpeciesList.Remove(this);
            }
    
            if (DFUPerson != null)
            {
                if (!DFUPerson.SpeciesList.Contains(this))
                {
                    DFUPerson.SpeciesList.Add(this);
                }
    
                ageReadId = DFUPerson.dfuPersonId;
            }
            else if (!skipKeys)
            {
                ageReadId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DFUPerson")
                    && (ChangeTracker.OriginalValues["DFUPerson"] == DFUPerson))
                {
                    ChangeTracker.OriginalValues.Remove("DFUPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DFUPerson", previousValue);
                }
                if (DFUPerson != null && !DFUPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    DFUPerson.StartTracking();
                }
            }
        }
    
        private void FixupDFUPerson1(DFUPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SpeciesList1.Contains(this))
            {
                previousValue.SpeciesList1.Remove(this);
            }
    
            if (DFUPerson1 != null)
            {
                if (!DFUPerson1.SpeciesList1.Contains(this))
                {
                    DFUPerson1.SpeciesList1.Add(this);
                }
    
                datahandlerId = DFUPerson1.dfuPersonId;
            }
            else if (!skipKeys)
            {
                datahandlerId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DFUPerson1")
                    && (ChangeTracker.OriginalValues["DFUPerson1"] == DFUPerson1))
                {
                    ChangeTracker.OriginalValues.Remove("DFUPerson1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DFUPerson1", previousValue);
                }
                if (DFUPerson1 != null && !DFUPerson1.ChangeTracker.ChangeTrackingEnabled)
                {
                    DFUPerson1.StartTracking();
                }
            }
        }
    
        private void FixupL_CuticulaHardness(L_CuticulaHardness previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SpeciesList.Contains(this))
            {
                previousValue.SpeciesList.Remove(this);
            }
    
            if (L_CuticulaHardness != null)
            {
                if (!L_CuticulaHardness.SpeciesList.Contains(this))
                {
                    L_CuticulaHardness.SpeciesList.Add(this);
                }
    
                cuticulaHardness = L_CuticulaHardness.cuticulaHardness;
            }
            else if (!skipKeys)
            {
                cuticulaHardness = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_CuticulaHardness")
                    && (ChangeTracker.OriginalValues["L_CuticulaHardness"] == L_CuticulaHardness))
                {
                    ChangeTracker.OriginalValues.Remove("L_CuticulaHardness");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_CuticulaHardness", previousValue);
                }
                if (L_CuticulaHardness != null && !L_CuticulaHardness.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_CuticulaHardness.StartTracking();
                }
            }
        }
    
        private void FixupL_DFUBase_Category(L_DFUBase_Category previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SpeciesList.Contains(this))
            {
                previousValue.SpeciesList.Remove(this);
            }
    
            if (L_DFUBase_Category != null)
            {
                if (!L_DFUBase_Category.SpeciesList.Contains(this))
                {
                    L_DFUBase_Category.SpeciesList.Add(this);
                }
    
                dfuBase_Category = L_DFUBase_Category.dfuBase_Category;
            }
            else if (!skipKeys)
            {
                dfuBase_Category = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_DFUBase_Category")
                    && (ChangeTracker.OriginalValues["L_DFUBase_Category"] == L_DFUBase_Category))
                {
                    ChangeTracker.OriginalValues.Remove("L_DFUBase_Category");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_DFUBase_Category", previousValue);
                }
                if (L_DFUBase_Category != null && !L_DFUBase_Category.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_DFUBase_Category.StartTracking();
                }
            }
        }
    
        private void FixupL_LandingCategory(L_LandingCategory previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SpeciesList.Contains(this))
            {
                previousValue.SpeciesList.Remove(this);
            }
    
            if (L_LandingCategory != null)
            {
                if (!L_LandingCategory.SpeciesList.Contains(this))
                {
                    L_LandingCategory.SpeciesList.Add(this);
                }
    
                landingCategory = L_LandingCategory.landingCategory;
            }
            else if (!skipKeys)
            {
                landingCategory = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_LandingCategory")
                    && (ChangeTracker.OriginalValues["L_LandingCategory"] == L_LandingCategory))
                {
                    ChangeTracker.OriginalValues.Remove("L_LandingCategory");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_LandingCategory", previousValue);
                }
                if (L_LandingCategory != null && !L_LandingCategory.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_LandingCategory.StartTracking();
                }
            }
        }
    
        private void FixupL_SexCode(L_SexCode previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SpeciesList.Contains(this))
            {
                previousValue.SpeciesList.Remove(this);
            }
    
            if (L_SexCode != null)
            {
                if (!L_SexCode.SpeciesList.Contains(this))
                {
                    L_SexCode.SpeciesList.Add(this);
                }
    
                sexCode = L_SexCode.sexCode;
            }
            else if (!skipKeys)
            {
                sexCode = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SexCode")
                    && (ChangeTracker.OriginalValues["L_SexCode"] == L_SexCode))
                {
                    ChangeTracker.OriginalValues.Remove("L_SexCode");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SexCode", previousValue);
                }
                if (L_SexCode != null && !L_SexCode.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SexCode.StartTracking();
                }
            }
        }
    
        private void FixupL_SizeSortingDFU(L_SizeSortingDFU previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SpeciesList.Contains(this))
            {
                previousValue.SpeciesList.Remove(this);
            }
    
            if (L_SizeSortingDFU != null)
            {
                if (!L_SizeSortingDFU.SpeciesList.Contains(this))
                {
                    L_SizeSortingDFU.SpeciesList.Add(this);
                }
    
                sizeSortingDFU = L_SizeSortingDFU.sizeSortingDFU;
            }
            else if (!skipKeys)
            {
                sizeSortingDFU = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SizeSortingDFU")
                    && (ChangeTracker.OriginalValues["L_SizeSortingDFU"] == L_SizeSortingDFU))
                {
                    ChangeTracker.OriginalValues.Remove("L_SizeSortingDFU");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SizeSortingDFU", previousValue);
                }
                if (L_SizeSortingDFU != null && !L_SizeSortingDFU.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SizeSortingDFU.StartTracking();
                }
            }
        }
    
        private void FixupL_SizeSortingEU(L_SizeSortingEU previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SpeciesList.Contains(this))
            {
                previousValue.SpeciesList.Remove(this);
            }
    
            if (L_SizeSortingEU != null)
            {
                if (!L_SizeSortingEU.SpeciesList.Contains(this))
                {
                    L_SizeSortingEU.SpeciesList.Add(this);
                }
    
                sizeSortingEU = L_SizeSortingEU.sizeSortingEU;
            }
            else if (!skipKeys)
            {
                sizeSortingEU = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SizeSortingEU")
                    && (ChangeTracker.OriginalValues["L_SizeSortingEU"] == L_SizeSortingEU))
                {
                    ChangeTracker.OriginalValues.Remove("L_SizeSortingEU");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SizeSortingEU", previousValue);
                }
                if (L_SizeSortingEU != null && !L_SizeSortingEU.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SizeSortingEU.StartTracking();
                }
            }
        }
    
        private void FixupL_Species(L_Species previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SpeciesList.Contains(this))
            {
                previousValue.SpeciesList.Remove(this);
            }
    
            if (L_Species != null)
            {
                if (!L_Species.SpeciesList.Contains(this))
                {
                    L_Species.SpeciesList.Add(this);
                }
    
                speciesCode = L_Species.speciesCode;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Species")
                    && (ChangeTracker.OriginalValues["L_Species"] == L_Species))
                {
                    ChangeTracker.OriginalValues.Remove("L_Species");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Species", previousValue);
                }
                if (L_Species != null && !L_Species.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Species.StartTracking();
                }
            }
        }
    
        private void FixupL_Treatment(L_Treatment previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SpeciesList.Contains(this))
            {
                previousValue.SpeciesList.Remove(this);
            }
    
            if (L_Treatment != null)
            {
                if (!L_Treatment.SpeciesList.Contains(this))
                {
                    L_Treatment.SpeciesList.Add(this);
                }
    
                treatment = L_Treatment.treatment;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Treatment")
                    && (ChangeTracker.OriginalValues["L_Treatment"] == L_Treatment))
                {
                    ChangeTracker.OriginalValues.Remove("L_Treatment");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Treatment", previousValue);
                }
                if (L_Treatment != null && !L_Treatment.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Treatment.StartTracking();
                }
            }
        }
    
        private void FixupSample(Sample previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SpeciesList.Contains(this))
            {
                previousValue.SpeciesList.Remove(this);
            }
    
            if (Sample != null)
            {
                if (!Sample.SpeciesList.Contains(this))
                {
                    Sample.SpeciesList.Add(this);
                }
    
                sampleId = Sample.sampleId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Sample")
                    && (ChangeTracker.OriginalValues["Sample"] == Sample))
                {
                    ChangeTracker.OriginalValues.Remove("Sample");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Sample", previousValue);
                }
                if (Sample != null && !Sample.ChangeTracker.ChangeTrackingEnabled)
                {
                    Sample.StartTracking();
                }
            }
        }
    
        private void FixupL_WeightEstimationMethod(L_WeightEstimationMethod previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SpeciesList.Contains(this))
            {
                previousValue.SpeciesList.Remove(this);
            }
    
            if (L_WeightEstimationMethod != null)
            {
                if (!L_WeightEstimationMethod.SpeciesList.Contains(this))
                {
                    L_WeightEstimationMethod.SpeciesList.Add(this);
                }
    
                weightEstimationMethod = L_WeightEstimationMethod.weightEstimationMethod;
            }
            else if (!skipKeys)
            {
                weightEstimationMethod = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_WeightEstimationMethod")
                    && (ChangeTracker.OriginalValues["L_WeightEstimationMethod"] == L_WeightEstimationMethod))
                {
                    ChangeTracker.OriginalValues.Remove("L_WeightEstimationMethod");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_WeightEstimationMethod", previousValue);
                }
                if (L_WeightEstimationMethod != null && !L_WeightEstimationMethod.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_WeightEstimationMethod.StartTracking();
                }
            }
        }
    
        private void FixupMaturityReader(DFUPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SpeciesList_1.Contains(this))
            {
                previousValue.SpeciesList_1.Remove(this);
            }
    
            if (MaturityReader != null)
            {
                if (!MaturityReader.SpeciesList_1.Contains(this))
                {
                    MaturityReader.SpeciesList_1.Add(this);
                }
    
                maturityReaderId = MaturityReader.dfuPersonId;
            }
            else if (!skipKeys)
            {
                maturityReaderId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MaturityReader")
                    && (ChangeTracker.OriginalValues["MaturityReader"] == MaturityReader))
                {
                    ChangeTracker.OriginalValues.Remove("MaturityReader");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MaturityReader", previousValue);
                }
                if (MaturityReader != null && !MaturityReader.ChangeTracker.ChangeTrackingEnabled)
                {
                    MaturityReader.StartTracking();
                }
            }
        }
    
        private void FixupHatchMontReader(DFUPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SpeciesList1_1.Contains(this))
            {
                previousValue.SpeciesList1_1.Remove(this);
            }
    
            if (HatchMontReader != null)
            {
                if (!HatchMontReader.SpeciesList1_1.Contains(this))
                {
                    HatchMontReader.SpeciesList1_1.Add(this);
                }
    
                hatchMonthReaderId = HatchMontReader.dfuPersonId;
            }
            else if (!skipKeys)
            {
                hatchMonthReaderId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("HatchMontReader")
                    && (ChangeTracker.OriginalValues["HatchMontReader"] == HatchMontReader))
                {
                    ChangeTracker.OriginalValues.Remove("HatchMontReader");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("HatchMontReader", previousValue);
                }
                if (HatchMontReader != null && !HatchMontReader.ChangeTracker.ChangeTrackingEnabled)
                {
                    HatchMontReader.StartTracking();
                }
            }
        }
    
        private void FixupL_Application(L_Application previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_Application != null)
            {
                applicationId = L_Application.L_applicationId;
            }
    
            else if (!skipKeys)
            {
                applicationId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Application")
                    && (ChangeTracker.OriginalValues["L_Application"] == L_Application))
                {
                    ChangeTracker.OriginalValues.Remove("L_Application");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Application", previousValue);
                }
                if (L_Application != null && !L_Application.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Application.StartTracking();
                }
            }
        }
    
        private void FixupSubSample(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SubSample item in e.NewItems)
                {
                    item.SpeciesList = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SubSample", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SubSample item in e.OldItems)
                {
                    if (ReferenceEquals(item.SpeciesList, this))
                    {
                        item.SpeciesList = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SubSample", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
