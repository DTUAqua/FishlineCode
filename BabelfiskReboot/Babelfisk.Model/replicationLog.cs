//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    public partial class replicationLog: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int replicationLogId
        {
            get { return _replicationLogId; }
            set
            {
                if (_replicationLogId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'replicationLogId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _replicationLogId = value;
                    OnPropertyChanged("replicationLogId");
                }
            }
        }
        private int _replicationLogId;
    
        [DataMember]
        public string logType
        {
            get { return _logType; }
            set
            {
                if (_logType != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'logType' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _logType = value;
                    OnPropertyChanged("logType");
                }
            }
        }
        private string _logType;
    
        [DataMember]
        public System.DateTime time
        {
            get { return _time; }
            set
            {
                if (_time != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'time' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _time = value;
                    OnPropertyChanged("time");
                }
            }
        }
        private System.DateTime _time;
    
        [DataMember]
        public string source
        {
            get { return _source; }
            set
            {
                if (_source != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'source' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _source = value;
                    OnPropertyChanged("source");
                }
            }
        }
        private string _source;
    
        [DataMember]
        public string systemText
        {
            get { return _systemText; }
            set
            {
                if (_systemText != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'systemText' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _systemText = value;
                    OnPropertyChanged("systemText");
                }
            }
        }
        private string _systemText;
    
        [DataMember]
        public string userText
        {
            get { return _userText; }
            set
            {
                if (_userText != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'userText' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _userText = value;
                    OnPropertyChanged("userText");
                }
            }
        }
        private string _userText;
    
        [DataMember]
        public Nullable<int> year
        {
            get { return _year; }
            set
            {
                if (_year != value)
                {
                    _year = value;
                    OnPropertyChanged("year");
                }
            }
        }
        private Nullable<int> _year;
    
        [DataMember]
        public string cruise
        {
            get { return _cruise; }
            set
            {
                if (_cruise != value)
                {
                    _cruise = value;
                    OnPropertyChanged("cruise");
                }
            }
        }
        private string _cruise;
    
        [DataMember]
        public string trip
        {
            get { return _trip; }
            set
            {
                if (_trip != value)
                {
                    _trip = value;
                    OnPropertyChanged("trip");
                }
            }
        }
        private string _trip;
    
        [DataMember]
        public string station
        {
            get { return _station; }
            set
            {
                if (_station != value)
                {
                    _station = value;
                    OnPropertyChanged("station");
                }
            }
        }
        private string _station;
    
        [DataMember]
        public string species
        {
            get { return _species; }
            set
            {
                if (_species != value)
                {
                    _species = value;
                    OnPropertyChanged("species");
                }
            }
        }
        private string _species;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
