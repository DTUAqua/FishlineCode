//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(L_Species))]
    [KnownType(typeof(L_Stock))]
    public partial class R_SpeciesStock: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int speciesId
        {
            get { return _speciesId; }
            set
            {
                if (_speciesId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'speciesId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _speciesId = value;
                    OnPropertyChanged("speciesId");
                }
            }
        }
        private int _speciesId;
    
        [DataMember]
        public int stockId
        {
            get { return _stockId; }
            set
            {
                if (_stockId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'stockId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (L_Stock != null && L_Stock.stockId != value)
                        {
                            L_Stock = null;
                        }
                    }
                    _stockId = value;
                    OnPropertyChanged("stockId");
                }
            }
        }
        private int _stockId;
    
        [DataMember]
        public string speciesCode
        {
            get { return _speciesCode; }
            set
            {
                if (_speciesCode != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'speciesCode' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (L_Species != null && L_Species.speciesCode != value)
                        {
                            L_Species = null;
                        }
                    }
                    _speciesCode = value;
                    OnPropertyChanged("speciesCode");
                }
            }
        }
        private string _speciesCode;
    
        [DataMember]
        public int TSN
        {
            get { return _tSN; }
            set
            {
                if (_tSN != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TSN' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tSN = value;
                    OnPropertyChanged("TSN");
                }
            }
        }
        private int _tSN;
    
        [DataMember]
        public string stockCode
        {
            get { return _stockCode; }
            set
            {
                if (_stockCode != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'stockCode' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _stockCode = value;
                    OnPropertyChanged("stockCode");
                }
            }
        }
        private string _stockCode;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public L_Species L_Species
        {
            get { return _l_Species; }
            set
            {
                if (!ReferenceEquals(_l_Species, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (speciesCode != value.speciesCode)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _l_Species;
                    _l_Species = value;
                    FixupL_Species(previousValue);
                    OnNavigationPropertyChanged("L_Species");
                }
            }
        }
        private L_Species _l_Species;
    
        [DataMember]
        public L_Stock L_Stock
        {
            get { return _l_Stock; }
            set
            {
                if (!ReferenceEquals(_l_Stock, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (stockId != value.stockId)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _l_Stock;
                    _l_Stock = value;
                    FixupL_Stock(previousValue);
                    OnNavigationPropertyChanged("L_Stock");
                }
            }
        }
        private L_Stock _l_Stock;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            L_Species = null;
            L_Stock = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupL_Species(L_Species previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.R_SpeciesStock.Contains(this))
            {
                previousValue.R_SpeciesStock.Remove(this);
            }
    
            if (L_Species != null)
            {
                if (!L_Species.R_SpeciesStock.Contains(this))
                {
                    L_Species.R_SpeciesStock.Add(this);
                }
    
                speciesCode = L_Species.speciesCode;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Species")
                    && (ChangeTracker.OriginalValues["L_Species"] == L_Species))
                {
                    ChangeTracker.OriginalValues.Remove("L_Species");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Species", previousValue);
                }
                if (L_Species != null && !L_Species.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Species.StartTracking();
                }
            }
        }
    
        private void FixupL_Stock(L_Stock previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.R_SpeciesStock.Contains(this))
            {
                previousValue.R_SpeciesStock.Remove(this);
            }
    
            if (L_Stock != null)
            {
                if (!L_Stock.R_SpeciesStock.Contains(this))
                {
                    L_Stock.R_SpeciesStock.Add(this);
                }
    
                stockId = L_Stock.stockId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Stock")
                    && (ChangeTracker.OriginalValues["L_Stock"] == L_Stock))
                {
                    ChangeTracker.OriginalValues.Remove("L_Stock");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Stock", previousValue);
                }
                if (L_Stock != null && !L_Stock.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Stock.StartTracking();
                }
            }
        }

        #endregion
    }
}
