//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Sample))]
    [KnownType(typeof(R_StockSpeciesArea))]
    public partial class L_StatisticalRectangle: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int L_statisticalRectangleId
        {
            get { return _l_statisticalRectangleId; }
            set
            {
                if (_l_statisticalRectangleId != value)
                {
                    _l_statisticalRectangleId = value;
                    OnPropertyChanged("L_statisticalRectangleId");
                }
            }
        }
        private int _l_statisticalRectangleId;
    
        [DataMember]
        public string statisticalRectangle
        {
            get { return _statisticalRectangle; }
            set
            {
                if (_statisticalRectangle != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'statisticalRectangle' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _statisticalRectangle = value;
                    OnPropertyChanged("statisticalRectangle");
                }
            }
        }
        private string _statisticalRectangle;
    
        [DataMember]
        public Nullable<decimal> latitudeDecMin
        {
            get { return _latitudeDecMin; }
            set
            {
                if (_latitudeDecMin != value)
                {
                    _latitudeDecMin = value;
                    OnPropertyChanged("latitudeDecMin");
                }
            }
        }
        private Nullable<decimal> _latitudeDecMin;
    
        [DataMember]
        public Nullable<decimal> latitudeDecMax
        {
            get { return _latitudeDecMax; }
            set
            {
                if (_latitudeDecMax != value)
                {
                    _latitudeDecMax = value;
                    OnPropertyChanged("latitudeDecMax");
                }
            }
        }
        private Nullable<decimal> _latitudeDecMax;
    
        [DataMember]
        public Nullable<decimal> longitudeDecMin
        {
            get { return _longitudeDecMin; }
            set
            {
                if (_longitudeDecMin != value)
                {
                    _longitudeDecMin = value;
                    OnPropertyChanged("longitudeDecMin");
                }
            }
        }
        private Nullable<decimal> _longitudeDecMin;
    
        [DataMember]
        public Nullable<decimal> longitudeDecMax
        {
            get { return _longitudeDecMax; }
            set
            {
                if (_longitudeDecMax != value)
                {
                    _longitudeDecMax = value;
                    OnPropertyChanged("longitudeDecMax");
                }
            }
        }
        private Nullable<decimal> _longitudeDecMax;
    
        [DataMember]
        public Nullable<decimal> latitudeDecMid
        {
            get { return _latitudeDecMid; }
            set
            {
                if (_latitudeDecMid != value)
                {
                    _latitudeDecMid = value;
                    OnPropertyChanged("latitudeDecMid");
                }
            }
        }
        private Nullable<decimal> _latitudeDecMid;
    
        [DataMember]
        public Nullable<decimal> longitudeDecMid
        {
            get { return _longitudeDecMid; }
            set
            {
                if (_longitudeDecMid != value)
                {
                    _longitudeDecMid = value;
                    OnPropertyChanged("longitudeDecMid");
                }
            }
        }
        private Nullable<decimal> _longitudeDecMid;
    
        [DataMember]
        public string latitudeTextMin
        {
            get { return _latitudeTextMin; }
            set
            {
                if (_latitudeTextMin != value)
                {
                    _latitudeTextMin = value;
                    OnPropertyChanged("latitudeTextMin");
                }
            }
        }
        private string _latitudeTextMin;
    
        [DataMember]
        public string latitudeTextMax
        {
            get { return _latitudeTextMax; }
            set
            {
                if (_latitudeTextMax != value)
                {
                    _latitudeTextMax = value;
                    OnPropertyChanged("latitudeTextMax");
                }
            }
        }
        private string _latitudeTextMax;
    
        [DataMember]
        public string longitudeTextMin
        {
            get { return _longitudeTextMin; }
            set
            {
                if (_longitudeTextMin != value)
                {
                    _longitudeTextMin = value;
                    OnPropertyChanged("longitudeTextMin");
                }
            }
        }
        private string _longitudeTextMin;
    
        [DataMember]
        public string longitudeTextMax
        {
            get { return _longitudeTextMax; }
            set
            {
                if (_longitudeTextMax != value)
                {
                    _longitudeTextMax = value;
                    OnPropertyChanged("longitudeTextMax");
                }
            }
        }
        private string _longitudeTextMax;
    
        [DataMember]
        public string latitudeTextMid
        {
            get { return _latitudeTextMid; }
            set
            {
                if (_latitudeTextMid != value)
                {
                    _latitudeTextMid = value;
                    OnPropertyChanged("latitudeTextMid");
                }
            }
        }
        private string _latitudeTextMid;
    
        [DataMember]
        public string longitudeTextMid
        {
            get { return _longitudeTextMid; }
            set
            {
                if (_longitudeTextMid != value)
                {
                    _longitudeTextMid = value;
                    OnPropertyChanged("longitudeTextMid");
                }
            }
        }
        private string _longitudeTextMid;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Sample> Sample
        {
            get
            {
                if (_sample == null)
                {
                    _sample = new TrackableCollection<Sample>();
                    _sample.CollectionChanged += FixupSample;
                }
                return _sample;
            }
            set
            {
                if (!ReferenceEquals(_sample, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sample != null)
                    {
                        _sample.CollectionChanged -= FixupSample;
                    }
                    _sample = value;
                    if (_sample != null)
                    {
                        _sample.CollectionChanged += FixupSample;
                    }
                    OnNavigationPropertyChanged("Sample");
                }
            }
        }
        private TrackableCollection<Sample> _sample;
    
        [DataMember]
        public TrackableCollection<R_StockSpeciesArea> R_StockSpeciesArea
        {
            get
            {
                if (_r_StockSpeciesArea == null)
                {
                    _r_StockSpeciesArea = new TrackableCollection<R_StockSpeciesArea>();
                    _r_StockSpeciesArea.CollectionChanged += FixupR_StockSpeciesArea;
                }
                return _r_StockSpeciesArea;
            }
            set
            {
                if (!ReferenceEquals(_r_StockSpeciesArea, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_r_StockSpeciesArea != null)
                    {
                        _r_StockSpeciesArea.CollectionChanged -= FixupR_StockSpeciesArea;
                    }
                    _r_StockSpeciesArea = value;
                    if (_r_StockSpeciesArea != null)
                    {
                        _r_StockSpeciesArea.CollectionChanged += FixupR_StockSpeciesArea;
                    }
                    OnNavigationPropertyChanged("R_StockSpeciesArea");
                }
            }
        }
        private TrackableCollection<R_StockSpeciesArea> _r_StockSpeciesArea;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Sample.Clear();
            R_StockSpeciesArea.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupSample(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Sample item in e.NewItems)
                {
                    item.L_StatisticalRectangle = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Sample", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Sample item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_StatisticalRectangle, this))
                    {
                        item.L_StatisticalRectangle = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Sample", item);
                    }
                }
            }
        }
    
        private void FixupR_StockSpeciesArea(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_StockSpeciesArea item in e.NewItems)
                {
                    item.L_StatisticalRectangle = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_StockSpeciesArea", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_StockSpeciesArea item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_StatisticalRectangle, this))
                    {
                        item.L_StatisticalRectangle = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_StockSpeciesArea", item);
                    }
                }
            }
        }

        #endregion

    }
}
