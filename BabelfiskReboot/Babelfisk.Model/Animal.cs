//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Age))]
    [KnownType(typeof(L_BroodingPhase))]
    [KnownType(typeof(L_LengthMeasureUnit))]
    [KnownType(typeof(L_SexCode))]
    [KnownType(typeof(SubSample))]
    [KnownType(typeof(AnimalInfo))]
    [KnownType(typeof(AnimalFile))]
    [KnownType(typeof(L_LengthMeasureType))]
    public partial class Animal: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int animalId
        {
            get { return _animalId; }
            set
            {
                if (_animalId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'animalId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _animalId = value;
                    OnPropertyChanged("animalId");
                }
            }
        }
        private int _animalId;
    
        [DataMember]
        public int subSampleId
        {
            get { return _subSampleId; }
            set
            {
                if (_subSampleId != value)
                {
                    ChangeTracker.RecordOriginalValue("subSampleId", _subSampleId);
                    if (!IsDeserializing)
                    {
                        if (SubSample != null && SubSample.subSampleId != value)
                        {
                            SubSample = null;
                        }
                    }
                    _subSampleId = value;
                    OnPropertyChanged("subSampleId");
                }
            }
        }
        private int _subSampleId;
    
        [DataMember]
        public Nullable<int> individNum
        {
            get { return _individNum; }
            set
            {
                if (_individNum != value)
                {
                    _individNum = value;
                    OnPropertyChanged("individNum");
                }
            }
        }
        private Nullable<int> _individNum;
    
        [DataMember]
        public Nullable<int> length
        {
            get { return _length; }
            set
            {
                if (_length != value)
                {
                    _length = value;
                    OnPropertyChanged("length");
                }
            }
        }
        private Nullable<int> _length;
    
        [DataMember]
        public string lengthMeasureUnit
        {
            get { return _lengthMeasureUnit; }
            set
            {
                if (_lengthMeasureUnit != value)
                {
                    ChangeTracker.RecordOriginalValue("lengthMeasureUnit", _lengthMeasureUnit);
                    if (!IsDeserializing)
                    {
                        if (L_LengthMeasureUnit != null && L_LengthMeasureUnit.lengthMeasureUnit != value)
                        {
                            L_LengthMeasureUnit = null;
                        }
                    }
                    _lengthMeasureUnit = value;
                    OnPropertyChanged("lengthMeasureUnit");
                }
            }
        }
        private string _lengthMeasureUnit;
    
        [DataMember]
        public Nullable<int> lengthMeasureTypeId
        {
            get { return _lengthMeasureTypeId; }
            set
            {
                if (_lengthMeasureTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("lengthMeasureTypeId", _lengthMeasureTypeId);
                    if (!IsDeserializing)
                    {
                        if (L_LengthMeasureType != null && L_LengthMeasureType.L_lengthMeasureTypeId != value)
                        {
                            L_LengthMeasureType = null;
                        }
                    }
                    _lengthMeasureTypeId = value;
                    OnPropertyChanged("lengthMeasureTypeId");
                }
            }
        }
        private Nullable<int> _lengthMeasureTypeId;
    
        [DataMember]
        public string sexCode
        {
            get { return _sexCode; }
            set
            {
                if (_sexCode != value)
                {
                    ChangeTracker.RecordOriginalValue("sexCode", _sexCode);
                    if (!IsDeserializing)
                    {
                        if (L_SexCode != null && L_SexCode.sexCode != value)
                        {
                            L_SexCode = null;
                        }
                    }
                    _sexCode = value;
                    OnPropertyChanged("sexCode");
                }
            }
        }
        private string _sexCode;
    
        [DataMember]
        public string broodingPhase
        {
            get { return _broodingPhase; }
            set
            {
                if (_broodingPhase != value)
                {
                    ChangeTracker.RecordOriginalValue("broodingPhase", _broodingPhase);
                    if (!IsDeserializing)
                    {
                        if (L_BroodingPhase != null && L_BroodingPhase.broodingPhase != value)
                        {
                            L_BroodingPhase = null;
                        }
                    }
                    _broodingPhase = value;
                    OnPropertyChanged("broodingPhase");
                }
            }
        }
        private string _broodingPhase;
    
        [DataMember]
        public Nullable<int> dfuBase_lfRecordId
        {
            get { return _dfuBase_lfRecordId; }
            set
            {
                if (_dfuBase_lfRecordId != value)
                {
                    _dfuBase_lfRecordId = value;
                    OnPropertyChanged("dfuBase_lfRecordId");
                }
            }
        }
        private Nullable<int> _dfuBase_lfRecordId;
    
        [DataMember]
        public int number
        {
            get { return _number; }
            set
            {
                if (_number != value)
                {
                    _number = value;
                    OnPropertyChanged("number");
                }
            }
        }
        private int _number;
    
        [DataMember]
        public Nullable<decimal> weight
        {
            get { return _weight; }
            set
            {
                if (_weight != value)
                {
                    _weight = value;
                    OnPropertyChanged("weight");
                }
            }
        }
        private Nullable<decimal> _weight;
    
        [DataMember]
        public Nullable<int> dataHandlerId
        {
            get { return _dataHandlerId; }
            set
            {
                if (_dataHandlerId != value)
                {
                    _dataHandlerId = value;
                    OnPropertyChanged("dataHandlerId");
                }
            }
        }
        private Nullable<int> _dataHandlerId;
    
        [DataMember]
        public string remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public Nullable<int> catchNum
        {
            get { return _catchNum; }
            set
            {
                if (_catchNum != value)
                {
                    _catchNum = value;
                    OnPropertyChanged("catchNum");
                }
            }
        }
        private Nullable<int> _catchNum;
    
        [DataMember]
        public Nullable<bool> otolithFinScale
        {
            get { return _otolithFinScale; }
            set
            {
                if (_otolithFinScale != value)
                {
                    _otolithFinScale = value;
                    OnPropertyChanged("otolithFinScale");
                }
            }
        }
        private Nullable<bool> _otolithFinScale;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Age> Age
        {
            get
            {
                if (_age == null)
                {
                    _age = new TrackableCollection<Age>();
                    _age.CollectionChanged += FixupAge;
                }
                return _age;
            }
            set
            {
                if (!ReferenceEquals(_age, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_age != null)
                    {
                        _age.CollectionChanged -= FixupAge;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (Age item in _age)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _age = value;
                    if (_age != null)
                    {
                        _age.CollectionChanged += FixupAge;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (Age item in _age)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Age");
                }
            }
        }
        private TrackableCollection<Age> _age;
    
        [DataMember]
        public L_BroodingPhase L_BroodingPhase
        {
            get { return _l_BroodingPhase; }
            set
            {
                if (!ReferenceEquals(_l_BroodingPhase, value))
                {
                    var previousValue = _l_BroodingPhase;
                    _l_BroodingPhase = value;
                    FixupL_BroodingPhase(previousValue);
                    OnNavigationPropertyChanged("L_BroodingPhase");
                }
            }
        }
        private L_BroodingPhase _l_BroodingPhase;
    
        [DataMember]
        public L_LengthMeasureUnit L_LengthMeasureUnit
        {
            get { return _l_LengthMeasureUnit; }
            set
            {
                if (!ReferenceEquals(_l_LengthMeasureUnit, value))
                {
                    var previousValue = _l_LengthMeasureUnit;
                    _l_LengthMeasureUnit = value;
                    FixupL_LengthMeasureUnit(previousValue);
                    OnNavigationPropertyChanged("L_LengthMeasureUnit");
                }
            }
        }
        private L_LengthMeasureUnit _l_LengthMeasureUnit;
    
        [DataMember]
        public L_SexCode L_SexCode
        {
            get { return _l_SexCode; }
            set
            {
                if (!ReferenceEquals(_l_SexCode, value))
                {
                    var previousValue = _l_SexCode;
                    _l_SexCode = value;
                    FixupL_SexCode(previousValue);
                    OnNavigationPropertyChanged("L_SexCode");
                }
            }
        }
        private L_SexCode _l_SexCode;
    
        [DataMember]
        public SubSample SubSample
        {
            get { return _subSample; }
            set
            {
                if (!ReferenceEquals(_subSample, value))
                {
                    var previousValue = _subSample;
                    _subSample = value;
                    FixupSubSample(previousValue);
                    OnNavigationPropertyChanged("SubSample");
                }
            }
        }
        private SubSample _subSample;
    
        [DataMember]
        public TrackableCollection<AnimalInfo> AnimalInfo
        {
            get
            {
                if (_animalInfo == null)
                {
                    _animalInfo = new TrackableCollection<AnimalInfo>();
                    _animalInfo.CollectionChanged += FixupAnimalInfo;
                }
                return _animalInfo;
            }
            set
            {
                if (!ReferenceEquals(_animalInfo, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_animalInfo != null)
                    {
                        _animalInfo.CollectionChanged -= FixupAnimalInfo;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (AnimalInfo item in _animalInfo)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _animalInfo = value;
                    if (_animalInfo != null)
                    {
                        _animalInfo.CollectionChanged += FixupAnimalInfo;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (AnimalInfo item in _animalInfo)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("AnimalInfo");
                }
            }
        }
        private TrackableCollection<AnimalInfo> _animalInfo;
    
        [DataMember]
        public TrackableCollection<AnimalFile> AnimalFiles
        {
            get
            {
                if (_animalFiles == null)
                {
                    _animalFiles = new TrackableCollection<AnimalFile>();
                    _animalFiles.CollectionChanged += FixupAnimalFiles;
                }
                return _animalFiles;
            }
            set
            {
                if (!ReferenceEquals(_animalFiles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_animalFiles != null)
                    {
                        _animalFiles.CollectionChanged -= FixupAnimalFiles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (AnimalFile item in _animalFiles)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _animalFiles = value;
                    if (_animalFiles != null)
                    {
                        _animalFiles.CollectionChanged += FixupAnimalFiles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (AnimalFile item in _animalFiles)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("AnimalFiles");
                }
            }
        }
        private TrackableCollection<AnimalFile> _animalFiles;
    
        [DataMember]
        public L_LengthMeasureType L_LengthMeasureType
        {
            get { return _l_LengthMeasureType; }
            set
            {
                if (!ReferenceEquals(_l_LengthMeasureType, value))
                {
                    var previousValue = _l_LengthMeasureType;
                    _l_LengthMeasureType = value;
                    FixupL_LengthMeasureType(previousValue);
                    OnNavigationPropertyChanged("L_LengthMeasureType");
                }
            }
        }
        private L_LengthMeasureType _l_LengthMeasureType;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Age.Clear();
            L_BroodingPhase = null;
            L_LengthMeasureUnit = null;
            L_SexCode = null;
            SubSample = null;
            AnimalInfo.Clear();
            AnimalFiles.Clear();
            L_LengthMeasureType = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupL_BroodingPhase(L_BroodingPhase previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Animal.Contains(this))
            {
                previousValue.Animal.Remove(this);
            }
    
            if (L_BroodingPhase != null)
            {
                if (!L_BroodingPhase.Animal.Contains(this))
                {
                    L_BroodingPhase.Animal.Add(this);
                }
    
                broodingPhase = L_BroodingPhase.broodingPhase;
            }
            else if (!skipKeys)
            {
                broodingPhase = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_BroodingPhase")
                    && (ChangeTracker.OriginalValues["L_BroodingPhase"] == L_BroodingPhase))
                {
                    ChangeTracker.OriginalValues.Remove("L_BroodingPhase");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_BroodingPhase", previousValue);
                }
                if (L_BroodingPhase != null && !L_BroodingPhase.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_BroodingPhase.StartTracking();
                }
            }
        }
    
        private void FixupL_LengthMeasureUnit(L_LengthMeasureUnit previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Animal.Contains(this))
            {
                previousValue.Animal.Remove(this);
            }
    
            if (L_LengthMeasureUnit != null)
            {
                if (!L_LengthMeasureUnit.Animal.Contains(this))
                {
                    L_LengthMeasureUnit.Animal.Add(this);
                }
    
                lengthMeasureUnit = L_LengthMeasureUnit.lengthMeasureUnit;
            }
            else if (!skipKeys)
            {
                lengthMeasureUnit = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_LengthMeasureUnit")
                    && (ChangeTracker.OriginalValues["L_LengthMeasureUnit"] == L_LengthMeasureUnit))
                {
                    ChangeTracker.OriginalValues.Remove("L_LengthMeasureUnit");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_LengthMeasureUnit", previousValue);
                }
                if (L_LengthMeasureUnit != null && !L_LengthMeasureUnit.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_LengthMeasureUnit.StartTracking();
                }
            }
        }
    
        private void FixupL_SexCode(L_SexCode previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Animal.Contains(this))
            {
                previousValue.Animal.Remove(this);
            }
    
            if (L_SexCode != null)
            {
                if (!L_SexCode.Animal.Contains(this))
                {
                    L_SexCode.Animal.Add(this);
                }
    
                sexCode = L_SexCode.sexCode;
            }
            else if (!skipKeys)
            {
                sexCode = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SexCode")
                    && (ChangeTracker.OriginalValues["L_SexCode"] == L_SexCode))
                {
                    ChangeTracker.OriginalValues.Remove("L_SexCode");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SexCode", previousValue);
                }
                if (L_SexCode != null && !L_SexCode.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SexCode.StartTracking();
                }
            }
        }
    
        private void FixupSubSample(SubSample previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Animal.Contains(this))
            {
                previousValue.Animal.Remove(this);
            }
    
            if (SubSample != null)
            {
                if (!SubSample.Animal.Contains(this))
                {
                    SubSample.Animal.Add(this);
                }
    
                subSampleId = SubSample.subSampleId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SubSample")
                    && (ChangeTracker.OriginalValues["SubSample"] == SubSample))
                {
                    ChangeTracker.OriginalValues.Remove("SubSample");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SubSample", previousValue);
                }
                if (SubSample != null && !SubSample.ChangeTracker.ChangeTrackingEnabled)
                {
                    SubSample.StartTracking();
                }
            }
        }
    
        private void FixupL_LengthMeasureType(L_LengthMeasureType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_LengthMeasureType != null)
            {
                lengthMeasureTypeId = L_LengthMeasureType.L_lengthMeasureTypeId;
            }
    
            else if (!skipKeys)
            {
                lengthMeasureTypeId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_LengthMeasureType")
                    && (ChangeTracker.OriginalValues["L_LengthMeasureType"] == L_LengthMeasureType))
                {
                    ChangeTracker.OriginalValues.Remove("L_LengthMeasureType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_LengthMeasureType", previousValue);
                }
                if (L_LengthMeasureType != null && !L_LengthMeasureType.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_LengthMeasureType.StartTracking();
                }
            }
        }
    
        private void FixupAge(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Age item in e.NewItems)
                {
                    item.Animal = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Age", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Age item in e.OldItems)
                {
                    if (ReferenceEquals(item.Animal, this))
                    {
                        item.Animal = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Age", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupAnimalInfo(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AnimalInfo item in e.NewItems)
                {
                    item.Animal = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AnimalInfo", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AnimalInfo item in e.OldItems)
                {
                    if (ReferenceEquals(item.Animal, this))
                    {
                        item.Animal = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AnimalInfo", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupAnimalFiles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AnimalFile item in e.NewItems)
                {
                    item.Animal = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AnimalFiles", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AnimalFile item in e.OldItems)
                {
                    if (ReferenceEquals(item.Animal, this))
                    {
                        item.Animal = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AnimalFiles", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
