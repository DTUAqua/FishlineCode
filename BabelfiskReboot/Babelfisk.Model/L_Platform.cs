//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(L_Gear))]
    [KnownType(typeof(L_Nationality))]
    [KnownType(typeof(L_PlatformType))]
    [KnownType(typeof(Person))]
    [KnownType(typeof(L_PlatformVersion))]
    [KnownType(typeof(Trip))]
    public partial class L_Platform: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int L_platformId
        {
            get { return _l_platformId; }
            set
            {
                if (_l_platformId != value)
                {
                    _l_platformId = value;
                    OnPropertyChanged("L_platformId");
                }
            }
        }
        private int _l_platformId;
    
        [DataMember]
        public string platform
        {
            get { return _platform; }
            set
            {
                if (_platform != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'platform' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _platform = value;
                    OnPropertyChanged("platform");
                }
            }
        }
        private string _platform;
    
        [DataMember]
        public string platformType
        {
            get { return _platformType; }
            set
            {
                if (_platformType != value)
                {
                    ChangeTracker.RecordOriginalValue("platformType", _platformType);
                    if (!IsDeserializing)
                    {
                        if (L_PlatformType != null && L_PlatformType.platformType != value)
                        {
                            L_PlatformType = null;
                        }
                    }
                    _platformType = value;
                    OnPropertyChanged("platformType");
                }
            }
        }
        private string _platformType;
    
        [DataMember]
        public string name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string nationality
        {
            get { return _nationality; }
            set
            {
                if (_nationality != value)
                {
                    ChangeTracker.RecordOriginalValue("nationality", _nationality);
                    if (!IsDeserializing)
                    {
                        if (L_Nationality != null && L_Nationality.nationality != value)
                        {
                            L_Nationality = null;
                        }
                    }
                    _nationality = value;
                    OnPropertyChanged("nationality");
                }
            }
        }
        private string _nationality;
    
        [DataMember]
        public string boatIdentity
        {
            get { return _boatIdentity; }
            set
            {
                if (_boatIdentity != value)
                {
                    _boatIdentity = value;
                    OnPropertyChanged("boatIdentity");
                }
            }
        }
        private string _boatIdentity;
    
        [DataMember]
        public Nullable<int> contactPersonId
        {
            get { return _contactPersonId; }
            set
            {
                if (_contactPersonId != value)
                {
                    ChangeTracker.RecordOriginalValue("contactPersonId", _contactPersonId);
                    if (!IsDeserializing)
                    {
                        if (Person != null && Person.personId != value)
                        {
                            Person = null;
                        }
                    }
                    _contactPersonId = value;
                    OnPropertyChanged("contactPersonId");
                }
            }
        }
        private Nullable<int> _contactPersonId;
    
        [DataMember]
        public string description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("description");
                }
            }
        }
        private string _description;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<L_Gear> L_Gear
        {
            get
            {
                if (_l_Gear == null)
                {
                    _l_Gear = new TrackableCollection<L_Gear>();
                    _l_Gear.CollectionChanged += FixupL_Gear;
                }
                return _l_Gear;
            }
            set
            {
                if (!ReferenceEquals(_l_Gear, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_l_Gear != null)
                    {
                        _l_Gear.CollectionChanged -= FixupL_Gear;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (L_Gear item in _l_Gear)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _l_Gear = value;
                    if (_l_Gear != null)
                    {
                        _l_Gear.CollectionChanged += FixupL_Gear;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (L_Gear item in _l_Gear)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("L_Gear");
                }
            }
        }
        private TrackableCollection<L_Gear> _l_Gear;
    
        [DataMember]
        public L_Nationality L_Nationality
        {
            get { return _l_Nationality; }
            set
            {
                if (!ReferenceEquals(_l_Nationality, value))
                {
                    var previousValue = _l_Nationality;
                    _l_Nationality = value;
                    FixupL_Nationality(previousValue);
                    OnNavigationPropertyChanged("L_Nationality");
                }
            }
        }
        private L_Nationality _l_Nationality;
    
        [DataMember]
        public L_PlatformType L_PlatformType
        {
            get { return _l_PlatformType; }
            set
            {
                if (!ReferenceEquals(_l_PlatformType, value))
                {
                    var previousValue = _l_PlatformType;
                    _l_PlatformType = value;
                    FixupL_PlatformType(previousValue);
                    OnNavigationPropertyChanged("L_PlatformType");
                }
            }
        }
        private L_PlatformType _l_PlatformType;
    
        [DataMember]
        public Person Person
        {
            get { return _person; }
            set
            {
                if (!ReferenceEquals(_person, value))
                {
                    var previousValue = _person;
                    _person = value;
                    FixupPerson(previousValue);
                    OnNavigationPropertyChanged("Person");
                }
            }
        }
        private Person _person;
    
        [DataMember]
        public TrackableCollection<L_PlatformVersion> L_PlatformVersion
        {
            get
            {
                if (_l_PlatformVersion == null)
                {
                    _l_PlatformVersion = new TrackableCollection<L_PlatformVersion>();
                    _l_PlatformVersion.CollectionChanged += FixupL_PlatformVersion;
                }
                return _l_PlatformVersion;
            }
            set
            {
                if (!ReferenceEquals(_l_PlatformVersion, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_l_PlatformVersion != null)
                    {
                        _l_PlatformVersion.CollectionChanged -= FixupL_PlatformVersion;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (L_PlatformVersion item in _l_PlatformVersion)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _l_PlatformVersion = value;
                    if (_l_PlatformVersion != null)
                    {
                        _l_PlatformVersion.CollectionChanged += FixupL_PlatformVersion;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (L_PlatformVersion item in _l_PlatformVersion)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("L_PlatformVersion");
                }
            }
        }
        private TrackableCollection<L_PlatformVersion> _l_PlatformVersion;
    
        [DataMember]
        public TrackableCollection<Trip> Trip
        {
            get
            {
                if (_trip == null)
                {
                    _trip = new TrackableCollection<Trip>();
                    _trip.CollectionChanged += FixupTrip;
                }
                return _trip;
            }
            set
            {
                if (!ReferenceEquals(_trip, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_trip != null)
                    {
                        _trip.CollectionChanged -= FixupTrip;
                    }
                    _trip = value;
                    if (_trip != null)
                    {
                        _trip.CollectionChanged += FixupTrip;
                    }
                    OnNavigationPropertyChanged("Trip");
                }
            }
        }
        private TrackableCollection<Trip> _trip;
    
        [DataMember]
        public TrackableCollection<Trip> Trip1
        {
            get
            {
                if (_trip1 == null)
                {
                    _trip1 = new TrackableCollection<Trip>();
                    _trip1.CollectionChanged += FixupTrip1;
                }
                return _trip1;
            }
            set
            {
                if (!ReferenceEquals(_trip1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_trip1 != null)
                    {
                        _trip1.CollectionChanged -= FixupTrip1;
                    }
                    _trip1 = value;
                    if (_trip1 != null)
                    {
                        _trip1.CollectionChanged += FixupTrip1;
                    }
                    OnNavigationPropertyChanged("Trip1");
                }
            }
        }
        private TrackableCollection<Trip> _trip1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            L_Gear.Clear();
            L_Nationality = null;
            L_PlatformType = null;
            Person = null;
            L_PlatformVersion.Clear();
            Trip.Clear();
            Trip1.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupL_Nationality(L_Nationality previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.L_Platform.Contains(this))
            {
                previousValue.L_Platform.Remove(this);
            }
    
            if (L_Nationality != null)
            {
                if (!L_Nationality.L_Platform.Contains(this))
                {
                    L_Nationality.L_Platform.Add(this);
                }
    
                nationality = L_Nationality.nationality;
            }
            else if (!skipKeys)
            {
                nationality = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Nationality")
                    && (ChangeTracker.OriginalValues["L_Nationality"] == L_Nationality))
                {
                    ChangeTracker.OriginalValues.Remove("L_Nationality");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Nationality", previousValue);
                }
                if (L_Nationality != null && !L_Nationality.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Nationality.StartTracking();
                }
            }
        }
    
        private void FixupL_PlatformType(L_PlatformType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.L_Platform.Contains(this))
            {
                previousValue.L_Platform.Remove(this);
            }
    
            if (L_PlatformType != null)
            {
                if (!L_PlatformType.L_Platform.Contains(this))
                {
                    L_PlatformType.L_Platform.Add(this);
                }
    
                platformType = L_PlatformType.platformType;
            }
            else if (!skipKeys)
            {
                platformType = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_PlatformType")
                    && (ChangeTracker.OriginalValues["L_PlatformType"] == L_PlatformType))
                {
                    ChangeTracker.OriginalValues.Remove("L_PlatformType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_PlatformType", previousValue);
                }
                if (L_PlatformType != null && !L_PlatformType.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_PlatformType.StartTracking();
                }
            }
        }
    
        private void FixupPerson(Person previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.L_Platform.Contains(this))
            {
                previousValue.L_Platform.Remove(this);
            }
    
            if (Person != null)
            {
                if (!Person.L_Platform.Contains(this))
                {
                    Person.L_Platform.Add(this);
                }
    
                contactPersonId = Person.personId;
            }
            else if (!skipKeys)
            {
                contactPersonId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Person")
                    && (ChangeTracker.OriginalValues["Person"] == Person))
                {
                    ChangeTracker.OriginalValues.Remove("Person");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Person", previousValue);
                }
                if (Person != null && !Person.ChangeTracker.ChangeTrackingEnabled)
                {
                    Person.StartTracking();
                }
            }
        }
    
        private void FixupL_Gear(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (L_Gear item in e.NewItems)
                {
                    item.L_Platform = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("L_Gear", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (L_Gear item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_Platform, this))
                    {
                        item.L_Platform = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("L_Gear", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupL_PlatformVersion(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (L_PlatformVersion item in e.NewItems)
                {
                    item.L_Platform = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("L_PlatformVersion", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (L_PlatformVersion item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_Platform, this))
                    {
                        item.L_Platform = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("L_PlatformVersion", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTrip(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Trip item in e.NewItems)
                {
                    item.L_Platform = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Trip", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Trip item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_Platform, this))
                    {
                        item.L_Platform = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Trip", item);
                    }
                }
            }
        }
    
        private void FixupTrip1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Trip item in e.NewItems)
                {
                    item.L_Platform1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Trip1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Trip item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_Platform1, this))
                    {
                        item.L_Platform1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Trip1", item);
                    }
                }
            }
        }

        #endregion

    }
}
