//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(L_Gear))]
    [KnownType(typeof(L_GearInfoType))]
    public partial class R_GearInfo: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int R_gearInfoID
        {
            get { return _r_gearInfoID; }
            set
            {
                if (_r_gearInfoID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'R_gearInfoID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _r_gearInfoID = value;
                    OnPropertyChanged("R_gearInfoID");
                }
            }
        }
        private int _r_gearInfoID;
    
        [DataMember]
        public int gearId
        {
            get { return _gearId; }
            set
            {
                if (_gearId != value)
                {
                    ChangeTracker.RecordOriginalValue("gearId", _gearId);
                    if (!IsDeserializing)
                    {
                        if (L_Gear != null && L_Gear.gearId != value)
                        {
                            L_Gear = null;
                        }
                    }
                    _gearId = value;
                    OnPropertyChanged("gearId");
                }
            }
        }
        private int _gearId;
    
        [DataMember]
        public string gearInfoType
        {
            get { return _gearInfoType; }
            set
            {
                if (_gearInfoType != value)
                {
                    ChangeTracker.RecordOriginalValue("gearInfoType", _gearInfoType);
                    if (!IsDeserializing)
                    {
                        if (L_GearInfoType != null && L_GearInfoType.gearInfoType != value)
                        {
                            L_GearInfoType = null;
                        }
                    }
                    _gearInfoType = value;
                    OnPropertyChanged("gearInfoType");
                }
            }
        }
        private string _gearInfoType;
    
        [DataMember]
        public string gearValue
        {
            get { return _gearValue; }
            set
            {
                if (_gearValue != value)
                {
                    _gearValue = value;
                    OnPropertyChanged("gearValue");
                }
            }
        }
        private string _gearValue;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public L_Gear L_Gear
        {
            get { return _l_Gear; }
            set
            {
                if (!ReferenceEquals(_l_Gear, value))
                {
                    var previousValue = _l_Gear;
                    _l_Gear = value;
                    FixupL_Gear(previousValue);
                    OnNavigationPropertyChanged("L_Gear");
                }
            }
        }
        private L_Gear _l_Gear;
    
        [DataMember]
        public L_GearInfoType L_GearInfoType
        {
            get { return _l_GearInfoType; }
            set
            {
                if (!ReferenceEquals(_l_GearInfoType, value))
                {
                    var previousValue = _l_GearInfoType;
                    _l_GearInfoType = value;
                    FixupL_GearInfoType(previousValue);
                    OnNavigationPropertyChanged("L_GearInfoType");
                }
            }
        }
        private L_GearInfoType _l_GearInfoType;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            L_Gear = null;
            L_GearInfoType = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupL_Gear(L_Gear previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.R_GearInfo.Contains(this))
            {
                previousValue.R_GearInfo.Remove(this);
            }
    
            if (L_Gear != null)
            {
                if (!L_Gear.R_GearInfo.Contains(this))
                {
                    L_Gear.R_GearInfo.Add(this);
                }
    
                gearId = L_Gear.gearId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Gear")
                    && (ChangeTracker.OriginalValues["L_Gear"] == L_Gear))
                {
                    ChangeTracker.OriginalValues.Remove("L_Gear");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Gear", previousValue);
                }
                if (L_Gear != null && !L_Gear.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Gear.StartTracking();
                }
            }
        }
    
        private void FixupL_GearInfoType(L_GearInfoType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.R_GearInfo.Contains(this))
            {
                previousValue.R_GearInfo.Remove(this);
            }
    
            if (L_GearInfoType != null)
            {
                if (!L_GearInfoType.R_GearInfo.Contains(this))
                {
                    L_GearInfoType.R_GearInfo.Add(this);
                }
    
                gearInfoType = L_GearInfoType.gearInfoType;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_GearInfoType")
                    && (ChangeTracker.OriginalValues["L_GearInfoType"] == L_GearInfoType))
                {
                    ChangeTracker.OriginalValues.Remove("L_GearInfoType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_GearInfoType", previousValue);
                }
                if (L_GearInfoType != null && !L_GearInfoType.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_GearInfoType.StartTracking();
                }
            }
        }

        #endregion

    }
}
