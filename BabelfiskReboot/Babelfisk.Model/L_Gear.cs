//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(L_GearType))]
    [KnownType(typeof(L_Platform))]
    [KnownType(typeof(R_GearInfo))]
    [KnownType(typeof(Sample))]
    public partial class L_Gear: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int gearId
        {
            get { return _gearId; }
            set
            {
                if (_gearId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'gearId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _gearId = value;
                    OnPropertyChanged("gearId");
                }
            }
        }
        private int _gearId;
    
        [DataMember]
        public string platform
        {
            get { return _platform; }
            set
            {
                if (_platform != value)
                {
                    ChangeTracker.RecordOriginalValue("platform", _platform);
                    if (!IsDeserializing)
                    {
                        if (L_Platform != null && L_Platform.platform != value)
                        {
                            L_Platform = null;
                        }
                    }
                    _platform = value;
                    OnPropertyChanged("platform");
                }
            }
        }
        private string _platform;
    
        [DataMember]
        public string gear
        {
            get { return _gear; }
            set
            {
                if (_gear != value)
                {
                    _gear = value;
                    OnPropertyChanged("gear");
                }
            }
        }
        private string _gear;
    
        [DataMember]
        public string gearText
        {
            get { return _gearText; }
            set
            {
                if (_gearText != value)
                {
                    _gearText = value;
                    OnPropertyChanged("gearText");
                }
            }
        }
        private string _gearText;
    
        [DataMember]
        public int version
        {
            get { return _version; }
            set
            {
                if (_version != value)
                {
                    _version = value;
                    OnPropertyChanged("version");
                }
            }
        }
        private int _version;
    
        [DataMember]
        public string gearType
        {
            get { return _gearType; }
            set
            {
                if (_gearType != value)
                {
                    ChangeTracker.RecordOriginalValue("gearType", _gearType);
                    if (!IsDeserializing)
                    {
                        if (L_GearType != null && L_GearType.gearType != value)
                        {
                            L_GearType = null;
                        }
                    }
                    _gearType = value;
                    OnPropertyChanged("gearType");
                }
            }
        }
        private string _gearType;
    
        [DataMember]
        public string description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("description");
                }
            }
        }
        private string _description;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public L_GearType L_GearType
        {
            get { return _l_GearType; }
            set
            {
                if (!ReferenceEquals(_l_GearType, value))
                {
                    var previousValue = _l_GearType;
                    _l_GearType = value;
                    FixupL_GearType(previousValue);
                    OnNavigationPropertyChanged("L_GearType");
                }
            }
        }
        private L_GearType _l_GearType;
    
        [DataMember]
        public L_Platform L_Platform
        {
            get { return _l_Platform; }
            set
            {
                if (!ReferenceEquals(_l_Platform, value))
                {
                    var previousValue = _l_Platform;
                    _l_Platform = value;
                    FixupL_Platform(previousValue);
                    OnNavigationPropertyChanged("L_Platform");
                }
            }
        }
        private L_Platform _l_Platform;
    
        [DataMember]
        public TrackableCollection<R_GearInfo> R_GearInfo
        {
            get
            {
                if (_r_GearInfo == null)
                {
                    _r_GearInfo = new TrackableCollection<R_GearInfo>();
                    _r_GearInfo.CollectionChanged += FixupR_GearInfo;
                }
                return _r_GearInfo;
            }
            set
            {
                if (!ReferenceEquals(_r_GearInfo, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_r_GearInfo != null)
                    {
                        _r_GearInfo.CollectionChanged -= FixupR_GearInfo;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (R_GearInfo item in _r_GearInfo)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _r_GearInfo = value;
                    if (_r_GearInfo != null)
                    {
                        _r_GearInfo.CollectionChanged += FixupR_GearInfo;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (R_GearInfo item in _r_GearInfo)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("R_GearInfo");
                }
            }
        }
        private TrackableCollection<R_GearInfo> _r_GearInfo;
    
        [DataMember]
        public TrackableCollection<Sample> Sample
        {
            get
            {
                if (_sample == null)
                {
                    _sample = new TrackableCollection<Sample>();
                    _sample.CollectionChanged += FixupSample;
                }
                return _sample;
            }
            set
            {
                if (!ReferenceEquals(_sample, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sample != null)
                    {
                        _sample.CollectionChanged -= FixupSample;
                    }
                    _sample = value;
                    if (_sample != null)
                    {
                        _sample.CollectionChanged += FixupSample;
                    }
                    OnNavigationPropertyChanged("Sample");
                }
            }
        }
        private TrackableCollection<Sample> _sample;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            L_GearType = null;
            L_Platform = null;
            R_GearInfo.Clear();
            Sample.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupL_GearType(L_GearType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.L_Gear.Contains(this))
            {
                previousValue.L_Gear.Remove(this);
            }
    
            if (L_GearType != null)
            {
                if (!L_GearType.L_Gear.Contains(this))
                {
                    L_GearType.L_Gear.Add(this);
                }
    
                gearType = L_GearType.gearType;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_GearType")
                    && (ChangeTracker.OriginalValues["L_GearType"] == L_GearType))
                {
                    ChangeTracker.OriginalValues.Remove("L_GearType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_GearType", previousValue);
                }
                if (L_GearType != null && !L_GearType.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_GearType.StartTracking();
                }
            }
        }
    
        private void FixupL_Platform(L_Platform previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.L_Gear.Contains(this))
            {
                previousValue.L_Gear.Remove(this);
            }
    
            if (L_Platform != null)
            {
                if (!L_Platform.L_Gear.Contains(this))
                {
                    L_Platform.L_Gear.Add(this);
                }
    
                platform = L_Platform.platform;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Platform")
                    && (ChangeTracker.OriginalValues["L_Platform"] == L_Platform))
                {
                    ChangeTracker.OriginalValues.Remove("L_Platform");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Platform", previousValue);
                }
                if (L_Platform != null && !L_Platform.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Platform.StartTracking();
                }
            }
        }
    
        private void FixupR_GearInfo(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_GearInfo item in e.NewItems)
                {
                    item.L_Gear = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_GearInfo", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_GearInfo item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_Gear, this))
                    {
                        item.L_Gear = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_GearInfo", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupSample(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Sample item in e.NewItems)
                {
                    item.L_Gear = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Sample", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Sample item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_Gear, this))
                    {
                        item.L_Gear = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Sample", item);
                    }
                }
            }
        }

        #endregion

    }
}
