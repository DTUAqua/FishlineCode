//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DFUPerson))]
    [KnownType(typeof(L_SDPreparationMethod))]
    [KnownType(typeof(L_SDReaderExperience))]
    [KnownType(typeof(L_Species))]
    [KnownType(typeof(L_Stock))]
    [KnownType(typeof(R_SDEventSDReader))]
    public partial class R_SDReader: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int r_SDReaderId
        {
            get { return _r_SDReaderId; }
            set
            {
                if (_r_SDReaderId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'r_SDReaderId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _r_SDReaderId = value;
                    OnPropertyChanged("r_SDReaderId");
                }
            }
        }
        private int _r_SDReaderId;
    
        [DataMember]
        public int dfuPersonId
        {
            get { return _dfuPersonId; }
            set
            {
                if (_dfuPersonId != value)
                {
                    ChangeTracker.RecordOriginalValue("dfuPersonId", _dfuPersonId);
                    if (!IsDeserializing)
                    {
                        if (DFUPerson != null && DFUPerson.dfuPersonId != value)
                        {
                            DFUPerson = null;
                        }
                    }
                    _dfuPersonId = value;
                    OnPropertyChanged("dfuPersonId");
                }
            }
        }
        private int _dfuPersonId;
    
        [DataMember]
        public string speciesCode
        {
            get { return _speciesCode; }
            set
            {
                if (_speciesCode != value)
                {
                    ChangeTracker.RecordOriginalValue("speciesCode", _speciesCode);
                    if (!IsDeserializing)
                    {
                        if (L_Species != null && L_Species.speciesCode != value)
                        {
                            L_Species = null;
                        }
                    }
                    _speciesCode = value;
                    OnPropertyChanged("speciesCode");
                }
            }
        }
        private string _speciesCode;
    
        [DataMember]
        public Nullable<int> stockId
        {
            get { return _stockId; }
            set
            {
                if (_stockId != value)
                {
                    ChangeTracker.RecordOriginalValue("stockId", _stockId);
                    if (!IsDeserializing)
                    {
                        if (L_Stock != null && L_Stock.L_stockId != value)
                        {
                            L_Stock = null;
                        }
                    }
                    _stockId = value;
                    OnPropertyChanged("stockId");
                }
            }
        }
        private Nullable<int> _stockId;
    
        [DataMember]
        public Nullable<int> firstYearAgeReadingGeneral
        {
            get { return _firstYearAgeReadingGeneral; }
            set
            {
                if (_firstYearAgeReadingGeneral != value)
                {
                    _firstYearAgeReadingGeneral = value;
                    OnPropertyChanged("firstYearAgeReadingGeneral");
                }
            }
        }
        private Nullable<int> _firstYearAgeReadingGeneral;
    
        [DataMember]
        public Nullable<int> firstYearAgeReadingCurrent
        {
            get { return _firstYearAgeReadingCurrent; }
            set
            {
                if (_firstYearAgeReadingCurrent != value)
                {
                    _firstYearAgeReadingCurrent = value;
                    OnPropertyChanged("firstYearAgeReadingCurrent");
                }
            }
        }
        private Nullable<int> _firstYearAgeReadingCurrent;
    
        [DataMember]
        public Nullable<int> sdReaderExperienceId
        {
            get { return _sdReaderExperienceId; }
            set
            {
                if (_sdReaderExperienceId != value)
                {
                    ChangeTracker.RecordOriginalValue("sdReaderExperienceId", _sdReaderExperienceId);
                    if (!IsDeserializing)
                    {
                        if (L_SDReaderExperience != null && L_SDReaderExperience.L_SDReaderExperienceId != value)
                        {
                            L_SDReaderExperience = null;
                        }
                    }
                    _sdReaderExperienceId = value;
                    OnPropertyChanged("sdReaderExperienceId");
                }
            }
        }
        private Nullable<int> _sdReaderExperienceId;
    
        [DataMember]
        public Nullable<int> sdPreparationMethodId
        {
            get { return _sdPreparationMethodId; }
            set
            {
                if (_sdPreparationMethodId != value)
                {
                    ChangeTracker.RecordOriginalValue("sdPreparationMethodId", _sdPreparationMethodId);
                    if (!IsDeserializing)
                    {
                        if (L_SDPreparationMethod != null && L_SDPreparationMethod.L_sdPreparationMethodId != value)
                        {
                            L_SDPreparationMethod = null;
                        }
                    }
                    _sdPreparationMethodId = value;
                    OnPropertyChanged("sdPreparationMethodId");
                }
            }
        }
        private Nullable<int> _sdPreparationMethodId;
    
        [DataMember]
        public string comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("comment");
                }
            }
        }
        private string _comment;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public DFUPerson DFUPerson
        {
            get { return _dFUPerson; }
            set
            {
                if (!ReferenceEquals(_dFUPerson, value))
                {
                    var previousValue = _dFUPerson;
                    _dFUPerson = value;
                    FixupDFUPerson(previousValue);
                    OnNavigationPropertyChanged("DFUPerson");
                }
            }
        }
        private DFUPerson _dFUPerson;
    
        [DataMember]
        public L_SDPreparationMethod L_SDPreparationMethod
        {
            get { return _l_SDPreparationMethod; }
            set
            {
                if (!ReferenceEquals(_l_SDPreparationMethod, value))
                {
                    var previousValue = _l_SDPreparationMethod;
                    _l_SDPreparationMethod = value;
                    FixupL_SDPreparationMethod(previousValue);
                    OnNavigationPropertyChanged("L_SDPreparationMethod");
                }
            }
        }
        private L_SDPreparationMethod _l_SDPreparationMethod;
    
        [DataMember]
        public L_SDReaderExperience L_SDReaderExperience
        {
            get { return _l_SDReaderExperience; }
            set
            {
                if (!ReferenceEquals(_l_SDReaderExperience, value))
                {
                    var previousValue = _l_SDReaderExperience;
                    _l_SDReaderExperience = value;
                    FixupL_SDReaderExperience(previousValue);
                    OnNavigationPropertyChanged("L_SDReaderExperience");
                }
            }
        }
        private L_SDReaderExperience _l_SDReaderExperience;
    
        [DataMember]
        public L_Species L_Species
        {
            get { return _l_Species; }
            set
            {
                if (!ReferenceEquals(_l_Species, value))
                {
                    var previousValue = _l_Species;
                    _l_Species = value;
                    FixupL_Species(previousValue);
                    OnNavigationPropertyChanged("L_Species");
                }
            }
        }
        private L_Species _l_Species;
    
        [DataMember]
        public L_Stock L_Stock
        {
            get { return _l_Stock; }
            set
            {
                if (!ReferenceEquals(_l_Stock, value))
                {
                    var previousValue = _l_Stock;
                    _l_Stock = value;
                    FixupL_Stock(previousValue);
                    OnNavigationPropertyChanged("L_Stock");
                }
            }
        }
        private L_Stock _l_Stock;
    
        [DataMember]
        public TrackableCollection<R_SDEventSDReader> R_SDEventSDReader
        {
            get
            {
                if (_r_SDEventSDReader == null)
                {
                    _r_SDEventSDReader = new TrackableCollection<R_SDEventSDReader>();
                    _r_SDEventSDReader.CollectionChanged += FixupR_SDEventSDReader;
                }
                return _r_SDEventSDReader;
            }
            set
            {
                if (!ReferenceEquals(_r_SDEventSDReader, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_r_SDEventSDReader != null)
                    {
                        _r_SDEventSDReader.CollectionChanged -= FixupR_SDEventSDReader;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (R_SDEventSDReader item in _r_SDEventSDReader)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _r_SDEventSDReader = value;
                    if (_r_SDEventSDReader != null)
                    {
                        _r_SDEventSDReader.CollectionChanged += FixupR_SDEventSDReader;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (R_SDEventSDReader item in _r_SDEventSDReader)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("R_SDEventSDReader");
                }
            }
        }
        private TrackableCollection<R_SDEventSDReader> _r_SDEventSDReader;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DFUPerson = null;
            L_SDPreparationMethod = null;
            L_SDReaderExperience = null;
            L_Species = null;
            L_Stock = null;
            R_SDEventSDReader.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupDFUPerson(DFUPerson previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.R_SDReader.Contains(this))
            {
                previousValue.R_SDReader.Remove(this);
            }
    
            if (DFUPerson != null)
            {
                if (!DFUPerson.R_SDReader.Contains(this))
                {
                    DFUPerson.R_SDReader.Add(this);
                }
    
                dfuPersonId = DFUPerson.dfuPersonId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DFUPerson")
                    && (ChangeTracker.OriginalValues["DFUPerson"] == DFUPerson))
                {
                    ChangeTracker.OriginalValues.Remove("DFUPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DFUPerson", previousValue);
                }
                if (DFUPerson != null && !DFUPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    DFUPerson.StartTracking();
                }
            }
        }
    
        private void FixupL_SDPreparationMethod(L_SDPreparationMethod previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.R_SDReader.Contains(this))
            {
                previousValue.R_SDReader.Remove(this);
            }
    
            if (L_SDPreparationMethod != null)
            {
                if (!L_SDPreparationMethod.R_SDReader.Contains(this))
                {
                    L_SDPreparationMethod.R_SDReader.Add(this);
                }
    
                sdPreparationMethodId = L_SDPreparationMethod.L_sdPreparationMethodId;
            }
            else if (!skipKeys)
            {
                sdPreparationMethodId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SDPreparationMethod")
                    && (ChangeTracker.OriginalValues["L_SDPreparationMethod"] == L_SDPreparationMethod))
                {
                    ChangeTracker.OriginalValues.Remove("L_SDPreparationMethod");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SDPreparationMethod", previousValue);
                }
                if (L_SDPreparationMethod != null && !L_SDPreparationMethod.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SDPreparationMethod.StartTracking();
                }
            }
        }
    
        private void FixupL_SDReaderExperience(L_SDReaderExperience previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.R_SDReader.Contains(this))
            {
                previousValue.R_SDReader.Remove(this);
            }
    
            if (L_SDReaderExperience != null)
            {
                if (!L_SDReaderExperience.R_SDReader.Contains(this))
                {
                    L_SDReaderExperience.R_SDReader.Add(this);
                }
    
                sdReaderExperienceId = L_SDReaderExperience.L_SDReaderExperienceId;
            }
            else if (!skipKeys)
            {
                sdReaderExperienceId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SDReaderExperience")
                    && (ChangeTracker.OriginalValues["L_SDReaderExperience"] == L_SDReaderExperience))
                {
                    ChangeTracker.OriginalValues.Remove("L_SDReaderExperience");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SDReaderExperience", previousValue);
                }
                if (L_SDReaderExperience != null && !L_SDReaderExperience.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SDReaderExperience.StartTracking();
                }
            }
        }
    
        private void FixupL_Species(L_Species previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.R_SDReader.Contains(this))
            {
                previousValue.R_SDReader.Remove(this);
            }
    
            if (L_Species != null)
            {
                if (!L_Species.R_SDReader.Contains(this))
                {
                    L_Species.R_SDReader.Add(this);
                }
    
                speciesCode = L_Species.speciesCode;
            }
            else if (!skipKeys)
            {
                speciesCode = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Species")
                    && (ChangeTracker.OriginalValues["L_Species"] == L_Species))
                {
                    ChangeTracker.OriginalValues.Remove("L_Species");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Species", previousValue);
                }
                if (L_Species != null && !L_Species.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Species.StartTracking();
                }
            }
        }
    
        private void FixupL_Stock(L_Stock previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.R_SDReader.Contains(this))
            {
                previousValue.R_SDReader.Remove(this);
            }
    
            if (L_Stock != null)
            {
                if (!L_Stock.R_SDReader.Contains(this))
                {
                    L_Stock.R_SDReader.Add(this);
                }
    
                stockId = L_Stock.L_stockId;
            }
            else if (!skipKeys)
            {
                stockId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Stock")
                    && (ChangeTracker.OriginalValues["L_Stock"] == L_Stock))
                {
                    ChangeTracker.OriginalValues.Remove("L_Stock");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Stock", previousValue);
                }
                if (L_Stock != null && !L_Stock.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Stock.StartTracking();
                }
            }
        }
    
        private void FixupR_SDEventSDReader(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_SDEventSDReader item in e.NewItems)
                {
                    item.SDReader = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_SDEventSDReader", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_SDEventSDReader item in e.OldItems)
                {
                    if (ReferenceEquals(item.SDReader, this))
                    {
                        item.SDReader = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_SDEventSDReader", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
