//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(L_DFUArea))]
    [KnownType(typeof(L_MaturityIndexMethod))]
    [KnownType(typeof(L_SexCode))]
    [KnownType(typeof(L_StatisticalRectangle))]
    [KnownType(typeof(L_Stock))]
    [KnownType(typeof(Maturity))]
    [KnownType(typeof(SDEvent))]
    [KnownType(typeof(SDFile))]
    [KnownType(typeof(L_EdgeStructure))]
    [KnownType(typeof(L_OtolithReadingRemark))]
    [KnownType(typeof(L_SDLightType))]
    [KnownType(typeof(L_SDOtolithDescription))]
    [KnownType(typeof(L_SDPreparationMethod))]
    [KnownType(typeof(L_Species))]
    [KnownType(typeof(DFUPerson))]
    public partial class SDSample: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int sdSampleId
        {
            get { return _sdSampleId; }
            set
            {
                if (_sdSampleId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'sdSampleId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _sdSampleId = value;
                    OnPropertyChanged("sdSampleId");
                }
            }
        }
        private int _sdSampleId;
    
        [DataMember]
        public System.Guid sdSampleGuid
        {
            get { return _sdSampleGuid; }
            set
            {
                if (_sdSampleGuid != value)
                {
                    _sdSampleGuid = value;
                    OnPropertyChanged("sdSampleGuid");
                }
            }
        }
        private System.Guid _sdSampleGuid;
    
        [DataMember]
        public int sdEventId
        {
            get { return _sdEventId; }
            set
            {
                if (_sdEventId != value)
                {
                    ChangeTracker.RecordOriginalValue("sdEventId", _sdEventId);
                    if (!IsDeserializing)
                    {
                        if (SDEvent != null && SDEvent.sdEventId != value)
                        {
                            SDEvent = null;
                        }
                    }
                    _sdEventId = value;
                    OnPropertyChanged("sdEventId");
                }
            }
        }
        private int _sdEventId;
    
        [DataMember]
        public string animalId
        {
            get { return _animalId; }
            set
            {
                if (_animalId != value)
                {
                    _animalId = value;
                    OnPropertyChanged("animalId");
                }
            }
        }
        private string _animalId;
    
        [DataMember]
        public Nullable<System.DateTime> catchDate
        {
            get { return _catchDate; }
            set
            {
                if (_catchDate != value)
                {
                    _catchDate = value;
                    OnPropertyChanged("catchDate");
                }
            }
        }
        private Nullable<System.DateTime> _catchDate;
    
        [DataMember]
        public string DFUArea
        {
            get { return _dFUArea; }
            set
            {
                if (_dFUArea != value)
                {
                    ChangeTracker.RecordOriginalValue("DFUArea", _dFUArea);
                    if (!IsDeserializing)
                    {
                        if (L_DFUArea != null && L_DFUArea.DFUArea != value)
                        {
                            L_DFUArea = null;
                        }
                    }
                    _dFUArea = value;
                    OnPropertyChanged("DFUArea");
                }
            }
        }
        private string _dFUArea;
    
        [DataMember]
        public string statisticalRectangle
        {
            get { return _statisticalRectangle; }
            set
            {
                if (_statisticalRectangle != value)
                {
                    ChangeTracker.RecordOriginalValue("statisticalRectangle", _statisticalRectangle);
                    if (!IsDeserializing)
                    {
                        if (L_StatisticalRectangle != null && L_StatisticalRectangle.statisticalRectangle != value)
                        {
                            L_StatisticalRectangle = null;
                        }
                    }
                    _statisticalRectangle = value;
                    OnPropertyChanged("statisticalRectangle");
                }
            }
        }
        private string _statisticalRectangle;
    
        [DataMember]
        public Nullable<double> latitude
        {
            get { return _latitude; }
            set
            {
                if (_latitude != value)
                {
                    _latitude = value;
                    OnPropertyChanged("latitude");
                }
            }
        }
        private Nullable<double> _latitude;
    
        [DataMember]
        public Nullable<double> longitude
        {
            get { return _longitude; }
            set
            {
                if (_longitude != value)
                {
                    _longitude = value;
                    OnPropertyChanged("longitude");
                }
            }
        }
        private Nullable<double> _longitude;
    
        [DataMember]
        public Nullable<int> stockId
        {
            get { return _stockId; }
            set
            {
                if (_stockId != value)
                {
                    ChangeTracker.RecordOriginalValue("stockId", _stockId);
                    if (!IsDeserializing)
                    {
                        if (L_Stock != null && L_Stock.L_stockId != value)
                        {
                            L_Stock = null;
                        }
                    }
                    _stockId = value;
                    OnPropertyChanged("stockId");
                }
            }
        }
        private Nullable<int> _stockId;
    
        [DataMember]
        public string sexCode
        {
            get { return _sexCode; }
            set
            {
                if (_sexCode != value)
                {
                    ChangeTracker.RecordOriginalValue("sexCode", _sexCode);
                    if (!IsDeserializing)
                    {
                        if (L_SexCode != null && L_SexCode.sexCode != value)
                        {
                            L_SexCode = null;
                        }
                    }
                    _sexCode = value;
                    OnPropertyChanged("sexCode");
                }
            }
        }
        private string _sexCode;
    
        [DataMember]
        public Nullable<int> fishLengthMM
        {
            get { return _fishLengthMM; }
            set
            {
                if (_fishLengthMM != value)
                {
                    _fishLengthMM = value;
                    OnPropertyChanged("fishLengthMM");
                }
            }
        }
        private Nullable<int> _fishLengthMM;
    
        [DataMember]
        public Nullable<decimal> fishWeightG
        {
            get { return _fishWeightG; }
            set
            {
                if (_fishWeightG != value)
                {
                    _fishWeightG = value;
                    OnPropertyChanged("fishWeightG");
                }
            }
        }
        private Nullable<decimal> _fishWeightG;
    
        [DataMember]
        public string maturityIndexMethod
        {
            get { return _maturityIndexMethod; }
            set
            {
                if (_maturityIndexMethod != value)
                {
                    ChangeTracker.RecordOriginalValue("maturityIndexMethod", _maturityIndexMethod);
                    if (!IsDeserializing)
                    {
                        if (L_MaturityIndexMethod != null && L_MaturityIndexMethod.maturityIndexMethod != value)
                        {
                            L_MaturityIndexMethod = null;
                        }
                    }
                    _maturityIndexMethod = value;
                    OnPropertyChanged("maturityIndexMethod");
                }
            }
        }
        private string _maturityIndexMethod;
    
        [DataMember]
        public Nullable<int> maturityId
        {
            get { return _maturityId; }
            set
            {
                if (_maturityId != value)
                {
                    ChangeTracker.RecordOriginalValue("maturityId", _maturityId);
                    if (!IsDeserializing)
                    {
                        if (Maturity != null && Maturity.maturityId != value)
                        {
                            Maturity = null;
                        }
                    }
                    _maturityId = value;
                    OnPropertyChanged("maturityId");
                }
            }
        }
        private Nullable<int> _maturityId;
    
        [DataMember]
        public string comments
        {
            get { return _comments; }
            set
            {
                if (_comments != value)
                {
                    _comments = value;
                    OnPropertyChanged("comments");
                }
            }
        }
        private string _comments;
    
        [DataMember]
        public Nullable<int> createdById
        {
            get { return _createdById; }
            set
            {
                if (_createdById != value)
                {
                    ChangeTracker.RecordOriginalValue("createdById", _createdById);
                    if (!IsDeserializing)
                    {
                        if (DFUPerson != null && DFUPerson.dfuPersonId != value)
                        {
                            DFUPerson = null;
                        }
                    }
                    _createdById = value;
                    OnPropertyChanged("createdById");
                }
            }
        }
        private Nullable<int> _createdById;
    
        [DataMember]
        public string createdByUserName
        {
            get { return _createdByUserName; }
            set
            {
                if (_createdByUserName != value)
                {
                    _createdByUserName = value;
                    OnPropertyChanged("createdByUserName");
                }
            }
        }
        private string _createdByUserName;
    
        [DataMember]
        public Nullable<System.DateTime> createdTime
        {
            get { return _createdTime; }
            set
            {
                if (_createdTime != value)
                {
                    _createdTime = value;
                    OnPropertyChanged("createdTime");
                }
            }
        }
        private Nullable<System.DateTime> _createdTime;
    
        [DataMember]
        public Nullable<System.DateTime> modifiedTime
        {
            get { return _modifiedTime; }
            set
            {
                if (_modifiedTime != value)
                {
                    _modifiedTime = value;
                    OnPropertyChanged("modifiedTime");
                }
            }
        }
        private Nullable<System.DateTime> _modifiedTime;
    
        [DataMember]
        public string cruise
        {
            get { return _cruise; }
            set
            {
                if (_cruise != value)
                {
                    _cruise = value;
                    OnPropertyChanged("cruise");
                }
            }
        }
        private string _cruise;
    
        [DataMember]
        public string trip
        {
            get { return _trip; }
            set
            {
                if (_trip != value)
                {
                    _trip = value;
                    OnPropertyChanged("trip");
                }
            }
        }
        private string _trip;
    
        [DataMember]
        public string station
        {
            get { return _station; }
            set
            {
                if (_station != value)
                {
                    _station = value;
                    OnPropertyChanged("station");
                }
            }
        }
        private string _station;
    
        [DataMember]
        public Nullable<int> sdPreparationMethodId
        {
            get { return _sdPreparationMethodId; }
            set
            {
                if (_sdPreparationMethodId != value)
                {
                    ChangeTracker.RecordOriginalValue("sdPreparationMethodId", _sdPreparationMethodId);
                    if (!IsDeserializing)
                    {
                        if (L_SDPreparationMethod != null && L_SDPreparationMethod.L_sdPreparationMethodId != value)
                        {
                            L_SDPreparationMethod = null;
                        }
                    }
                    _sdPreparationMethodId = value;
                    OnPropertyChanged("sdPreparationMethodId");
                }
            }
        }
        private Nullable<int> _sdPreparationMethodId;
    
        [DataMember]
        public Nullable<int> sdLightTypeId
        {
            get { return _sdLightTypeId; }
            set
            {
                if (_sdLightTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("sdLightTypeId", _sdLightTypeId);
                    if (!IsDeserializing)
                    {
                        if (L_SDLightType != null && L_SDLightType.L_sdLightTypeId != value)
                        {
                            L_SDLightType = null;
                        }
                    }
                    _sdLightTypeId = value;
                    OnPropertyChanged("sdLightTypeId");
                }
            }
        }
        private Nullable<int> _sdLightTypeId;
    
        [DataMember]
        public Nullable<int> sdOtolithDescriptionId
        {
            get { return _sdOtolithDescriptionId; }
            set
            {
                if (_sdOtolithDescriptionId != value)
                {
                    ChangeTracker.RecordOriginalValue("sdOtolithDescriptionId", _sdOtolithDescriptionId);
                    if (!IsDeserializing)
                    {
                        if (L_SDOtolithDescription != null && L_SDOtolithDescription.L_sdOtolithDescriptionId != value)
                        {
                            L_SDOtolithDescription = null;
                        }
                    }
                    _sdOtolithDescriptionId = value;
                    OnPropertyChanged("sdOtolithDescriptionId");
                }
            }
        }
        private Nullable<int> _sdOtolithDescriptionId;
    
        [DataMember]
        public Nullable<int> otolithReadingRemarkId
        {
            get { return _otolithReadingRemarkId; }
            set
            {
                if (_otolithReadingRemarkId != value)
                {
                    ChangeTracker.RecordOriginalValue("otolithReadingRemarkId", _otolithReadingRemarkId);
                    if (!IsDeserializing)
                    {
                        if (L_OtolithReadingRemark != null && L_OtolithReadingRemark.L_OtolithReadingRemarkID != value)
                        {
                            L_OtolithReadingRemark = null;
                        }
                    }
                    _otolithReadingRemarkId = value;
                    OnPropertyChanged("otolithReadingRemarkId");
                }
            }
        }
        private Nullable<int> _otolithReadingRemarkId;
    
        [DataMember]
        public string edgeStructure
        {
            get { return _edgeStructure; }
            set
            {
                if (_edgeStructure != value)
                {
                    ChangeTracker.RecordOriginalValue("edgeStructure", _edgeStructure);
                    if (!IsDeserializing)
                    {
                        if (L_EdgeStructure != null && L_EdgeStructure.edgeStructure != value)
                        {
                            L_EdgeStructure = null;
                        }
                    }
                    _edgeStructure = value;
                    OnPropertyChanged("edgeStructure");
                }
            }
        }
        private string _edgeStructure;
    
        [DataMember]
        public bool readOnly
        {
            get { return _readOnly; }
            set
            {
                if (_readOnly != value)
                {
                    _readOnly = value;
                    OnPropertyChanged("readOnly");
                }
            }
        }
        private bool _readOnly;
    
        [DataMember]
        public string importStatus
        {
            get { return _importStatus; }
            set
            {
                if (_importStatus != value)
                {
                    _importStatus = value;
                    OnPropertyChanged("importStatus");
                }
            }
        }
        private string _importStatus;
    
        [DataMember]
        public string speciesCode
        {
            get { return _speciesCode; }
            set
            {
                if (_speciesCode != value)
                {
                    ChangeTracker.RecordOriginalValue("speciesCode", _speciesCode);
                    if (!IsDeserializing)
                    {
                        if (L_Species != null && L_Species.speciesCode != value)
                        {
                            L_Species = null;
                        }
                    }
                    _speciesCode = value;
                    OnPropertyChanged("speciesCode");
                }
            }
        }
        private string _speciesCode;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public L_DFUArea L_DFUArea
        {
            get { return _l_DFUArea; }
            set
            {
                if (!ReferenceEquals(_l_DFUArea, value))
                {
                    var previousValue = _l_DFUArea;
                    _l_DFUArea = value;
                    FixupL_DFUArea(previousValue);
                    OnNavigationPropertyChanged("L_DFUArea");
                }
            }
        }
        private L_DFUArea _l_DFUArea;
    
        [DataMember]
        public L_MaturityIndexMethod L_MaturityIndexMethod
        {
            get { return _l_MaturityIndexMethod; }
            set
            {
                if (!ReferenceEquals(_l_MaturityIndexMethod, value))
                {
                    var previousValue = _l_MaturityIndexMethod;
                    _l_MaturityIndexMethod = value;
                    FixupL_MaturityIndexMethod(previousValue);
                    OnNavigationPropertyChanged("L_MaturityIndexMethod");
                }
            }
        }
        private L_MaturityIndexMethod _l_MaturityIndexMethod;
    
        [DataMember]
        public L_SexCode L_SexCode
        {
            get { return _l_SexCode; }
            set
            {
                if (!ReferenceEquals(_l_SexCode, value))
                {
                    var previousValue = _l_SexCode;
                    _l_SexCode = value;
                    FixupL_SexCode(previousValue);
                    OnNavigationPropertyChanged("L_SexCode");
                }
            }
        }
        private L_SexCode _l_SexCode;
    
        [DataMember]
        public L_StatisticalRectangle L_StatisticalRectangle
        {
            get { return _l_StatisticalRectangle; }
            set
            {
                if (!ReferenceEquals(_l_StatisticalRectangle, value))
                {
                    var previousValue = _l_StatisticalRectangle;
                    _l_StatisticalRectangle = value;
                    FixupL_StatisticalRectangle(previousValue);
                    OnNavigationPropertyChanged("L_StatisticalRectangle");
                }
            }
        }
        private L_StatisticalRectangle _l_StatisticalRectangle;
    
        [DataMember]
        public L_Stock L_Stock
        {
            get { return _l_Stock; }
            set
            {
                if (!ReferenceEquals(_l_Stock, value))
                {
                    var previousValue = _l_Stock;
                    _l_Stock = value;
                    FixupL_Stock(previousValue);
                    OnNavigationPropertyChanged("L_Stock");
                }
            }
        }
        private L_Stock _l_Stock;
    
        [DataMember]
        public Maturity Maturity
        {
            get { return _maturity; }
            set
            {
                if (!ReferenceEquals(_maturity, value))
                {
                    var previousValue = _maturity;
                    _maturity = value;
                    FixupMaturity(previousValue);
                    OnNavigationPropertyChanged("Maturity");
                }
            }
        }
        private Maturity _maturity;
    
        [DataMember]
        public SDEvent SDEvent
        {
            get { return _sDEvent; }
            set
            {
                if (!ReferenceEquals(_sDEvent, value))
                {
                    var previousValue = _sDEvent;
                    _sDEvent = value;
                    FixupSDEvent(previousValue);
                    OnNavigationPropertyChanged("SDEvent");
                }
            }
        }
        private SDEvent _sDEvent;
    
        [DataMember]
        public TrackableCollection<SDFile> SDFile
        {
            get
            {
                if (_sDFile == null)
                {
                    _sDFile = new TrackableCollection<SDFile>();
                    _sDFile.CollectionChanged += FixupSDFile;
                }
                return _sDFile;
            }
            set
            {
                if (!ReferenceEquals(_sDFile, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sDFile != null)
                    {
                        _sDFile.CollectionChanged -= FixupSDFile;
                    }
                    _sDFile = value;
                    if (_sDFile != null)
                    {
                        _sDFile.CollectionChanged += FixupSDFile;
                    }
                    OnNavigationPropertyChanged("SDFile");
                }
            }
        }
        private TrackableCollection<SDFile> _sDFile;
    
        [DataMember]
        public L_EdgeStructure L_EdgeStructure
        {
            get { return _l_EdgeStructure; }
            set
            {
                if (!ReferenceEquals(_l_EdgeStructure, value))
                {
                    var previousValue = _l_EdgeStructure;
                    _l_EdgeStructure = value;
                    FixupL_EdgeStructure(previousValue);
                    OnNavigationPropertyChanged("L_EdgeStructure");
                }
            }
        }
        private L_EdgeStructure _l_EdgeStructure;
    
        [DataMember]
        public L_OtolithReadingRemark L_OtolithReadingRemark
        {
            get { return _l_OtolithReadingRemark; }
            set
            {
                if (!ReferenceEquals(_l_OtolithReadingRemark, value))
                {
                    var previousValue = _l_OtolithReadingRemark;
                    _l_OtolithReadingRemark = value;
                    FixupL_OtolithReadingRemark(previousValue);
                    OnNavigationPropertyChanged("L_OtolithReadingRemark");
                }
            }
        }
        private L_OtolithReadingRemark _l_OtolithReadingRemark;
    
        [DataMember]
        public L_SDLightType L_SDLightType
        {
            get { return _l_SDLightType; }
            set
            {
                if (!ReferenceEquals(_l_SDLightType, value))
                {
                    var previousValue = _l_SDLightType;
                    _l_SDLightType = value;
                    FixupL_SDLightType(previousValue);
                    OnNavigationPropertyChanged("L_SDLightType");
                }
            }
        }
        private L_SDLightType _l_SDLightType;
    
        [DataMember]
        public L_SDOtolithDescription L_SDOtolithDescription
        {
            get { return _l_SDOtolithDescription; }
            set
            {
                if (!ReferenceEquals(_l_SDOtolithDescription, value))
                {
                    var previousValue = _l_SDOtolithDescription;
                    _l_SDOtolithDescription = value;
                    FixupL_SDOtolithDescription(previousValue);
                    OnNavigationPropertyChanged("L_SDOtolithDescription");
                }
            }
        }
        private L_SDOtolithDescription _l_SDOtolithDescription;
    
        [DataMember]
        public L_SDPreparationMethod L_SDPreparationMethod
        {
            get { return _l_SDPreparationMethod; }
            set
            {
                if (!ReferenceEquals(_l_SDPreparationMethod, value))
                {
                    var previousValue = _l_SDPreparationMethod;
                    _l_SDPreparationMethod = value;
                    FixupL_SDPreparationMethod(previousValue);
                    OnNavigationPropertyChanged("L_SDPreparationMethod");
                }
            }
        }
        private L_SDPreparationMethod _l_SDPreparationMethod;
    
        [DataMember]
        public L_Species L_Species
        {
            get { return _l_Species; }
            set
            {
                if (!ReferenceEquals(_l_Species, value))
                {
                    var previousValue = _l_Species;
                    _l_Species = value;
                    FixupL_Species(previousValue);
                    OnNavigationPropertyChanged("L_Species");
                }
            }
        }
        private L_Species _l_Species;
    
        [DataMember]
        public DFUPerson DFUPerson
        {
            get { return _dFUPerson; }
            set
            {
                if (!ReferenceEquals(_dFUPerson, value))
                {
                    var previousValue = _dFUPerson;
                    _dFUPerson = value;
                    FixupDFUPerson(previousValue);
                    OnNavigationPropertyChanged("DFUPerson");
                }
            }
        }
        private DFUPerson _dFUPerson;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            L_DFUArea = null;
            L_MaturityIndexMethod = null;
            L_SexCode = null;
            L_StatisticalRectangle = null;
            L_Stock = null;
            Maturity = null;
            SDEvent = null;
            SDFile.Clear();
            L_EdgeStructure = null;
            L_OtolithReadingRemark = null;
            L_SDLightType = null;
            L_SDOtolithDescription = null;
            L_SDPreparationMethod = null;
            L_Species = null;
            DFUPerson = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupL_DFUArea(L_DFUArea previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_DFUArea != null)
            {
                DFUArea = L_DFUArea.DFUArea;
            }
    
            else if (!skipKeys)
            {
                DFUArea = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_DFUArea")
                    && (ChangeTracker.OriginalValues["L_DFUArea"] == L_DFUArea))
                {
                    ChangeTracker.OriginalValues.Remove("L_DFUArea");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_DFUArea", previousValue);
                }
                if (L_DFUArea != null && !L_DFUArea.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_DFUArea.StartTracking();
                }
            }
        }
    
        private void FixupL_MaturityIndexMethod(L_MaturityIndexMethod previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_MaturityIndexMethod != null)
            {
                maturityIndexMethod = L_MaturityIndexMethod.maturityIndexMethod;
            }
    
            else if (!skipKeys)
            {
                maturityIndexMethod = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_MaturityIndexMethod")
                    && (ChangeTracker.OriginalValues["L_MaturityIndexMethod"] == L_MaturityIndexMethod))
                {
                    ChangeTracker.OriginalValues.Remove("L_MaturityIndexMethod");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_MaturityIndexMethod", previousValue);
                }
                if (L_MaturityIndexMethod != null && !L_MaturityIndexMethod.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_MaturityIndexMethod.StartTracking();
                }
            }
        }
    
        private void FixupL_SexCode(L_SexCode previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_SexCode != null)
            {
                sexCode = L_SexCode.sexCode;
            }
    
            else if (!skipKeys)
            {
                sexCode = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SexCode")
                    && (ChangeTracker.OriginalValues["L_SexCode"] == L_SexCode))
                {
                    ChangeTracker.OriginalValues.Remove("L_SexCode");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SexCode", previousValue);
                }
                if (L_SexCode != null && !L_SexCode.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SexCode.StartTracking();
                }
            }
        }
    
        private void FixupL_StatisticalRectangle(L_StatisticalRectangle previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_StatisticalRectangle != null)
            {
                statisticalRectangle = L_StatisticalRectangle.statisticalRectangle;
            }
    
            else if (!skipKeys)
            {
                statisticalRectangle = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_StatisticalRectangle")
                    && (ChangeTracker.OriginalValues["L_StatisticalRectangle"] == L_StatisticalRectangle))
                {
                    ChangeTracker.OriginalValues.Remove("L_StatisticalRectangle");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_StatisticalRectangle", previousValue);
                }
                if (L_StatisticalRectangle != null && !L_StatisticalRectangle.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_StatisticalRectangle.StartTracking();
                }
            }
        }
    
        private void FixupL_Stock(L_Stock previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_Stock != null)
            {
                stockId = L_Stock.L_stockId;
            }
    
            else if (!skipKeys)
            {
                stockId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Stock")
                    && (ChangeTracker.OriginalValues["L_Stock"] == L_Stock))
                {
                    ChangeTracker.OriginalValues.Remove("L_Stock");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Stock", previousValue);
                }
                if (L_Stock != null && !L_Stock.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Stock.StartTracking();
                }
            }
        }
    
        private void FixupMaturity(Maturity previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (Maturity != null)
            {
                maturityId = Maturity.maturityId;
            }
    
            else if (!skipKeys)
            {
                maturityId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Maturity")
                    && (ChangeTracker.OriginalValues["Maturity"] == Maturity))
                {
                    ChangeTracker.OriginalValues.Remove("Maturity");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Maturity", previousValue);
                }
                if (Maturity != null && !Maturity.ChangeTracker.ChangeTrackingEnabled)
                {
                    Maturity.StartTracking();
                }
            }
        }
    
        private void FixupSDEvent(SDEvent previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SDSample.Contains(this))
            {
                previousValue.SDSample.Remove(this);
            }
    
            if (SDEvent != null)
            {
                if (!SDEvent.SDSample.Contains(this))
                {
                    SDEvent.SDSample.Add(this);
                }
    
                sdEventId = SDEvent.sdEventId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SDEvent")
                    && (ChangeTracker.OriginalValues["SDEvent"] == SDEvent))
                {
                    ChangeTracker.OriginalValues.Remove("SDEvent");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SDEvent", previousValue);
                }
                if (SDEvent != null && !SDEvent.ChangeTracker.ChangeTrackingEnabled)
                {
                    SDEvent.StartTracking();
                }
            }
        }
    
        private void FixupL_EdgeStructure(L_EdgeStructure previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_EdgeStructure != null)
            {
                edgeStructure = L_EdgeStructure.edgeStructure;
            }
    
            else if (!skipKeys)
            {
                edgeStructure = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_EdgeStructure")
                    && (ChangeTracker.OriginalValues["L_EdgeStructure"] == L_EdgeStructure))
                {
                    ChangeTracker.OriginalValues.Remove("L_EdgeStructure");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_EdgeStructure", previousValue);
                }
                if (L_EdgeStructure != null && !L_EdgeStructure.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_EdgeStructure.StartTracking();
                }
            }
        }
    
        private void FixupL_OtolithReadingRemark(L_OtolithReadingRemark previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_OtolithReadingRemark != null)
            {
                otolithReadingRemarkId = L_OtolithReadingRemark.L_OtolithReadingRemarkID;
            }
    
            else if (!skipKeys)
            {
                otolithReadingRemarkId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_OtolithReadingRemark")
                    && (ChangeTracker.OriginalValues["L_OtolithReadingRemark"] == L_OtolithReadingRemark))
                {
                    ChangeTracker.OriginalValues.Remove("L_OtolithReadingRemark");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_OtolithReadingRemark", previousValue);
                }
                if (L_OtolithReadingRemark != null && !L_OtolithReadingRemark.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_OtolithReadingRemark.StartTracking();
                }
            }
        }
    
        private void FixupL_SDLightType(L_SDLightType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_SDLightType != null)
            {
                sdLightTypeId = L_SDLightType.L_sdLightTypeId;
            }
    
            else if (!skipKeys)
            {
                sdLightTypeId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SDLightType")
                    && (ChangeTracker.OriginalValues["L_SDLightType"] == L_SDLightType))
                {
                    ChangeTracker.OriginalValues.Remove("L_SDLightType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SDLightType", previousValue);
                }
                if (L_SDLightType != null && !L_SDLightType.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SDLightType.StartTracking();
                }
            }
        }
    
        private void FixupL_SDOtolithDescription(L_SDOtolithDescription previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_SDOtolithDescription != null)
            {
                sdOtolithDescriptionId = L_SDOtolithDescription.L_sdOtolithDescriptionId;
            }
    
            else if (!skipKeys)
            {
                sdOtolithDescriptionId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SDOtolithDescription")
                    && (ChangeTracker.OriginalValues["L_SDOtolithDescription"] == L_SDOtolithDescription))
                {
                    ChangeTracker.OriginalValues.Remove("L_SDOtolithDescription");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SDOtolithDescription", previousValue);
                }
                if (L_SDOtolithDescription != null && !L_SDOtolithDescription.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SDOtolithDescription.StartTracking();
                }
            }
        }
    
        private void FixupL_SDPreparationMethod(L_SDPreparationMethod previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_SDPreparationMethod != null)
            {
                sdPreparationMethodId = L_SDPreparationMethod.L_sdPreparationMethodId;
            }
    
            else if (!skipKeys)
            {
                sdPreparationMethodId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SDPreparationMethod")
                    && (ChangeTracker.OriginalValues["L_SDPreparationMethod"] == L_SDPreparationMethod))
                {
                    ChangeTracker.OriginalValues.Remove("L_SDPreparationMethod");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SDPreparationMethod", previousValue);
                }
                if (L_SDPreparationMethod != null && !L_SDPreparationMethod.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SDPreparationMethod.StartTracking();
                }
            }
        }
    
        private void FixupL_Species(L_Species previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SDSample.Contains(this))
            {
                previousValue.SDSample.Remove(this);
            }
    
            if (L_Species != null)
            {
                if (!L_Species.SDSample.Contains(this))
                {
                    L_Species.SDSample.Add(this);
                }
    
                speciesCode = L_Species.speciesCode;
            }
            else if (!skipKeys)
            {
                speciesCode = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Species")
                    && (ChangeTracker.OriginalValues["L_Species"] == L_Species))
                {
                    ChangeTracker.OriginalValues.Remove("L_Species");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Species", previousValue);
                }
                if (L_Species != null && !L_Species.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Species.StartTracking();
                }
            }
        }
    
        private void FixupDFUPerson(DFUPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SDSample.Contains(this))
            {
                previousValue.SDSample.Remove(this);
            }
    
            if (DFUPerson != null)
            {
                if (!DFUPerson.SDSample.Contains(this))
                {
                    DFUPerson.SDSample.Add(this);
                }
    
                createdById = DFUPerson.dfuPersonId;
            }
            else if (!skipKeys)
            {
                createdById = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DFUPerson")
                    && (ChangeTracker.OriginalValues["DFUPerson"] == DFUPerson))
                {
                    ChangeTracker.OriginalValues.Remove("DFUPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DFUPerson", previousValue);
                }
                if (DFUPerson != null && !DFUPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    DFUPerson.StartTracking();
                }
            }
        }
    
        private void FixupSDFile(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SDFile item in e.NewItems)
                {
                    item.SDSample = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SDFile", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SDFile item in e.OldItems)
                {
                    if (ReferenceEquals(item.SDSample, this))
                    {
                        item.SDSample = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SDFile", item);
                    }
                }
            }
        }

        #endregion

    }
}
