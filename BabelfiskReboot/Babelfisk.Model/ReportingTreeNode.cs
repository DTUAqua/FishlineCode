//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ReportingTreeNode))]
    [KnownType(typeof(Report))]
    public partial class ReportingTreeNode: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int reportingTreeNodeId
        {
            get { return _reportingTreeNodeId; }
            set
            {
                if (_reportingTreeNodeId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'reportingTreeNodeId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _reportingTreeNodeId = value;
                    OnPropertyChanged("reportingTreeNodeId");
                }
            }
        }
        private int _reportingTreeNodeId;
    
        [DataMember]
        public Nullable<int> parentTreeNodeId
        {
            get { return _parentTreeNodeId; }
            set
            {
                if (_parentTreeNodeId != value)
                {
                    ChangeTracker.RecordOriginalValue("parentTreeNodeId", _parentTreeNodeId);
                    if (!IsDeserializing)
                    {
                        if (ParentTreeNode != null && ParentTreeNode.reportingTreeNodeId != value)
                        {
                            ParentTreeNode = null;
                        }
                    }
                    _parentTreeNodeId = value;
                    OnPropertyChanged("parentTreeNodeId");
                }
            }
        }
        private Nullable<int> _parentTreeNodeId;
    
        [DataMember]
        public string name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("description");
                }
            }
        }
        private string _description;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ReportingTreeNode> ChildTreeNodes
        {
            get
            {
                if (_childTreeNodes == null)
                {
                    _childTreeNodes = new TrackableCollection<ReportingTreeNode>();
                    _childTreeNodes.CollectionChanged += FixupChildTreeNodes;
                }
                return _childTreeNodes;
            }
            set
            {
                if (!ReferenceEquals(_childTreeNodes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_childTreeNodes != null)
                    {
                        _childTreeNodes.CollectionChanged -= FixupChildTreeNodes;
                    }
                    _childTreeNodes = value;
                    if (_childTreeNodes != null)
                    {
                        _childTreeNodes.CollectionChanged += FixupChildTreeNodes;
                    }
                    OnNavigationPropertyChanged("ChildTreeNodes");
                }
            }
        }
        private TrackableCollection<ReportingTreeNode> _childTreeNodes;
    
        [DataMember]
        public ReportingTreeNode ParentTreeNode
        {
            get { return _parentTreeNode; }
            set
            {
                if (!ReferenceEquals(_parentTreeNode, value))
                {
                    var previousValue = _parentTreeNode;
                    _parentTreeNode = value;
                    FixupParentTreeNode(previousValue);
                    OnNavigationPropertyChanged("ParentTreeNode");
                }
            }
        }
        private ReportingTreeNode _parentTreeNode;
    
        [DataMember]
        public TrackableCollection<Report> Reports
        {
            get
            {
                if (_reports == null)
                {
                    _reports = new TrackableCollection<Report>();
                    _reports.CollectionChanged += FixupReports;
                }
                return _reports;
            }
            set
            {
                if (!ReferenceEquals(_reports, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_reports != null)
                    {
                        _reports.CollectionChanged -= FixupReports;
                    }
                    _reports = value;
                    if (_reports != null)
                    {
                        _reports.CollectionChanged += FixupReports;
                    }
                    OnNavigationPropertyChanged("Reports");
                }
            }
        }
        private TrackableCollection<Report> _reports;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ChildTreeNodes.Clear();
            ParentTreeNode = null;
            Reports.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupParentTreeNode(ReportingTreeNode previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ChildTreeNodes.Contains(this))
            {
                previousValue.ChildTreeNodes.Remove(this);
            }
    
            if (ParentTreeNode != null)
            {
                if (!ParentTreeNode.ChildTreeNodes.Contains(this))
                {
                    ParentTreeNode.ChildTreeNodes.Add(this);
                }
    
                parentTreeNodeId = ParentTreeNode.reportingTreeNodeId;
            }
            else if (!skipKeys)
            {
                parentTreeNodeId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ParentTreeNode")
                    && (ChangeTracker.OriginalValues["ParentTreeNode"] == ParentTreeNode))
                {
                    ChangeTracker.OriginalValues.Remove("ParentTreeNode");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ParentTreeNode", previousValue);
                }
                if (ParentTreeNode != null && !ParentTreeNode.ChangeTracker.ChangeTrackingEnabled)
                {
                    ParentTreeNode.StartTracking();
                }
            }
        }
    
        private void FixupChildTreeNodes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReportingTreeNode item in e.NewItems)
                {
                    item.ParentTreeNode = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ChildTreeNodes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReportingTreeNode item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentTreeNode, this))
                    {
                        item.ParentTreeNode = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ChildTreeNodes", item);
                    }
                }
            }
        }
    
        private void FixupReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Report item in e.NewItems)
                {
                    if (!item.ReportingTreeNodes.Contains(this))
                    {
                        item.ReportingTreeNodes.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Reports", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Report item in e.OldItems)
                {
                    if (item.ReportingTreeNodes.Contains(this))
                    {
                        item.ReportingTreeNodes.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Reports", item);
                    }
                }
            }
        }

        #endregion

    }
}
