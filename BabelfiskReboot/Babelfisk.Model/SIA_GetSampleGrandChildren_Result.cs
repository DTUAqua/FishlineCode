//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    
    public partial class SIA_GetSampleGrandChildren_Result : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int subSampleId
        {
            get { return _subSampleId; }
            set
            {
                if (_subSampleId != value)
                {
                    OnComplexPropertyChanging();
                    _subSampleId = value;
                    OnPropertyChanged("subSampleId");
                }
            }
        }
        private int _subSampleId;
    
        [DataMember]
        public int speciesListId
        {
            get { return _speciesListId; }
            set
            {
                if (_speciesListId != value)
                {
                    OnComplexPropertyChanging();
                    _speciesListId = value;
                    OnPropertyChanged("speciesListId");
                }
            }
        }
        private int _speciesListId;
    
        [DataMember]
        public int stepNum
        {
            get { return _stepNum; }
            set
            {
                if (_stepNum != value)
                {
                    OnComplexPropertyChanging();
                    _stepNum = value;
                    OnPropertyChanged("stepNum");
                }
            }
        }
        private int _stepNum;
    
        [DataMember]
        public string representative
        {
            get { return _representative; }
            set
            {
                if (_representative != value)
                {
                    OnComplexPropertyChanging();
                    _representative = value;
                    OnPropertyChanged("representative");
                }
            }
        }
        private string _representative;
    
        [DataMember]
        public Nullable<decimal> subSampleWeight
        {
            get { return _subSampleWeight; }
            set
            {
                if (_subSampleWeight != value)
                {
                    OnComplexPropertyChanging();
                    _subSampleWeight = value;
                    OnPropertyChanged("subSampleWeight");
                }
            }
        }
        private Nullable<decimal> _subSampleWeight;
    
        [DataMember]
        public Nullable<decimal> landingWeight
        {
            get { return _landingWeight; }
            set
            {
                if (_landingWeight != value)
                {
                    OnComplexPropertyChanging();
                    _landingWeight = value;
                    OnPropertyChanged("landingWeight");
                }
            }
        }
        private Nullable<decimal> _landingWeight;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, SIA_GetSampleGrandChildren_Result complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.subSampleId", parentPropertyName), complexObject == null ? null : (object)complexObject.subSampleId);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.speciesListId", parentPropertyName), complexObject == null ? null : (object)complexObject.speciesListId);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.stepNum", parentPropertyName), complexObject == null ? null : (object)complexObject.stepNum);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.representative", parentPropertyName), complexObject == null ? null : (object)complexObject.representative);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.subSampleWeight", parentPropertyName), complexObject == null ? null : (object)complexObject.subSampleWeight);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.landingWeight", parentPropertyName), complexObject == null ? null : (object)complexObject.landingWeight);
        }

        #endregion

    }
}
