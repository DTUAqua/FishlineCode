//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(L_CruiseType))]
    [KnownType(typeof(Trip))]
    public partial class L_TripType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int L_tripTypeId
        {
            get { return _l_tripTypeId; }
            set
            {
                if (_l_tripTypeId != value)
                {
                    _l_tripTypeId = value;
                    OnPropertyChanged("L_tripTypeId");
                }
            }
        }
        private int _l_tripTypeId;
    
        [DataMember]
        public string tripType
        {
            get { return _tripType; }
            set
            {
                if (_tripType != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'tripType' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tripType = value;
                    OnPropertyChanged("tripType");
                }
            }
        }
        private string _tripType;
    
        [DataMember]
        public string description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string cruiseType
        {
            get { return _cruiseType; }
            set
            {
                if (_cruiseType != value)
                {
                    ChangeTracker.RecordOriginalValue("cruiseType", _cruiseType);
                    if (!IsDeserializing)
                    {
                        if (L_CruiseType != null && L_CruiseType.cruiseType != value)
                        {
                            L_CruiseType = null;
                        }
                    }
                    _cruiseType = value;
                    OnPropertyChanged("cruiseType");
                }
            }
        }
        private string _cruiseType;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public L_CruiseType L_CruiseType
        {
            get { return _l_CruiseType; }
            set
            {
                if (!ReferenceEquals(_l_CruiseType, value))
                {
                    var previousValue = _l_CruiseType;
                    _l_CruiseType = value;
                    FixupL_CruiseType(previousValue);
                    OnNavigationPropertyChanged("L_CruiseType");
                }
            }
        }
        private L_CruiseType _l_CruiseType;
    
        [DataMember]
        public TrackableCollection<Trip> Trip
        {
            get
            {
                if (_trip == null)
                {
                    _trip = new TrackableCollection<Trip>();
                    _trip.CollectionChanged += FixupTrip;
                }
                return _trip;
            }
            set
            {
                if (!ReferenceEquals(_trip, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_trip != null)
                    {
                        _trip.CollectionChanged -= FixupTrip;
                    }
                    _trip = value;
                    if (_trip != null)
                    {
                        _trip.CollectionChanged += FixupTrip;
                    }
                    OnNavigationPropertyChanged("Trip");
                }
            }
        }
        private TrackableCollection<Trip> _trip;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            L_CruiseType = null;
            Trip.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupL_CruiseType(L_CruiseType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.L_TripType.Contains(this))
            {
                previousValue.L_TripType.Remove(this);
            }
    
            if (L_CruiseType != null)
            {
                if (!L_CruiseType.L_TripType.Contains(this))
                {
                    L_CruiseType.L_TripType.Add(this);
                }
    
                cruiseType = L_CruiseType.cruiseType;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_CruiseType")
                    && (ChangeTracker.OriginalValues["L_CruiseType"] == L_CruiseType))
                {
                    ChangeTracker.OriginalValues.Remove("L_CruiseType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_CruiseType", previousValue);
                }
                if (L_CruiseType != null && !L_CruiseType.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_CruiseType.StartTracking();
                }
            }
        }
    
        private void FixupTrip(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Trip item in e.NewItems)
                {
                    item.L_TripType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Trip", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Trip item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_TripType, this))
                    {
                        item.L_TripType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Trip", item);
                    }
                }
            }
        }

        #endregion

    }
}
