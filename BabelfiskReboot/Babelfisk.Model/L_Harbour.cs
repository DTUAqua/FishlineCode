//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(L_Nationality))]
    [KnownType(typeof(Trip))]
    public partial class L_Harbour: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int L_harbourId
        {
            get { return _l_harbourId; }
            set
            {
                if (_l_harbourId != value)
                {
                    _l_harbourId = value;
                    OnPropertyChanged("L_harbourId");
                }
            }
        }
        private int _l_harbourId;
    
        [DataMember]
        public string harbour
        {
            get { return _harbour; }
            set
            {
                if (_harbour != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'harbour' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _harbour = value;
                    OnPropertyChanged("harbour");
                }
            }
        }
        private string _harbour;
    
        [DataMember]
        public string description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string nationality
        {
            get { return _nationality; }
            set
            {
                if (_nationality != value)
                {
                    ChangeTracker.RecordOriginalValue("nationality", _nationality);
                    if (!IsDeserializing)
                    {
                        if (L_Nationality != null && L_Nationality.nationality != value)
                        {
                            L_Nationality = null;
                        }
                    }
                    _nationality = value;
                    OnPropertyChanged("nationality");
                }
            }
        }
        private string _nationality;
    
        [DataMember]
        public string harbourNES
        {
            get { return _harbourNES; }
            set
            {
                if (_harbourNES != value)
                {
                    _harbourNES = value;
                    OnPropertyChanged("harbourNES");
                }
            }
        }
        private string _harbourNES;
    
        [DataMember]
        public string harbourEU
        {
            get { return _harbourEU; }
            set
            {
                if (_harbourEU != value)
                {
                    _harbourEU = value;
                    OnPropertyChanged("harbourEU");
                }
            }
        }
        private string _harbourEU;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public L_Nationality L_Nationality
        {
            get { return _l_Nationality; }
            set
            {
                if (!ReferenceEquals(_l_Nationality, value))
                {
                    var previousValue = _l_Nationality;
                    _l_Nationality = value;
                    FixupL_Nationality(previousValue);
                    OnNavigationPropertyChanged("L_Nationality");
                }
            }
        }
        private L_Nationality _l_Nationality;
    
        [DataMember]
        public TrackableCollection<Trip> Trip
        {
            get
            {
                if (_trip == null)
                {
                    _trip = new TrackableCollection<Trip>();
                    _trip.CollectionChanged += FixupTrip;
                }
                return _trip;
            }
            set
            {
                if (!ReferenceEquals(_trip, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_trip != null)
                    {
                        _trip.CollectionChanged -= FixupTrip;
                    }
                    _trip = value;
                    if (_trip != null)
                    {
                        _trip.CollectionChanged += FixupTrip;
                    }
                    OnNavigationPropertyChanged("Trip");
                }
            }
        }
        private TrackableCollection<Trip> _trip;
    
        [DataMember]
        public TrackableCollection<Trip> Trip1
        {
            get
            {
                if (_trip1 == null)
                {
                    _trip1 = new TrackableCollection<Trip>();
                    _trip1.CollectionChanged += FixupTrip1;
                }
                return _trip1;
            }
            set
            {
                if (!ReferenceEquals(_trip1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_trip1 != null)
                    {
                        _trip1.CollectionChanged -= FixupTrip1;
                    }
                    _trip1 = value;
                    if (_trip1 != null)
                    {
                        _trip1.CollectionChanged += FixupTrip1;
                    }
                    OnNavigationPropertyChanged("Trip1");
                }
            }
        }
        private TrackableCollection<Trip> _trip1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            L_Nationality = null;
            Trip.Clear();
            Trip1.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupL_Nationality(L_Nationality previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.L_Harbour.Contains(this))
            {
                previousValue.L_Harbour.Remove(this);
            }
    
            if (L_Nationality != null)
            {
                if (!L_Nationality.L_Harbour.Contains(this))
                {
                    L_Nationality.L_Harbour.Add(this);
                }
    
                nationality = L_Nationality.nationality;
            }
            else if (!skipKeys)
            {
                nationality = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Nationality")
                    && (ChangeTracker.OriginalValues["L_Nationality"] == L_Nationality))
                {
                    ChangeTracker.OriginalValues.Remove("L_Nationality");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Nationality", previousValue);
                }
                if (L_Nationality != null && !L_Nationality.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Nationality.StartTracking();
                }
            }
        }
    
        private void FixupTrip(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Trip item in e.NewItems)
                {
                    item.L_Harbour = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Trip", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Trip item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_Harbour, this))
                    {
                        item.L_Harbour = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Trip", item);
                    }
                }
            }
        }
    
        private void FixupTrip1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Trip item in e.NewItems)
                {
                    item.L_Harbour1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Trip1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Trip item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_Harbour1, this))
                    {
                        item.L_Harbour1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Trip1", item);
                    }
                }
            }
        }

        #endregion

    }
}
