//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(L_SDEventType))]
    [KnownType(typeof(L_SDPurpose))]
    [KnownType(typeof(L_Species))]
    [KnownType(typeof(SDSample))]
    [KnownType(typeof(L_SDSampleType))]
    [KnownType(typeof(L_DFUArea))]
    [KnownType(typeof(R_SDEventSDReader))]
    [KnownType(typeof(DFUPerson))]
    public partial class SDEvent: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int sdEventId
        {
            get { return _sdEventId; }
            set
            {
                if (_sdEventId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'sdEventId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _sdEventId = value;
                    OnPropertyChanged("sdEventId");
                }
            }
        }
        private int _sdEventId;
    
        [DataMember]
        public System.Guid sdEventGuid
        {
            get { return _sdEventGuid; }
            set
            {
                if (_sdEventGuid != value)
                {
                    _sdEventGuid = value;
                    OnPropertyChanged("sdEventGuid");
                }
            }
        }
        private System.Guid _sdEventGuid;
    
        [DataMember]
        public string name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string speciesCode
        {
            get { return _speciesCode; }
            set
            {
                if (_speciesCode != value)
                {
                    ChangeTracker.RecordOriginalValue("speciesCode", _speciesCode);
                    if (!IsDeserializing)
                    {
                        if (L_Species != null && L_Species.speciesCode != value)
                        {
                            L_Species = null;
                        }
                    }
                    _speciesCode = value;
                    OnPropertyChanged("speciesCode");
                }
            }
        }
        private string _speciesCode;
    
        [DataMember]
        public Nullable<System.DateTime> startDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    _startDate = value;
                    OnPropertyChanged("startDate");
                }
            }
        }
        private Nullable<System.DateTime> _startDate;
    
        [DataMember]
        public Nullable<System.DateTime> endDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    _endDate = value;
                    OnPropertyChanged("endDate");
                }
            }
        }
        private Nullable<System.DateTime> _endDate;
    
        [DataMember]
        public int sdPurposeId
        {
            get { return _sdPurposeId; }
            set
            {
                if (_sdPurposeId != value)
                {
                    ChangeTracker.RecordOriginalValue("sdPurposeId", _sdPurposeId);
                    if (!IsDeserializing)
                    {
                        if (L_SDPurpose != null && L_SDPurpose.L_sdPurposeId != value)
                        {
                            L_SDPurpose = null;
                        }
                    }
                    _sdPurposeId = value;
                    OnPropertyChanged("sdPurposeId");
                }
            }
        }
        private int _sdPurposeId;
    
        [DataMember]
        public int sdEventTypeId
        {
            get { return _sdEventTypeId; }
            set
            {
                if (_sdEventTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("sdEventTypeId", _sdEventTypeId);
                    if (!IsDeserializing)
                    {
                        if (L_SDEventType != null && L_SDEventType.L_sdEventTypeId != value)
                        {
                            L_SDEventType = null;
                        }
                    }
                    _sdEventTypeId = value;
                    OnPropertyChanged("sdEventTypeId");
                }
            }
        }
        private int _sdEventTypeId;
    
        [DataMember]
        public Nullable<int> createdById
        {
            get { return _createdById; }
            set
            {
                if (_createdById != value)
                {
                    ChangeTracker.RecordOriginalValue("createdById", _createdById);
                    if (!IsDeserializing)
                    {
                        if (DFUPerson != null && DFUPerson.dfuPersonId != value)
                        {
                            DFUPerson = null;
                        }
                    }
                    _createdById = value;
                    OnPropertyChanged("createdById");
                }
            }
        }
        private Nullable<int> _createdById;
    
        [DataMember]
        public string createdByUserName
        {
            get { return _createdByUserName; }
            set
            {
                if (_createdByUserName != value)
                {
                    _createdByUserName = value;
                    OnPropertyChanged("createdByUserName");
                }
            }
        }
        private string _createdByUserName;
    
        [DataMember]
        public bool closed
        {
            get { return _closed; }
            set
            {
                if (_closed != value)
                {
                    _closed = value;
                    OnPropertyChanged("closed");
                }
            }
        }
        private bool _closed;
    
        [DataMember]
        public System.DateTime createdTime
        {
            get { return _createdTime; }
            set
            {
                if (_createdTime != value)
                {
                    _createdTime = value;
                    OnPropertyChanged("createdTime");
                }
            }
        }
        private System.DateTime _createdTime;
    
        [DataMember]
        public Nullable<int> year
        {
            get { return _year; }
            set
            {
                if (_year != value)
                {
                    _year = value;
                    OnPropertyChanged("year");
                }
            }
        }
        private Nullable<int> _year;
    
        [DataMember]
        public int sdSampleTypeId
        {
            get { return _sdSampleTypeId; }
            set
            {
                if (_sdSampleTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("sdSampleTypeId", _sdSampleTypeId);
                    if (!IsDeserializing)
                    {
                        if (L_SDSampleType != null && L_SDSampleType.L_sdSampleTypeId != value)
                        {
                            L_SDSampleType = null;
                        }
                    }
                    _sdSampleTypeId = value;
                    OnPropertyChanged("sdSampleTypeId");
                }
            }
        }
        private int _sdSampleTypeId;
    
        [DataMember]
        public string comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public string uiSDFileExtraColumns
        {
            get { return _uiSDFileExtraColumns; }
            set
            {
                if (_uiSDFileExtraColumns != value)
                {
                    _uiSDFileExtraColumns = value;
                    OnPropertyChanged("uiSDFileExtraColumns");
                }
            }
        }
        private string _uiSDFileExtraColumns;
    
        [DataMember]
        public string defaultImageFolders
        {
            get { return _defaultImageFolders; }
            set
            {
                if (_defaultImageFolders != value)
                {
                    _defaultImageFolders = value;
                    OnPropertyChanged("defaultImageFolders");
                }
            }
        }
        private string _defaultImageFolders;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public L_SDEventType L_SDEventType
        {
            get { return _l_SDEventType; }
            set
            {
                if (!ReferenceEquals(_l_SDEventType, value))
                {
                    var previousValue = _l_SDEventType;
                    _l_SDEventType = value;
                    FixupL_SDEventType(previousValue);
                    OnNavigationPropertyChanged("L_SDEventType");
                }
            }
        }
        private L_SDEventType _l_SDEventType;
    
        [DataMember]
        public L_SDPurpose L_SDPurpose
        {
            get { return _l_SDPurpose; }
            set
            {
                if (!ReferenceEquals(_l_SDPurpose, value))
                {
                    var previousValue = _l_SDPurpose;
                    _l_SDPurpose = value;
                    FixupL_SDPurpose(previousValue);
                    OnNavigationPropertyChanged("L_SDPurpose");
                }
            }
        }
        private L_SDPurpose _l_SDPurpose;
    
        [DataMember]
        public L_Species L_Species
        {
            get { return _l_Species; }
            set
            {
                if (!ReferenceEquals(_l_Species, value))
                {
                    var previousValue = _l_Species;
                    _l_Species = value;
                    FixupL_Species(previousValue);
                    OnNavigationPropertyChanged("L_Species");
                }
            }
        }
        private L_Species _l_Species;
    
        [DataMember]
        public TrackableCollection<SDSample> SDSample
        {
            get
            {
                if (_sDSample == null)
                {
                    _sDSample = new TrackableCollection<SDSample>();
                    _sDSample.CollectionChanged += FixupSDSample;
                }
                return _sDSample;
            }
            set
            {
                if (!ReferenceEquals(_sDSample, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sDSample != null)
                    {
                        _sDSample.CollectionChanged -= FixupSDSample;
                    }
                    _sDSample = value;
                    if (_sDSample != null)
                    {
                        _sDSample.CollectionChanged += FixupSDSample;
                    }
                    OnNavigationPropertyChanged("SDSample");
                }
            }
        }
        private TrackableCollection<SDSample> _sDSample;
    
        [DataMember]
        public L_SDSampleType L_SDSampleType
        {
            get { return _l_SDSampleType; }
            set
            {
                if (!ReferenceEquals(_l_SDSampleType, value))
                {
                    var previousValue = _l_SDSampleType;
                    _l_SDSampleType = value;
                    FixupL_SDSampleType(previousValue);
                    OnNavigationPropertyChanged("L_SDSampleType");
                }
            }
        }
        private L_SDSampleType _l_SDSampleType;
    
        [DataMember]
        public TrackableCollection<L_DFUArea> L_DFUAreas
        {
            get
            {
                if (_l_DFUAreas == null)
                {
                    _l_DFUAreas = new TrackableCollection<L_DFUArea>();
                    _l_DFUAreas.CollectionChanged += FixupL_DFUAreas;
                }
                return _l_DFUAreas;
            }
            set
            {
                if (!ReferenceEquals(_l_DFUAreas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_l_DFUAreas != null)
                    {
                        _l_DFUAreas.CollectionChanged -= FixupL_DFUAreas;
                    }
                    _l_DFUAreas = value;
                    if (_l_DFUAreas != null)
                    {
                        _l_DFUAreas.CollectionChanged += FixupL_DFUAreas;
                    }
                    OnNavigationPropertyChanged("L_DFUAreas");
                }
            }
        }
        private TrackableCollection<L_DFUArea> _l_DFUAreas;
    
        [DataMember]
        public TrackableCollection<R_SDEventSDReader> SDReaders
        {
            get
            {
                if (_sDReaders == null)
                {
                    _sDReaders = new TrackableCollection<R_SDEventSDReader>();
                    _sDReaders.CollectionChanged += FixupSDReaders;
                }
                return _sDReaders;
            }
            set
            {
                if (!ReferenceEquals(_sDReaders, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sDReaders != null)
                    {
                        _sDReaders.CollectionChanged -= FixupSDReaders;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (R_SDEventSDReader item in _sDReaders)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _sDReaders = value;
                    if (_sDReaders != null)
                    {
                        _sDReaders.CollectionChanged += FixupSDReaders;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (R_SDEventSDReader item in _sDReaders)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("SDReaders");
                }
            }
        }
        private TrackableCollection<R_SDEventSDReader> _sDReaders;
    
        [DataMember]
        public DFUPerson DFUPerson
        {
            get { return _dFUPerson; }
            set
            {
                if (!ReferenceEquals(_dFUPerson, value))
                {
                    var previousValue = _dFUPerson;
                    _dFUPerson = value;
                    FixupDFUPerson(previousValue);
                    OnNavigationPropertyChanged("DFUPerson");
                }
            }
        }
        private DFUPerson _dFUPerson;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            L_SDEventType = null;
            L_SDPurpose = null;
            L_Species = null;
            SDSample.Clear();
            L_SDSampleType = null;
            L_DFUAreas.Clear();
            SDReaders.Clear();
            DFUPerson = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupL_SDEventType(L_SDEventType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_SDEventType != null)
            {
                sdEventTypeId = L_SDEventType.L_sdEventTypeId;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SDEventType")
                    && (ChangeTracker.OriginalValues["L_SDEventType"] == L_SDEventType))
                {
                    ChangeTracker.OriginalValues.Remove("L_SDEventType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SDEventType", previousValue);
                }
                if (L_SDEventType != null && !L_SDEventType.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SDEventType.StartTracking();
                }
            }
        }
    
        private void FixupL_SDPurpose(L_SDPurpose previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_SDPurpose != null)
            {
                sdPurposeId = L_SDPurpose.L_sdPurposeId;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SDPurpose")
                    && (ChangeTracker.OriginalValues["L_SDPurpose"] == L_SDPurpose))
                {
                    ChangeTracker.OriginalValues.Remove("L_SDPurpose");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SDPurpose", previousValue);
                }
                if (L_SDPurpose != null && !L_SDPurpose.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SDPurpose.StartTracking();
                }
            }
        }
    
        private void FixupL_Species(L_Species previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_Species != null)
            {
                speciesCode = L_Species.speciesCode;
            }
    
            else if (!skipKeys)
            {
                speciesCode = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Species")
                    && (ChangeTracker.OriginalValues["L_Species"] == L_Species))
                {
                    ChangeTracker.OriginalValues.Remove("L_Species");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Species", previousValue);
                }
                if (L_Species != null && !L_Species.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Species.StartTracking();
                }
            }
        }
    
        private void FixupL_SDSampleType(L_SDSampleType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_SDSampleType != null)
            {
                sdSampleTypeId = L_SDSampleType.L_sdSampleTypeId;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SDSampleType")
                    && (ChangeTracker.OriginalValues["L_SDSampleType"] == L_SDSampleType))
                {
                    ChangeTracker.OriginalValues.Remove("L_SDSampleType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SDSampleType", previousValue);
                }
                if (L_SDSampleType != null && !L_SDSampleType.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SDSampleType.StartTracking();
                }
            }
        }
    
        private void FixupDFUPerson(DFUPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SDEvent.Contains(this))
            {
                previousValue.SDEvent.Remove(this);
            }
    
            if (DFUPerson != null)
            {
                if (!DFUPerson.SDEvent.Contains(this))
                {
                    DFUPerson.SDEvent.Add(this);
                }
    
                createdById = DFUPerson.dfuPersonId;
            }
            else if (!skipKeys)
            {
                createdById = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DFUPerson")
                    && (ChangeTracker.OriginalValues["DFUPerson"] == DFUPerson))
                {
                    ChangeTracker.OriginalValues.Remove("DFUPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DFUPerson", previousValue);
                }
                if (DFUPerson != null && !DFUPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    DFUPerson.StartTracking();
                }
            }
        }
    
        private void FixupSDSample(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SDSample item in e.NewItems)
                {
                    item.SDEvent = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SDSample", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SDSample item in e.OldItems)
                {
                    if (ReferenceEquals(item.SDEvent, this))
                    {
                        item.SDEvent = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SDSample", item);
                    }
                }
            }
        }
    
        private void FixupL_DFUAreas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (L_DFUArea item in e.NewItems)
                {
                    if (!item.SDEvent.Contains(this))
                    {
                        item.SDEvent.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("L_DFUAreas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (L_DFUArea item in e.OldItems)
                {
                    if (item.SDEvent.Contains(this))
                    {
                        item.SDEvent.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("L_DFUAreas", item);
                    }
                }
            }
        }
    
        private void FixupSDReaders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_SDEventSDReader item in e.NewItems)
                {
                    item.SDEvent = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SDReaders", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_SDEventSDReader item in e.OldItems)
                {
                    if (ReferenceEquals(item.SDEvent, this))
                    {
                        item.SDEvent = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SDReaders", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
