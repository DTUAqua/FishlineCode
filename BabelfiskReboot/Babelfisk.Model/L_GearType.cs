//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(L_Gear))]
    [KnownType(typeof(L_SampleType))]
    [KnownType(typeof(Sample))]
    [KnownType(typeof(R_GearTypeSelectionDevice))]
    public partial class L_GearType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int L_gearTypeId
        {
            get { return _l_gearTypeId; }
            set
            {
                if (_l_gearTypeId != value)
                {
                    _l_gearTypeId = value;
                    OnPropertyChanged("L_gearTypeId");
                }
            }
        }
        private int _l_gearTypeId;
    
        [DataMember]
        public string gearType
        {
            get { return _gearType; }
            set
            {
                if (_gearType != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'gearType' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _gearType = value;
                    OnPropertyChanged("gearType");
                }
            }
        }
        private string _gearType;
    
        [DataMember]
        public string description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<int> fmCode
        {
            get { return _fmCode; }
            set
            {
                if (_fmCode != value)
                {
                    _fmCode = value;
                    OnPropertyChanged("fmCode");
                }
            }
        }
        private Nullable<int> _fmCode;
    
        [DataMember]
        public string logbookCode
        {
            get { return _logbookCode; }
            set
            {
                if (_logbookCode != value)
                {
                    _logbookCode = value;
                    OnPropertyChanged("logbookCode");
                }
            }
        }
        private string _logbookCode;
    
        [DataMember]
        public string catchOperation
        {
            get { return _catchOperation; }
            set
            {
                if (_catchOperation != value)
                {
                    ChangeTracker.RecordOriginalValue("catchOperation", _catchOperation);
                    if (!IsDeserializing)
                    {
                        if (L_SampleType != null && L_SampleType.sampleType != value)
                        {
                            L_SampleType = null;
                        }
                    }
                    _catchOperation = value;
                    OnPropertyChanged("catchOperation");
                }
            }
        }
        private string _catchOperation;
    
        [DataMember]
        public bool showInVidUI
        {
            get { return _showInVidUI; }
            set
            {
                if (_showInVidUI != value)
                {
                    _showInVidUI = value;
                    OnPropertyChanged("showInVidUI");
                }
            }
        }
        private bool _showInVidUI;
    
        [DataMember]
        public bool showInSeaHvnUI
        {
            get { return _showInSeaHvnUI; }
            set
            {
                if (_showInSeaHvnUI != value)
                {
                    _showInSeaHvnUI = value;
                    OnPropertyChanged("showInSeaHvnUI");
                }
            }
        }
        private bool _showInSeaHvnUI;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<L_Gear> L_Gear
        {
            get
            {
                if (_l_Gear == null)
                {
                    _l_Gear = new TrackableCollection<L_Gear>();
                    _l_Gear.CollectionChanged += FixupL_Gear;
                }
                return _l_Gear;
            }
            set
            {
                if (!ReferenceEquals(_l_Gear, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_l_Gear != null)
                    {
                        _l_Gear.CollectionChanged -= FixupL_Gear;
                    }
                    _l_Gear = value;
                    if (_l_Gear != null)
                    {
                        _l_Gear.CollectionChanged += FixupL_Gear;
                    }
                    OnNavigationPropertyChanged("L_Gear");
                }
            }
        }
        private TrackableCollection<L_Gear> _l_Gear;
    
        [DataMember]
        public L_SampleType L_SampleType
        {
            get { return _l_SampleType; }
            set
            {
                if (!ReferenceEquals(_l_SampleType, value))
                {
                    var previousValue = _l_SampleType;
                    _l_SampleType = value;
                    FixupL_SampleType(previousValue);
                    OnNavigationPropertyChanged("L_SampleType");
                }
            }
        }
        private L_SampleType _l_SampleType;
    
        [DataMember]
        public TrackableCollection<Sample> Sample
        {
            get
            {
                if (_sample == null)
                {
                    _sample = new TrackableCollection<Sample>();
                    _sample.CollectionChanged += FixupSample;
                }
                return _sample;
            }
            set
            {
                if (!ReferenceEquals(_sample, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sample != null)
                    {
                        _sample.CollectionChanged -= FixupSample;
                    }
                    _sample = value;
                    if (_sample != null)
                    {
                        _sample.CollectionChanged += FixupSample;
                    }
                    OnNavigationPropertyChanged("Sample");
                }
            }
        }
        private TrackableCollection<Sample> _sample;
    
        [DataMember]
        public TrackableCollection<Sample> Sample1
        {
            get
            {
                if (_sample1 == null)
                {
                    _sample1 = new TrackableCollection<Sample>();
                    _sample1.CollectionChanged += FixupSample1;
                }
                return _sample1;
            }
            set
            {
                if (!ReferenceEquals(_sample1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sample1 != null)
                    {
                        _sample1.CollectionChanged -= FixupSample1;
                    }
                    _sample1 = value;
                    if (_sample1 != null)
                    {
                        _sample1.CollectionChanged += FixupSample1;
                    }
                    OnNavigationPropertyChanged("Sample1");
                }
            }
        }
        private TrackableCollection<Sample> _sample1;
    
        [DataMember]
        public TrackableCollection<R_GearTypeSelectionDevice> R_GearTypeSelectionDevice
        {
            get
            {
                if (_r_GearTypeSelectionDevice == null)
                {
                    _r_GearTypeSelectionDevice = new TrackableCollection<R_GearTypeSelectionDevice>();
                    _r_GearTypeSelectionDevice.CollectionChanged += FixupR_GearTypeSelectionDevice;
                }
                return _r_GearTypeSelectionDevice;
            }
            set
            {
                if (!ReferenceEquals(_r_GearTypeSelectionDevice, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_r_GearTypeSelectionDevice != null)
                    {
                        _r_GearTypeSelectionDevice.CollectionChanged -= FixupR_GearTypeSelectionDevice;
                    }
                    _r_GearTypeSelectionDevice = value;
                    if (_r_GearTypeSelectionDevice != null)
                    {
                        _r_GearTypeSelectionDevice.CollectionChanged += FixupR_GearTypeSelectionDevice;
                    }
                    OnNavigationPropertyChanged("R_GearTypeSelectionDevice");
                }
            }
        }
        private TrackableCollection<R_GearTypeSelectionDevice> _r_GearTypeSelectionDevice;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            L_Gear.Clear();
            L_SampleType = null;
            Sample.Clear();
            Sample1.Clear();
            R_GearTypeSelectionDevice.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupL_SampleType(L_SampleType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.L_GearType.Contains(this))
            {
                previousValue.L_GearType.Remove(this);
            }
    
            if (L_SampleType != null)
            {
                if (!L_SampleType.L_GearType.Contains(this))
                {
                    L_SampleType.L_GearType.Add(this);
                }
    
                catchOperation = L_SampleType.sampleType;
            }
            else if (!skipKeys)
            {
                catchOperation = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SampleType")
                    && (ChangeTracker.OriginalValues["L_SampleType"] == L_SampleType))
                {
                    ChangeTracker.OriginalValues.Remove("L_SampleType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SampleType", previousValue);
                }
                if (L_SampleType != null && !L_SampleType.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SampleType.StartTracking();
                }
            }
        }
    
        private void FixupL_Gear(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (L_Gear item in e.NewItems)
                {
                    item.L_GearType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("L_Gear", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (L_Gear item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_GearType, this))
                    {
                        item.L_GearType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("L_Gear", item);
                    }
                }
            }
        }
    
        private void FixupSample(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Sample item in e.NewItems)
                {
                    item.L_GearType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Sample", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Sample item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_GearType, this))
                    {
                        item.L_GearType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Sample", item);
                    }
                }
            }
        }
    
        private void FixupSample1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Sample item in e.NewItems)
                {
                    item.L_GearType1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Sample1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Sample item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_GearType1, this))
                    {
                        item.L_GearType1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Sample1", item);
                    }
                }
            }
        }
    
        private void FixupR_GearTypeSelectionDevice(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_GearTypeSelectionDevice item in e.NewItems)
                {
                    item.L_GearType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_GearTypeSelectionDevice", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_GearTypeSelectionDevice item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_GearType, this))
                    {
                        item.L_GearType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_GearTypeSelectionDevice", item);
                    }
                }
            }
        }

        #endregion

    }
}
