//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(L_LandingCategory))]
    [KnownType(typeof(Trip))]
    public partial class L_FisheryType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int L_fisheryTypeId
        {
            get { return _l_fisheryTypeId; }
            set
            {
                if (_l_fisheryTypeId != value)
                {
                    _l_fisheryTypeId = value;
                    OnPropertyChanged("L_fisheryTypeId");
                }
            }
        }
        private int _l_fisheryTypeId;
    
        [DataMember]
        public string fisheryType
        {
            get { return _fisheryType; }
            set
            {
                if (_fisheryType != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'fisheryType' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _fisheryType = value;
                    OnPropertyChanged("fisheryType");
                }
            }
        }
        private string _fisheryType;
    
        [DataMember]
        public string landingCategory
        {
            get { return _landingCategory; }
            set
            {
                if (_landingCategory != value)
                {
                    ChangeTracker.RecordOriginalValue("landingCategory", _landingCategory);
                    if (!IsDeserializing)
                    {
                        if (L_LandingCategory != null && L_LandingCategory.landingCategory != value)
                        {
                            L_LandingCategory = null;
                        }
                    }
                    _landingCategory = value;
                    OnPropertyChanged("landingCategory");
                }
            }
        }
        private string _landingCategory;
    
        [DataMember]
        public string description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("description");
                }
            }
        }
        private string _description;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public L_LandingCategory L_LandingCategory
        {
            get { return _l_LandingCategory; }
            set
            {
                if (!ReferenceEquals(_l_LandingCategory, value))
                {
                    var previousValue = _l_LandingCategory;
                    _l_LandingCategory = value;
                    FixupL_LandingCategory(previousValue);
                    OnNavigationPropertyChanged("L_LandingCategory");
                }
            }
        }
        private L_LandingCategory _l_LandingCategory;
    
        [DataMember]
        public TrackableCollection<Trip> Trip
        {
            get
            {
                if (_trip == null)
                {
                    _trip = new TrackableCollection<Trip>();
                    _trip.CollectionChanged += FixupTrip;
                }
                return _trip;
            }
            set
            {
                if (!ReferenceEquals(_trip, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_trip != null)
                    {
                        _trip.CollectionChanged -= FixupTrip;
                    }
                    _trip = value;
                    if (_trip != null)
                    {
                        _trip.CollectionChanged += FixupTrip;
                    }
                    OnNavigationPropertyChanged("Trip");
                }
            }
        }
        private TrackableCollection<Trip> _trip;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            L_LandingCategory = null;
            Trip.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupL_LandingCategory(L_LandingCategory previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.L_FisheryType.Contains(this))
            {
                previousValue.L_FisheryType.Remove(this);
            }
    
            if (L_LandingCategory != null)
            {
                if (!L_LandingCategory.L_FisheryType.Contains(this))
                {
                    L_LandingCategory.L_FisheryType.Add(this);
                }
    
                landingCategory = L_LandingCategory.landingCategory;
            }
            else if (!skipKeys)
            {
                landingCategory = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_LandingCategory")
                    && (ChangeTracker.OriginalValues["L_LandingCategory"] == L_LandingCategory))
                {
                    ChangeTracker.OriginalValues.Remove("L_LandingCategory");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_LandingCategory", previousValue);
                }
                if (L_LandingCategory != null && !L_LandingCategory.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_LandingCategory.StartTracking();
                }
            }
        }
    
        private void FixupTrip(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Trip item in e.NewItems)
                {
                    item.L_FisheryType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Trip", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Trip item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_FisheryType, this))
                    {
                        item.L_FisheryType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Trip", item);
                    }
                }
            }
        }

        #endregion

    }
}
