//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SDFile))]
    [KnownType(typeof(SDLine))]
    [KnownType(typeof(SDPoint))]
    [KnownType(typeof(L_OtolithReadingRemark))]
    [KnownType(typeof(L_SDAnalysisParameter))]
    [KnownType(typeof(L_EdgeStructure))]
    [KnownType(typeof(Age))]
    [KnownType(typeof(DFUPerson))]
    public partial class SDAnnotation: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int sdAnnotationId
        {
            get { return _sdAnnotationId; }
            set
            {
                if (_sdAnnotationId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'sdAnnotationId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _sdAnnotationId = value;
                    OnPropertyChanged("sdAnnotationId");
                }
            }
        }
        private int _sdAnnotationId;
    
        [DataMember]
        public System.Guid sdAnnotationGuid
        {
            get { return _sdAnnotationGuid; }
            set
            {
                if (_sdAnnotationGuid != value)
                {
                    _sdAnnotationGuid = value;
                    OnPropertyChanged("sdAnnotationGuid");
                }
            }
        }
        private System.Guid _sdAnnotationGuid;
    
        [DataMember]
        public int sdFileId
        {
            get { return _sdFileId; }
            set
            {
                if (_sdFileId != value)
                {
                    ChangeTracker.RecordOriginalValue("sdFileId", _sdFileId);
                    if (!IsDeserializing)
                    {
                        if (SDFile != null && SDFile.sdFileId != value)
                        {
                            SDFile = null;
                        }
                    }
                    _sdFileId = value;
                    OnPropertyChanged("sdFileId");
                }
            }
        }
        private int _sdFileId;
    
        [DataMember]
        public Nullable<int> createdById
        {
            get { return _createdById; }
            set
            {
                if (_createdById != value)
                {
                    ChangeTracker.RecordOriginalValue("createdById", _createdById);
                    if (!IsDeserializing)
                    {
                        if (DFUPerson != null && DFUPerson.dfuPersonId != value)
                        {
                            DFUPerson = null;
                        }
                    }
                    _createdById = value;
                    OnPropertyChanged("createdById");
                }
            }
        }
        private Nullable<int> _createdById;
    
        [DataMember]
        public string createdByUserName
        {
            get { return _createdByUserName; }
            set
            {
                if (_createdByUserName != value)
                {
                    _createdByUserName = value;
                    OnPropertyChanged("createdByUserName");
                }
            }
        }
        private string _createdByUserName;
    
        [DataMember]
        public Nullable<bool> isApproved
        {
            get { return _isApproved; }
            set
            {
                if (_isApproved != value)
                {
                    _isApproved = value;
                    OnPropertyChanged("isApproved");
                }
            }
        }
        private Nullable<bool> _isApproved;
    
        [DataMember]
        public Nullable<bool> isFixed
        {
            get { return _isFixed; }
            set
            {
                if (_isFixed != value)
                {
                    _isFixed = value;
                    OnPropertyChanged("isFixed");
                }
            }
        }
        private Nullable<bool> _isFixed;
    
        [DataMember]
        public Nullable<bool> isReadOnly
        {
            get { return _isReadOnly; }
            set
            {
                if (_isReadOnly != value)
                {
                    _isReadOnly = value;
                    OnPropertyChanged("isReadOnly");
                }
            }
        }
        private Nullable<bool> _isReadOnly;
    
        [DataMember]
        public Nullable<System.DateTime> createdTime
        {
            get { return _createdTime; }
            set
            {
                if (_createdTime != value)
                {
                    _createdTime = value;
                    OnPropertyChanged("createdTime");
                }
            }
        }
        private Nullable<System.DateTime> _createdTime;
    
        [DataMember]
        public Nullable<System.DateTime> modifiedTime
        {
            get { return _modifiedTime; }
            set
            {
                if (_modifiedTime != value)
                {
                    _modifiedTime = value;
                    OnPropertyChanged("modifiedTime");
                }
            }
        }
        private Nullable<System.DateTime> _modifiedTime;
    
        [DataMember]
        public Nullable<int> sdAnalysisParameterId
        {
            get { return _sdAnalysisParameterId; }
            set
            {
                if (_sdAnalysisParameterId != value)
                {
                    ChangeTracker.RecordOriginalValue("sdAnalysisParameterId", _sdAnalysisParameterId);
                    if (!IsDeserializing)
                    {
                        if (L_SDAnalysisParameter != null && L_SDAnalysisParameter.L_sdAnalysisParameterId != value)
                        {
                            L_SDAnalysisParameter = null;
                        }
                    }
                    _sdAnalysisParameterId = value;
                    OnPropertyChanged("sdAnalysisParameterId");
                }
            }
        }
        private Nullable<int> _sdAnalysisParameterId;
    
        [DataMember]
        public Nullable<int> otolithReadingRemarkId
        {
            get { return _otolithReadingRemarkId; }
            set
            {
                if (_otolithReadingRemarkId != value)
                {
                    ChangeTracker.RecordOriginalValue("otolithReadingRemarkId", _otolithReadingRemarkId);
                    if (!IsDeserializing)
                    {
                        if (L_OtolithReadingRemark != null && L_OtolithReadingRemark.L_OtolithReadingRemarkID != value)
                        {
                            L_OtolithReadingRemark = null;
                        }
                    }
                    _otolithReadingRemarkId = value;
                    OnPropertyChanged("otolithReadingRemarkId");
                }
            }
        }
        private Nullable<int> _otolithReadingRemarkId;
    
        [DataMember]
        public string comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public string edgeStructure
        {
            get { return _edgeStructure; }
            set
            {
                if (_edgeStructure != value)
                {
                    ChangeTracker.RecordOriginalValue("edgeStructure", _edgeStructure);
                    if (!IsDeserializing)
                    {
                        if (L_EdgeStructure != null && L_EdgeStructure.edgeStructure != value)
                        {
                            L_EdgeStructure = null;
                        }
                    }
                    _edgeStructure = value;
                    OnPropertyChanged("edgeStructure");
                }
            }
        }
        private string _edgeStructure;
    
        [DataMember]
        public Nullable<int> age
        {
            get { return _age; }
            set
            {
                if (_age != value)
                {
                    _age = value;
                    OnPropertyChanged("age");
                }
            }
        }
        private Nullable<int> _age;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public SDFile SDFile
        {
            get { return _sDFile; }
            set
            {
                if (!ReferenceEquals(_sDFile, value))
                {
                    var previousValue = _sDFile;
                    _sDFile = value;
                    FixupSDFile(previousValue);
                    OnNavigationPropertyChanged("SDFile");
                }
            }
        }
        private SDFile _sDFile;
    
        [DataMember]
        public TrackableCollection<SDLine> SDLine
        {
            get
            {
                if (_sDLine == null)
                {
                    _sDLine = new TrackableCollection<SDLine>();
                    _sDLine.CollectionChanged += FixupSDLine;
                }
                return _sDLine;
            }
            set
            {
                if (!ReferenceEquals(_sDLine, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sDLine != null)
                    {
                        _sDLine.CollectionChanged -= FixupSDLine;
                    }
                    _sDLine = value;
                    if (_sDLine != null)
                    {
                        _sDLine.CollectionChanged += FixupSDLine;
                    }
                    OnNavigationPropertyChanged("SDLine");
                }
            }
        }
        private TrackableCollection<SDLine> _sDLine;
    
        [DataMember]
        public TrackableCollection<SDPoint> SDPoint
        {
            get
            {
                if (_sDPoint == null)
                {
                    _sDPoint = new TrackableCollection<SDPoint>();
                    _sDPoint.CollectionChanged += FixupSDPoint;
                }
                return _sDPoint;
            }
            set
            {
                if (!ReferenceEquals(_sDPoint, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sDPoint != null)
                    {
                        _sDPoint.CollectionChanged -= FixupSDPoint;
                    }
                    _sDPoint = value;
                    if (_sDPoint != null)
                    {
                        _sDPoint.CollectionChanged += FixupSDPoint;
                    }
                    OnNavigationPropertyChanged("SDPoint");
                }
            }
        }
        private TrackableCollection<SDPoint> _sDPoint;
    
        [DataMember]
        public L_OtolithReadingRemark L_OtolithReadingRemark
        {
            get { return _l_OtolithReadingRemark; }
            set
            {
                if (!ReferenceEquals(_l_OtolithReadingRemark, value))
                {
                    var previousValue = _l_OtolithReadingRemark;
                    _l_OtolithReadingRemark = value;
                    FixupL_OtolithReadingRemark(previousValue);
                    OnNavigationPropertyChanged("L_OtolithReadingRemark");
                }
            }
        }
        private L_OtolithReadingRemark _l_OtolithReadingRemark;
    
        [DataMember]
        public L_SDAnalysisParameter L_SDAnalysisParameter
        {
            get { return _l_SDAnalysisParameter; }
            set
            {
                if (!ReferenceEquals(_l_SDAnalysisParameter, value))
                {
                    var previousValue = _l_SDAnalysisParameter;
                    _l_SDAnalysisParameter = value;
                    FixupL_SDAnalysisParameter(previousValue);
                    OnNavigationPropertyChanged("L_SDAnalysisParameter");
                }
            }
        }
        private L_SDAnalysisParameter _l_SDAnalysisParameter;
    
        [DataMember]
        public L_EdgeStructure L_EdgeStructure
        {
            get { return _l_EdgeStructure; }
            set
            {
                if (!ReferenceEquals(_l_EdgeStructure, value))
                {
                    var previousValue = _l_EdgeStructure;
                    _l_EdgeStructure = value;
                    FixupL_EdgeStructure(previousValue);
                    OnNavigationPropertyChanged("L_EdgeStructure");
                }
            }
        }
        private L_EdgeStructure _l_EdgeStructure;
    
        [DataMember]
        public TrackableCollection<Age> FishLineAge
        {
            get
            {
                if (_fishLineAge == null)
                {
                    _fishLineAge = new TrackableCollection<Age>();
                    _fishLineAge.CollectionChanged += FixupFishLineAge;
                }
                return _fishLineAge;
            }
            set
            {
                if (!ReferenceEquals(_fishLineAge, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_fishLineAge != null)
                    {
                        _fishLineAge.CollectionChanged -= FixupFishLineAge;
                    }
                    _fishLineAge = value;
                    if (_fishLineAge != null)
                    {
                        _fishLineAge.CollectionChanged += FixupFishLineAge;
                    }
                    OnNavigationPropertyChanged("FishLineAge");
                }
            }
        }
        private TrackableCollection<Age> _fishLineAge;
    
        [DataMember]
        public DFUPerson DFUPerson
        {
            get { return _dFUPerson; }
            set
            {
                if (!ReferenceEquals(_dFUPerson, value))
                {
                    var previousValue = _dFUPerson;
                    _dFUPerson = value;
                    FixupDFUPerson(previousValue);
                    OnNavigationPropertyChanged("DFUPerson");
                }
            }
        }
        private DFUPerson _dFUPerson;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SDFile = null;
            SDLine.Clear();
            SDPoint.Clear();
            L_OtolithReadingRemark = null;
            L_SDAnalysisParameter = null;
            L_EdgeStructure = null;
            FishLineAge.Clear();
            DFUPerson = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupSDFile(SDFile previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SDAnnotation.Contains(this))
            {
                previousValue.SDAnnotation.Remove(this);
            }
    
            if (SDFile != null)
            {
                if (!SDFile.SDAnnotation.Contains(this))
                {
                    SDFile.SDAnnotation.Add(this);
                }
    
                sdFileId = SDFile.sdFileId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SDFile")
                    && (ChangeTracker.OriginalValues["SDFile"] == SDFile))
                {
                    ChangeTracker.OriginalValues.Remove("SDFile");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SDFile", previousValue);
                }
                if (SDFile != null && !SDFile.ChangeTracker.ChangeTrackingEnabled)
                {
                    SDFile.StartTracking();
                }
            }
        }
    
        private void FixupL_OtolithReadingRemark(L_OtolithReadingRemark previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_OtolithReadingRemark != null)
            {
                otolithReadingRemarkId = L_OtolithReadingRemark.L_OtolithReadingRemarkID;
            }
    
            else if (!skipKeys)
            {
                otolithReadingRemarkId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_OtolithReadingRemark")
                    && (ChangeTracker.OriginalValues["L_OtolithReadingRemark"] == L_OtolithReadingRemark))
                {
                    ChangeTracker.OriginalValues.Remove("L_OtolithReadingRemark");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_OtolithReadingRemark", previousValue);
                }
                if (L_OtolithReadingRemark != null && !L_OtolithReadingRemark.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_OtolithReadingRemark.StartTracking();
                }
            }
        }
    
        private void FixupL_SDAnalysisParameter(L_SDAnalysisParameter previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SDAnnotation.Contains(this))
            {
                previousValue.SDAnnotation.Remove(this);
            }
    
            if (L_SDAnalysisParameter != null)
            {
                if (!L_SDAnalysisParameter.SDAnnotation.Contains(this))
                {
                    L_SDAnalysisParameter.SDAnnotation.Add(this);
                }
    
                sdAnalysisParameterId = L_SDAnalysisParameter.L_sdAnalysisParameterId;
            }
            else if (!skipKeys)
            {
                sdAnalysisParameterId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SDAnalysisParameter")
                    && (ChangeTracker.OriginalValues["L_SDAnalysisParameter"] == L_SDAnalysisParameter))
                {
                    ChangeTracker.OriginalValues.Remove("L_SDAnalysisParameter");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SDAnalysisParameter", previousValue);
                }
                if (L_SDAnalysisParameter != null && !L_SDAnalysisParameter.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SDAnalysisParameter.StartTracking();
                }
            }
        }
    
        private void FixupL_EdgeStructure(L_EdgeStructure previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SDAnnotation.Contains(this))
            {
                previousValue.SDAnnotation.Remove(this);
            }
    
            if (L_EdgeStructure != null)
            {
                if (!L_EdgeStructure.SDAnnotation.Contains(this))
                {
                    L_EdgeStructure.SDAnnotation.Add(this);
                }
    
                edgeStructure = L_EdgeStructure.edgeStructure;
            }
            else if (!skipKeys)
            {
                edgeStructure = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_EdgeStructure")
                    && (ChangeTracker.OriginalValues["L_EdgeStructure"] == L_EdgeStructure))
                {
                    ChangeTracker.OriginalValues.Remove("L_EdgeStructure");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_EdgeStructure", previousValue);
                }
                if (L_EdgeStructure != null && !L_EdgeStructure.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_EdgeStructure.StartTracking();
                }
            }
        }
    
        private void FixupDFUPerson(DFUPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SDAnnotation.Contains(this))
            {
                previousValue.SDAnnotation.Remove(this);
            }
    
            if (DFUPerson != null)
            {
                if (!DFUPerson.SDAnnotation.Contains(this))
                {
                    DFUPerson.SDAnnotation.Add(this);
                }
    
                createdById = DFUPerson.dfuPersonId;
            }
            else if (!skipKeys)
            {
                createdById = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DFUPerson")
                    && (ChangeTracker.OriginalValues["DFUPerson"] == DFUPerson))
                {
                    ChangeTracker.OriginalValues.Remove("DFUPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DFUPerson", previousValue);
                }
                if (DFUPerson != null && !DFUPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    DFUPerson.StartTracking();
                }
            }
        }
    
        private void FixupSDLine(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SDLine item in e.NewItems)
                {
                    item.SDAnnotation = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SDLine", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SDLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.SDAnnotation, this))
                    {
                        item.SDAnnotation = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SDLine", item);
                    }
                }
            }
        }
    
        private void FixupSDPoint(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SDPoint item in e.NewItems)
                {
                    item.SDAnnotation = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SDPoint", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SDPoint item in e.OldItems)
                {
                    if (ReferenceEquals(item.SDAnnotation, this))
                    {
                        item.SDAnnotation = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SDPoint", item);
                    }
                }
            }
        }
    
        private void FixupFishLineAge(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Age item in e.NewItems)
                {
                    item.SDAnnotation = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FishLineAge", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Age item in e.OldItems)
                {
                    if (ReferenceEquals(item.SDAnnotation, this))
                    {
                        item.SDAnnotation = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FishLineAge", item);
                    }
                }
            }
        }

        #endregion

    }
}
