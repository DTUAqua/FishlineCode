//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Animal))]
    [KnownType(typeof(Fat))]
    [KnownType(typeof(Maturity))]
    [KnownType(typeof(L_Parasite))]
    [KnownType(typeof(R_AnimalInfoReference))]
    [KnownType(typeof(L_StomachStatus))]
    public partial class AnimalInfo: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int animalInfoId
        {
            get { return _animalInfoId; }
            set
            {
                if (_animalInfoId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'animalInfoId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _animalInfoId = value;
                    OnPropertyChanged("animalInfoId");
                }
            }
        }
        private int _animalInfoId;
    
        [DataMember]
        public int animalId
        {
            get { return _animalId; }
            set
            {
                if (_animalId != value)
                {
                    ChangeTracker.RecordOriginalValue("animalId", _animalId);
                    if (!IsDeserializing)
                    {
                        if (Animal != null && Animal.animalId != value)
                        {
                            Animal = null;
                        }
                    }
                    _animalId = value;
                    OnPropertyChanged("animalId");
                }
            }
        }
        private int _animalId;
    
        [DataMember]
        public Nullable<int> heigth
        {
            get { return _heigth; }
            set
            {
                if (_heigth != value)
                {
                    _heigth = value;
                    OnPropertyChanged("heigth");
                }
            }
        }
        private Nullable<int> _heigth;
    
        [DataMember]
        public Nullable<int> width
        {
            get { return _width; }
            set
            {
                if (_width != value)
                {
                    _width = value;
                    OnPropertyChanged("width");
                }
            }
        }
        private Nullable<int> _width;
    
        [DataMember]
        public Nullable<int> maturityId
        {
            get { return _maturityId; }
            set
            {
                if (_maturityId != value)
                {
                    ChangeTracker.RecordOriginalValue("maturityId", _maturityId);
                    if (!IsDeserializing)
                    {
                        if (Maturity != null && Maturity.maturityId != value)
                        {
                            Maturity = null;
                        }
                    }
                    _maturityId = value;
                    OnPropertyChanged("maturityId");
                }
            }
        }
        private Nullable<int> _maturityId;
    
        [DataMember]
        public Nullable<int> I1
        {
            get { return _i1; }
            set
            {
                if (_i1 != value)
                {
                    _i1 = value;
                    OnPropertyChanged("I1");
                }
            }
        }
        private Nullable<int> _i1;
    
        [DataMember]
        public Nullable<int> fatId
        {
            get { return _fatId; }
            set
            {
                if (_fatId != value)
                {
                    ChangeTracker.RecordOriginalValue("fatId", _fatId);
                    if (!IsDeserializing)
                    {
                        if (Fat != null && Fat.fatId != value)
                        {
                            Fat = null;
                        }
                    }
                    _fatId = value;
                    OnPropertyChanged("fatId");
                }
            }
        }
        private Nullable<int> _fatId;
    
        [DataMember]
        public Nullable<int> numVertebra
        {
            get { return _numVertebra; }
            set
            {
                if (_numVertebra != value)
                {
                    _numVertebra = value;
                    OnPropertyChanged("numVertebra");
                }
            }
        }
        private Nullable<int> _numVertebra;
    
        [DataMember]
        public Nullable<decimal> weightGutted
        {
            get { return _weightGutted; }
            set
            {
                if (_weightGutted != value)
                {
                    _weightGutted = value;
                    OnPropertyChanged("weightGutted");
                }
            }
        }
        private Nullable<decimal> _weightGutted;
    
        [DataMember]
        public Nullable<decimal> weightLiver
        {
            get { return _weightLiver; }
            set
            {
                if (_weightLiver != value)
                {
                    _weightLiver = value;
                    OnPropertyChanged("weightLiver");
                }
            }
        }
        private Nullable<decimal> _weightLiver;
    
        [DataMember]
        public Nullable<decimal> weightGonads
        {
            get { return _weightGonads; }
            set
            {
                if (_weightGonads != value)
                {
                    _weightGonads = value;
                    OnPropertyChanged("weightGonads");
                }
            }
        }
        private Nullable<decimal> _weightGonads;
    
        [DataMember]
        public string pictureReference
        {
            get { return _pictureReference; }
            set
            {
                if (_pictureReference != value)
                {
                    _pictureReference = value;
                    OnPropertyChanged("pictureReference");
                }
            }
        }
        private string _pictureReference;
    
        [DataMember]
        public string netPlaceVertical
        {
            get { return _netPlaceVertical; }
            set
            {
                if (_netPlaceVertical != value)
                {
                    _netPlaceVertical = value;
                    OnPropertyChanged("netPlaceVertical");
                }
            }
        }
        private string _netPlaceVertical;
    
        [DataMember]
        public string netPlaceHorisontal
        {
            get { return _netPlaceHorisontal; }
            set
            {
                if (_netPlaceHorisontal != value)
                {
                    _netPlaceHorisontal = value;
                    OnPropertyChanged("netPlaceHorisontal");
                }
            }
        }
        private string _netPlaceHorisontal;
    
        [DataMember]
        public string remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public Nullable<int> parasiteId
        {
            get { return _parasiteId; }
            set
            {
                if (_parasiteId != value)
                {
                    ChangeTracker.RecordOriginalValue("parasiteId", _parasiteId);
                    if (!IsDeserializing)
                    {
                        if (L_Parasite != null && L_Parasite.L_parasiteId != value)
                        {
                            L_Parasite = null;
                        }
                    }
                    _parasiteId = value;
                    OnPropertyChanged("parasiteId");
                }
            }
        }
        private Nullable<int> _parasiteId;
    
        [DataMember]
        public Nullable<int> stomachStatusFirstEvaluationId
        {
            get { return _stomachStatusFirstEvaluationId; }
            set
            {
                if (_stomachStatusFirstEvaluationId != value)
                {
                    ChangeTracker.RecordOriginalValue("stomachStatusFirstEvaluationId", _stomachStatusFirstEvaluationId);
                    if (!IsDeserializing)
                    {
                        if (L_StomachStatusFirstEvaluation != null && L_StomachStatusFirstEvaluation.L_StomachStatusId != value)
                        {
                            L_StomachStatusFirstEvaluation = null;
                        }
                    }
                    _stomachStatusFirstEvaluationId = value;
                    OnPropertyChanged("stomachStatusFirstEvaluationId");
                }
            }
        }
        private Nullable<int> _stomachStatusFirstEvaluationId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Animal Animal
        {
            get { return _animal; }
            set
            {
                if (!ReferenceEquals(_animal, value))
                {
                    var previousValue = _animal;
                    _animal = value;
                    FixupAnimal(previousValue);
                    OnNavigationPropertyChanged("Animal");
                }
            }
        }
        private Animal _animal;
    
        [DataMember]
        public Fat Fat
        {
            get { return _fat; }
            set
            {
                if (!ReferenceEquals(_fat, value))
                {
                    var previousValue = _fat;
                    _fat = value;
                    FixupFat(previousValue);
                    OnNavigationPropertyChanged("Fat");
                }
            }
        }
        private Fat _fat;
    
        [DataMember]
        public Maturity Maturity
        {
            get { return _maturity; }
            set
            {
                if (!ReferenceEquals(_maturity, value))
                {
                    var previousValue = _maturity;
                    _maturity = value;
                    FixupMaturity(previousValue);
                    OnNavigationPropertyChanged("Maturity");
                }
            }
        }
        private Maturity _maturity;
    
        [DataMember]
        public L_Parasite L_Parasite
        {
            get { return _l_Parasite; }
            set
            {
                if (!ReferenceEquals(_l_Parasite, value))
                {
                    var previousValue = _l_Parasite;
                    _l_Parasite = value;
                    FixupL_Parasite(previousValue);
                    OnNavigationPropertyChanged("L_Parasite");
                }
            }
        }
        private L_Parasite _l_Parasite;
    
        [DataMember]
        public TrackableCollection<R_AnimalInfoReference> R_AnimalInfoReference
        {
            get
            {
                if (_r_AnimalInfoReference == null)
                {
                    _r_AnimalInfoReference = new TrackableCollection<R_AnimalInfoReference>();
                    _r_AnimalInfoReference.CollectionChanged += FixupR_AnimalInfoReference;
                }
                return _r_AnimalInfoReference;
            }
            set
            {
                if (!ReferenceEquals(_r_AnimalInfoReference, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_r_AnimalInfoReference != null)
                    {
                        _r_AnimalInfoReference.CollectionChanged -= FixupR_AnimalInfoReference;
                    }
                    _r_AnimalInfoReference = value;
                    if (_r_AnimalInfoReference != null)
                    {
                        _r_AnimalInfoReference.CollectionChanged += FixupR_AnimalInfoReference;
                    }
                    OnNavigationPropertyChanged("R_AnimalInfoReference");
                }
            }
        }
        private TrackableCollection<R_AnimalInfoReference> _r_AnimalInfoReference;
    
        [DataMember]
        public L_StomachStatus L_StomachStatusFirstEvaluation
        {
            get { return _l_StomachStatusFirstEvaluation; }
            set
            {
                if (!ReferenceEquals(_l_StomachStatusFirstEvaluation, value))
                {
                    var previousValue = _l_StomachStatusFirstEvaluation;
                    _l_StomachStatusFirstEvaluation = value;
                    FixupL_StomachStatusFirstEvaluation(previousValue);
                    OnNavigationPropertyChanged("L_StomachStatusFirstEvaluation");
                }
            }
        }
        private L_StomachStatus _l_StomachStatusFirstEvaluation;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Animal = null;
            Fat = null;
            Maturity = null;
            L_Parasite = null;
            R_AnimalInfoReference.Clear();
            L_StomachStatusFirstEvaluation = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupAnimal(Animal previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AnimalInfo.Contains(this))
            {
                previousValue.AnimalInfo.Remove(this);
            }
    
            if (Animal != null)
            {
                if (!Animal.AnimalInfo.Contains(this))
                {
                    Animal.AnimalInfo.Add(this);
                }
    
                animalId = Animal.animalId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Animal")
                    && (ChangeTracker.OriginalValues["Animal"] == Animal))
                {
                    ChangeTracker.OriginalValues.Remove("Animal");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Animal", previousValue);
                }
                if (Animal != null && !Animal.ChangeTracker.ChangeTrackingEnabled)
                {
                    Animal.StartTracking();
                }
            }
        }
    
        private void FixupFat(Fat previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AnimalInfo.Contains(this))
            {
                previousValue.AnimalInfo.Remove(this);
            }
    
            if (Fat != null)
            {
                if (!Fat.AnimalInfo.Contains(this))
                {
                    Fat.AnimalInfo.Add(this);
                }
    
                fatId = Fat.fatId;
            }
            else if (!skipKeys)
            {
                fatId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Fat")
                    && (ChangeTracker.OriginalValues["Fat"] == Fat))
                {
                    ChangeTracker.OriginalValues.Remove("Fat");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Fat", previousValue);
                }
                if (Fat != null && !Fat.ChangeTracker.ChangeTrackingEnabled)
                {
                    Fat.StartTracking();
                }
            }
        }
    
        private void FixupMaturity(Maturity previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AnimalInfo.Contains(this))
            {
                previousValue.AnimalInfo.Remove(this);
            }
    
            if (Maturity != null)
            {
                if (!Maturity.AnimalInfo.Contains(this))
                {
                    Maturity.AnimalInfo.Add(this);
                }
    
                maturityId = Maturity.maturityId;
            }
            else if (!skipKeys)
            {
                maturityId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Maturity")
                    && (ChangeTracker.OriginalValues["Maturity"] == Maturity))
                {
                    ChangeTracker.OriginalValues.Remove("Maturity");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Maturity", previousValue);
                }
                if (Maturity != null && !Maturity.ChangeTracker.ChangeTrackingEnabled)
                {
                    Maturity.StartTracking();
                }
            }
        }
    
        private void FixupL_Parasite(L_Parasite previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AnimalInfo.Contains(this))
            {
                previousValue.AnimalInfo.Remove(this);
            }
    
            if (L_Parasite != null)
            {
                if (!L_Parasite.AnimalInfo.Contains(this))
                {
                    L_Parasite.AnimalInfo.Add(this);
                }
    
                parasiteId = L_Parasite.L_parasiteId;
            }
            else if (!skipKeys)
            {
                parasiteId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_Parasite")
                    && (ChangeTracker.OriginalValues["L_Parasite"] == L_Parasite))
                {
                    ChangeTracker.OriginalValues.Remove("L_Parasite");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_Parasite", previousValue);
                }
                if (L_Parasite != null && !L_Parasite.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_Parasite.StartTracking();
                }
            }
        }
    
        private void FixupL_StomachStatusFirstEvaluation(L_StomachStatus previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AnimalInfo.Contains(this))
            {
                previousValue.AnimalInfo.Remove(this);
            }
    
            if (L_StomachStatusFirstEvaluation != null)
            {
                if (!L_StomachStatusFirstEvaluation.AnimalInfo.Contains(this))
                {
                    L_StomachStatusFirstEvaluation.AnimalInfo.Add(this);
                }
    
                stomachStatusFirstEvaluationId = L_StomachStatusFirstEvaluation.L_StomachStatusId;
            }
            else if (!skipKeys)
            {
                stomachStatusFirstEvaluationId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_StomachStatusFirstEvaluation")
                    && (ChangeTracker.OriginalValues["L_StomachStatusFirstEvaluation"] == L_StomachStatusFirstEvaluation))
                {
                    ChangeTracker.OriginalValues.Remove("L_StomachStatusFirstEvaluation");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_StomachStatusFirstEvaluation", previousValue);
                }
                if (L_StomachStatusFirstEvaluation != null && !L_StomachStatusFirstEvaluation.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_StomachStatusFirstEvaluation.StartTracking();
                }
            }
        }
    
        private void FixupR_AnimalInfoReference(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_AnimalInfoReference item in e.NewItems)
                {
                    item.AnimalInfo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_AnimalInfoReference", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_AnimalInfoReference item in e.OldItems)
                {
                    if (ReferenceEquals(item.AnimalInfo, this))
                    {
                        item.AnimalInfo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_AnimalInfoReference", item);
                    }
                }
            }
        }

        #endregion

    }
}
