//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(L_GearType))]
    [KnownType(typeof(L_SelectionDevice))]
    public partial class R_GearTypeSelectionDevice: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int R_GearTypeSelectionDeviceId
        {
            get { return _r_GearTypeSelectionDeviceId; }
            set
            {
                if (_r_GearTypeSelectionDeviceId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'R_GearTypeSelectionDeviceId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _r_GearTypeSelectionDeviceId = value;
                    OnPropertyChanged("R_GearTypeSelectionDeviceId");
                }
            }
        }
        private int _r_GearTypeSelectionDeviceId;
    
        [DataMember]
        public string gearType
        {
            get { return _gearType; }
            set
            {
                if (_gearType != value)
                {
                    ChangeTracker.RecordOriginalValue("gearType", _gearType);
                    if (!IsDeserializing)
                    {
                        if (L_GearType != null && L_GearType.gearType != value)
                        {
                            L_GearType = null;
                        }
                    }
                    _gearType = value;
                    OnPropertyChanged("gearType");
                }
            }
        }
        private string _gearType;
    
        [DataMember]
        public string selectionDevice
        {
            get { return _selectionDevice; }
            set
            {
                if (_selectionDevice != value)
                {
                    ChangeTracker.RecordOriginalValue("selectionDevice", _selectionDevice);
                    if (!IsDeserializing)
                    {
                        if (L_SelectionDevice != null && L_SelectionDevice.selectionDevice != value)
                        {
                            L_SelectionDevice = null;
                        }
                    }
                    _selectionDevice = value;
                    OnPropertyChanged("selectionDevice");
                }
            }
        }
        private string _selectionDevice;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public L_GearType L_GearType
        {
            get { return _l_GearType; }
            set
            {
                if (!ReferenceEquals(_l_GearType, value))
                {
                    var previousValue = _l_GearType;
                    _l_GearType = value;
                    FixupL_GearType(previousValue);
                    OnNavigationPropertyChanged("L_GearType");
                }
            }
        }
        private L_GearType _l_GearType;
    
        [DataMember]
        public L_SelectionDevice L_SelectionDevice
        {
            get { return _l_SelectionDevice; }
            set
            {
                if (!ReferenceEquals(_l_SelectionDevice, value))
                {
                    var previousValue = _l_SelectionDevice;
                    _l_SelectionDevice = value;
                    FixupL_SelectionDevice(previousValue);
                    OnNavigationPropertyChanged("L_SelectionDevice");
                }
            }
        }
        private L_SelectionDevice _l_SelectionDevice;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            L_GearType = null;
            L_SelectionDevice = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupL_GearType(L_GearType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.R_GearTypeSelectionDevice.Contains(this))
            {
                previousValue.R_GearTypeSelectionDevice.Remove(this);
            }
    
            if (L_GearType != null)
            {
                if (!L_GearType.R_GearTypeSelectionDevice.Contains(this))
                {
                    L_GearType.R_GearTypeSelectionDevice.Add(this);
                }
    
                gearType = L_GearType.gearType;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_GearType")
                    && (ChangeTracker.OriginalValues["L_GearType"] == L_GearType))
                {
                    ChangeTracker.OriginalValues.Remove("L_GearType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_GearType", previousValue);
                }
                if (L_GearType != null && !L_GearType.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_GearType.StartTracking();
                }
            }
        }
    
        private void FixupL_SelectionDevice(L_SelectionDevice previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.R_GearTypeSelectionDevice.Contains(this))
            {
                previousValue.R_GearTypeSelectionDevice.Remove(this);
            }
    
            if (L_SelectionDevice != null)
            {
                if (!L_SelectionDevice.R_GearTypeSelectionDevice.Contains(this))
                {
                    L_SelectionDevice.R_GearTypeSelectionDevice.Add(this);
                }
    
                selectionDevice = L_SelectionDevice.selectionDevice;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_SelectionDevice")
                    && (ChangeTracker.OriginalValues["L_SelectionDevice"] == L_SelectionDevice))
                {
                    ChangeTracker.OriginalValues.Remove("L_SelectionDevice");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_SelectionDevice", previousValue);
                }
                if (L_SelectionDevice != null && !L_SelectionDevice.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_SelectionDevice.StartTracking();
                }
            }
        }

        #endregion

    }
}
