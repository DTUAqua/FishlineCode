//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ReportingTreeNode))]
    public partial class Report: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int reportId
        {
            get { return _reportId; }
            set
            {
                if (_reportId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'reportId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _reportId = value;
                    OnPropertyChanged("reportId");
                }
            }
        }
        private int _reportId;
    
        [DataMember]
        public string name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    OnPropertyChanged("type");
                }
            }
        }
        private string _type;
    
        [DataMember]
        public string data
        {
            get { return _data; }
            set
            {
                if (_data != value)
                {
                    _data = value;
                    OnPropertyChanged("data");
                }
            }
        }
        private string _data;
    
        [DataMember]
        public bool isAvailableOffline
        {
            get { return _isAvailableOffline; }
            set
            {
                if (_isAvailableOffline != value)
                {
                    _isAvailableOffline = value;
                    OnPropertyChanged("isAvailableOffline");
                }
            }
        }
        private bool _isAvailableOffline;
    
        [DataMember]
        public string outputFormat
        {
            get { return _outputFormat; }
            set
            {
                if (_outputFormat != value)
                {
                    _outputFormat = value;
                    OnPropertyChanged("outputFormat");
                }
            }
        }
        private string _outputFormat;
    
        [DataMember]
        public string permissionTasks
        {
            get { return _permissionTasks; }
            set
            {
                if (_permissionTasks != value)
                {
                    _permissionTasks = value;
                    OnPropertyChanged("permissionTasks");
                }
            }
        }
        private string _permissionTasks;
    
        [DataMember]
        public string outputPath
        {
            get { return _outputPath; }
            set
            {
                if (_outputPath != value)
                {
                    _outputPath = value;
                    OnPropertyChanged("outputPath");
                }
            }
        }
        private string _outputPath;
    
        [DataMember]
        public string outputPathRestriction
        {
            get { return _outputPathRestriction; }
            set
            {
                if (_outputPathRestriction != value)
                {
                    _outputPathRestriction = value;
                    OnPropertyChanged("outputPathRestriction");
                }
            }
        }
        private string _outputPathRestriction;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ReportingTreeNode> ReportingTreeNodes
        {
            get
            {
                if (_reportingTreeNodes == null)
                {
                    _reportingTreeNodes = new TrackableCollection<ReportingTreeNode>();
                    _reportingTreeNodes.CollectionChanged += FixupReportingTreeNodes;
                }
                return _reportingTreeNodes;
            }
            set
            {
                if (!ReferenceEquals(_reportingTreeNodes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_reportingTreeNodes != null)
                    {
                        _reportingTreeNodes.CollectionChanged -= FixupReportingTreeNodes;
                    }
                    _reportingTreeNodes = value;
                    if (_reportingTreeNodes != null)
                    {
                        _reportingTreeNodes.CollectionChanged += FixupReportingTreeNodes;
                    }
                    OnNavigationPropertyChanged("ReportingTreeNodes");
                }
            }
        }
        private TrackableCollection<ReportingTreeNode> _reportingTreeNodes;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ReportingTreeNodes.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupReportingTreeNodes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReportingTreeNode item in e.NewItems)
                {
                    if (!item.Reports.Contains(this))
                    {
                        item.Reports.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ReportingTreeNodes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReportingTreeNode item in e.OldItems)
                {
                    if (item.Reports.Contains(this))
                    {
                        item.Reports.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ReportingTreeNodes", item);
                    }
                }
            }
        }

        #endregion

    }
}
