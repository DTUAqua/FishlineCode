//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Animal))]
    [KnownType(typeof(L_AgeMeasureMethod))]
    [KnownType(typeof(L_OtolithReadingRemark))]
    [KnownType(typeof(L_EdgeStructure))]
    [KnownType(typeof(L_HatchMonthReadability))]
    [KnownType(typeof(L_VisualStock))]
    [KnownType(typeof(L_GeneticStock))]
    [KnownType(typeof(SDAnnotation))]
    [KnownType(typeof(DFUPerson))]
    public partial class Age: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ageId
        {
            get { return _ageId; }
            set
            {
                if (_ageId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ageId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _ageId = value;
                    OnPropertyChanged("ageId");
                }
            }
        }
        private int _ageId;
    
        [DataMember]
        public int animalId
        {
            get { return _animalId; }
            set
            {
                if (_animalId != value)
                {
                    ChangeTracker.RecordOriginalValue("animalId", _animalId);
                    if (!IsDeserializing)
                    {
                        if (Animal != null && Animal.animalId != value)
                        {
                            Animal = null;
                        }
                    }
                    _animalId = value;
                    OnPropertyChanged("animalId");
                }
            }
        }
        private int _animalId;
    
        [DataMember]
        public Nullable<int> age1
        {
            get { return _age1; }
            set
            {
                if (_age1 != value)
                {
                    _age1 = value;
                    OnPropertyChanged("age1");
                }
            }
        }
        private Nullable<int> _age1;
    
        [DataMember]
        public Nullable<int> otolithReadingRemarkId
        {
            get { return _otolithReadingRemarkId; }
            set
            {
                if (_otolithReadingRemarkId != value)
                {
                    ChangeTracker.RecordOriginalValue("otolithReadingRemarkId", _otolithReadingRemarkId);
                    if (!IsDeserializing)
                    {
                        if (L_OtolithReadingRemark != null && L_OtolithReadingRemark.L_OtolithReadingRemarkID != value)
                        {
                            L_OtolithReadingRemark = null;
                        }
                    }
                    _otolithReadingRemarkId = value;
                    OnPropertyChanged("otolithReadingRemarkId");
                }
            }
        }
        private Nullable<int> _otolithReadingRemarkId;
    
        [DataMember]
        public int number
        {
            get { return _number; }
            set
            {
                if (_number != value)
                {
                    _number = value;
                    OnPropertyChanged("number");
                }
            }
        }
        private int _number;
    
        [DataMember]
        public int ageMeasureMethodId
        {
            get { return _ageMeasureMethodId; }
            set
            {
                if (_ageMeasureMethodId != value)
                {
                    ChangeTracker.RecordOriginalValue("ageMeasureMethodId", _ageMeasureMethodId);
                    if (!IsDeserializing)
                    {
                        if (L_AgeMeasureMethod != null && L_AgeMeasureMethod.L_ageMeasureMethodId != value)
                        {
                            L_AgeMeasureMethod = null;
                        }
                    }
                    _ageMeasureMethodId = value;
                    OnPropertyChanged("ageMeasureMethodId");
                }
            }
        }
        private int _ageMeasureMethodId;
    
        [DataMember]
        public Nullable<int> hatchMonth
        {
            get { return _hatchMonth; }
            set
            {
                if (_hatchMonth != value)
                {
                    _hatchMonth = value;
                    OnPropertyChanged("hatchMonth");
                }
            }
        }
        private Nullable<int> _hatchMonth;
    
        [DataMember]
        public Nullable<decimal> otolithWeight
        {
            get { return _otolithWeight; }
            set
            {
                if (_otolithWeight != value)
                {
                    _otolithWeight = value;
                    OnPropertyChanged("otolithWeight");
                }
            }
        }
        private Nullable<decimal> _otolithWeight;
    
        [DataMember]
        public string remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public string edgeStructure
        {
            get { return _edgeStructure; }
            set
            {
                if (_edgeStructure != value)
                {
                    ChangeTracker.RecordOriginalValue("edgeStructure", _edgeStructure);
                    if (!IsDeserializing)
                    {
                        if (L_EdgeStructure != null && L_EdgeStructure.edgeStructure != value)
                        {
                            L_EdgeStructure = null;
                        }
                    }
                    _edgeStructure = value;
                    OnPropertyChanged("edgeStructure");
                }
            }
        }
        private string _edgeStructure;
    
        [DataMember]
        public Nullable<bool> genetics
        {
            get { return _genetics; }
            set
            {
                if (_genetics != value)
                {
                    _genetics = value;
                    OnPropertyChanged("genetics");
                }
            }
        }
        private Nullable<bool> _genetics;
    
        [DataMember]
        public Nullable<int> hatchMonthReadabilityId
        {
            get { return _hatchMonthReadabilityId; }
            set
            {
                if (_hatchMonthReadabilityId != value)
                {
                    ChangeTracker.RecordOriginalValue("hatchMonthReadabilityId", _hatchMonthReadabilityId);
                    if (!IsDeserializing)
                    {
                        if (L_HatchMonthReadability != null && L_HatchMonthReadability.L_HatchMonthReadabilityId != value)
                        {
                            L_HatchMonthReadability = null;
                        }
                    }
                    _hatchMonthReadabilityId = value;
                    OnPropertyChanged("hatchMonthReadabilityId");
                }
            }
        }
        private Nullable<int> _hatchMonthReadabilityId;
    
        [DataMember]
        public Nullable<int> visualStockId
        {
            get { return _visualStockId; }
            set
            {
                if (_visualStockId != value)
                {
                    ChangeTracker.RecordOriginalValue("visualStockId", _visualStockId);
                    if (!IsDeserializing)
                    {
                        if (L_VisualStock != null && L_VisualStock.L_visualStockId != value)
                        {
                            L_VisualStock = null;
                        }
                    }
                    _visualStockId = value;
                    OnPropertyChanged("visualStockId");
                }
            }
        }
        private Nullable<int> _visualStockId;
    
        [DataMember]
        public Nullable<int> geneticStockId
        {
            get { return _geneticStockId; }
            set
            {
                if (_geneticStockId != value)
                {
                    ChangeTracker.RecordOriginalValue("geneticStockId", _geneticStockId);
                    if (!IsDeserializing)
                    {
                        if (L_GeneticStock != null && L_GeneticStock.L_geneticStockId != value)
                        {
                            L_GeneticStock = null;
                        }
                    }
                    _geneticStockId = value;
                    OnPropertyChanged("geneticStockId");
                }
            }
        }
        private Nullable<int> _geneticStockId;
    
        [DataMember]
        public Nullable<bool> sdAgeInfoUpdated
        {
            get { return _sdAgeInfoUpdated; }
            set
            {
                if (_sdAgeInfoUpdated != value)
                {
                    _sdAgeInfoUpdated = value;
                    OnPropertyChanged("sdAgeInfoUpdated");
                }
            }
        }
        private Nullable<bool> _sdAgeInfoUpdated;
    
        [DataMember]
        public Nullable<int> sdAnnotationId
        {
            get { return _sdAnnotationId; }
            set
            {
                if (_sdAnnotationId != value)
                {
                    ChangeTracker.RecordOriginalValue("sdAnnotationId", _sdAnnotationId);
                    if (!IsDeserializing)
                    {
                        if (SDAnnotation != null && SDAnnotation.sdAnnotationId != value)
                        {
                            SDAnnotation = null;
                        }
                    }
                    _sdAnnotationId = value;
                    OnPropertyChanged("sdAnnotationId");
                }
            }
        }
        private Nullable<int> _sdAnnotationId;
    
        [DataMember]
        public Nullable<int> sdAgeReadId
        {
            get { return _sdAgeReadId; }
            set
            {
                if (_sdAgeReadId != value)
                {
                    ChangeTracker.RecordOriginalValue("sdAgeReadId", _sdAgeReadId);
                    if (!IsDeserializing)
                    {
                        if (DFUPerson != null && DFUPerson.dfuPersonId != value)
                        {
                            DFUPerson = null;
                        }
                    }
                    _sdAgeReadId = value;
                    OnPropertyChanged("sdAgeReadId");
                }
            }
        }
        private Nullable<int> _sdAgeReadId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Animal Animal
        {
            get { return _animal; }
            set
            {
                if (!ReferenceEquals(_animal, value))
                {
                    var previousValue = _animal;
                    _animal = value;
                    FixupAnimal(previousValue);
                    OnNavigationPropertyChanged("Animal");
                }
            }
        }
        private Animal _animal;
    
        [DataMember]
        public L_AgeMeasureMethod L_AgeMeasureMethod
        {
            get { return _l_AgeMeasureMethod; }
            set
            {
                if (!ReferenceEquals(_l_AgeMeasureMethod, value))
                {
                    var previousValue = _l_AgeMeasureMethod;
                    _l_AgeMeasureMethod = value;
                    FixupL_AgeMeasureMethod(previousValue);
                    OnNavigationPropertyChanged("L_AgeMeasureMethod");
                }
            }
        }
        private L_AgeMeasureMethod _l_AgeMeasureMethod;
    
        [DataMember]
        public L_OtolithReadingRemark L_OtolithReadingRemark
        {
            get { return _l_OtolithReadingRemark; }
            set
            {
                if (!ReferenceEquals(_l_OtolithReadingRemark, value))
                {
                    var previousValue = _l_OtolithReadingRemark;
                    _l_OtolithReadingRemark = value;
                    FixupL_OtolithReadingRemark(previousValue);
                    OnNavigationPropertyChanged("L_OtolithReadingRemark");
                }
            }
        }
        private L_OtolithReadingRemark _l_OtolithReadingRemark;
    
        [DataMember]
        public L_EdgeStructure L_EdgeStructure
        {
            get { return _l_EdgeStructure; }
            set
            {
                if (!ReferenceEquals(_l_EdgeStructure, value))
                {
                    var previousValue = _l_EdgeStructure;
                    _l_EdgeStructure = value;
                    FixupL_EdgeStructure(previousValue);
                    OnNavigationPropertyChanged("L_EdgeStructure");
                }
            }
        }
        private L_EdgeStructure _l_EdgeStructure;
    
        [DataMember]
        public L_HatchMonthReadability L_HatchMonthReadability
        {
            get { return _l_HatchMonthReadability; }
            set
            {
                if (!ReferenceEquals(_l_HatchMonthReadability, value))
                {
                    var previousValue = _l_HatchMonthReadability;
                    _l_HatchMonthReadability = value;
                    FixupL_HatchMonthReadability(previousValue);
                    OnNavigationPropertyChanged("L_HatchMonthReadability");
                }
            }
        }
        private L_HatchMonthReadability _l_HatchMonthReadability;
    
        [DataMember]
        public L_VisualStock L_VisualStock
        {
            get { return _l_VisualStock; }
            set
            {
                if (!ReferenceEquals(_l_VisualStock, value))
                {
                    var previousValue = _l_VisualStock;
                    _l_VisualStock = value;
                    FixupL_VisualStock(previousValue);
                    OnNavigationPropertyChanged("L_VisualStock");
                }
            }
        }
        private L_VisualStock _l_VisualStock;
    
        [DataMember]
        public L_GeneticStock L_GeneticStock
        {
            get { return _l_GeneticStock; }
            set
            {
                if (!ReferenceEquals(_l_GeneticStock, value))
                {
                    var previousValue = _l_GeneticStock;
                    _l_GeneticStock = value;
                    FixupL_GeneticStock(previousValue);
                    OnNavigationPropertyChanged("L_GeneticStock");
                }
            }
        }
        private L_GeneticStock _l_GeneticStock;
    
        [DataMember]
        public SDAnnotation SDAnnotation
        {
            get { return _sDAnnotation; }
            set
            {
                if (!ReferenceEquals(_sDAnnotation, value))
                {
                    var previousValue = _sDAnnotation;
                    _sDAnnotation = value;
                    FixupSDAnnotation(previousValue);
                    OnNavigationPropertyChanged("SDAnnotation");
                }
            }
        }
        private SDAnnotation _sDAnnotation;
    
        [DataMember]
        public DFUPerson DFUPerson
        {
            get { return _dFUPerson; }
            set
            {
                if (!ReferenceEquals(_dFUPerson, value))
                {
                    var previousValue = _dFUPerson;
                    _dFUPerson = value;
                    FixupDFUPerson(previousValue);
                    OnNavigationPropertyChanged("DFUPerson");
                }
            }
        }
        private DFUPerson _dFUPerson;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Animal = null;
            L_AgeMeasureMethod = null;
            L_OtolithReadingRemark = null;
            L_EdgeStructure = null;
            L_HatchMonthReadability = null;
            L_VisualStock = null;
            L_GeneticStock = null;
            SDAnnotation = null;
            DFUPerson = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupAnimal(Animal previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Age.Contains(this))
            {
                previousValue.Age.Remove(this);
            }
    
            if (Animal != null)
            {
                if (!Animal.Age.Contains(this))
                {
                    Animal.Age.Add(this);
                }
    
                animalId = Animal.animalId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Animal")
                    && (ChangeTracker.OriginalValues["Animal"] == Animal))
                {
                    ChangeTracker.OriginalValues.Remove("Animal");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Animal", previousValue);
                }
                if (Animal != null && !Animal.ChangeTracker.ChangeTrackingEnabled)
                {
                    Animal.StartTracking();
                }
            }
        }
    
        private void FixupL_AgeMeasureMethod(L_AgeMeasureMethod previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Age.Contains(this))
            {
                previousValue.Age.Remove(this);
            }
    
            if (L_AgeMeasureMethod != null)
            {
                if (!L_AgeMeasureMethod.Age.Contains(this))
                {
                    L_AgeMeasureMethod.Age.Add(this);
                }
    
                ageMeasureMethodId = L_AgeMeasureMethod.L_ageMeasureMethodId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_AgeMeasureMethod")
                    && (ChangeTracker.OriginalValues["L_AgeMeasureMethod"] == L_AgeMeasureMethod))
                {
                    ChangeTracker.OriginalValues.Remove("L_AgeMeasureMethod");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_AgeMeasureMethod", previousValue);
                }
                if (L_AgeMeasureMethod != null && !L_AgeMeasureMethod.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_AgeMeasureMethod.StartTracking();
                }
            }
        }
    
        private void FixupL_OtolithReadingRemark(L_OtolithReadingRemark previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Age.Contains(this))
            {
                previousValue.Age.Remove(this);
            }
    
            if (L_OtolithReadingRemark != null)
            {
                if (!L_OtolithReadingRemark.Age.Contains(this))
                {
                    L_OtolithReadingRemark.Age.Add(this);
                }
    
                otolithReadingRemarkId = L_OtolithReadingRemark.L_OtolithReadingRemarkID;
            }
            else if (!skipKeys)
            {
                otolithReadingRemarkId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_OtolithReadingRemark")
                    && (ChangeTracker.OriginalValues["L_OtolithReadingRemark"] == L_OtolithReadingRemark))
                {
                    ChangeTracker.OriginalValues.Remove("L_OtolithReadingRemark");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_OtolithReadingRemark", previousValue);
                }
                if (L_OtolithReadingRemark != null && !L_OtolithReadingRemark.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_OtolithReadingRemark.StartTracking();
                }
            }
        }
    
        private void FixupL_EdgeStructure(L_EdgeStructure previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Age.Contains(this))
            {
                previousValue.Age.Remove(this);
            }
    
            if (L_EdgeStructure != null)
            {
                if (!L_EdgeStructure.Age.Contains(this))
                {
                    L_EdgeStructure.Age.Add(this);
                }
    
                edgeStructure = L_EdgeStructure.edgeStructure;
            }
            else if (!skipKeys)
            {
                edgeStructure = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_EdgeStructure")
                    && (ChangeTracker.OriginalValues["L_EdgeStructure"] == L_EdgeStructure))
                {
                    ChangeTracker.OriginalValues.Remove("L_EdgeStructure");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_EdgeStructure", previousValue);
                }
                if (L_EdgeStructure != null && !L_EdgeStructure.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_EdgeStructure.StartTracking();
                }
            }
        }
    
        private void FixupL_HatchMonthReadability(L_HatchMonthReadability previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Age.Contains(this))
            {
                previousValue.Age.Remove(this);
            }
    
            if (L_HatchMonthReadability != null)
            {
                if (!L_HatchMonthReadability.Age.Contains(this))
                {
                    L_HatchMonthReadability.Age.Add(this);
                }
    
                hatchMonthReadabilityId = L_HatchMonthReadability.L_HatchMonthReadabilityId;
            }
            else if (!skipKeys)
            {
                hatchMonthReadabilityId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_HatchMonthReadability")
                    && (ChangeTracker.OriginalValues["L_HatchMonthReadability"] == L_HatchMonthReadability))
                {
                    ChangeTracker.OriginalValues.Remove("L_HatchMonthReadability");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_HatchMonthReadability", previousValue);
                }
                if (L_HatchMonthReadability != null && !L_HatchMonthReadability.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_HatchMonthReadability.StartTracking();
                }
            }
        }
    
        private void FixupL_VisualStock(L_VisualStock previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_VisualStock != null)
            {
                visualStockId = L_VisualStock.L_visualStockId;
            }
    
            else if (!skipKeys)
            {
                visualStockId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_VisualStock")
                    && (ChangeTracker.OriginalValues["L_VisualStock"] == L_VisualStock))
                {
                    ChangeTracker.OriginalValues.Remove("L_VisualStock");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_VisualStock", previousValue);
                }
                if (L_VisualStock != null && !L_VisualStock.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_VisualStock.StartTracking();
                }
            }
        }
    
        private void FixupL_GeneticStock(L_GeneticStock previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (L_GeneticStock != null)
            {
                geneticStockId = L_GeneticStock.L_geneticStockId;
            }
    
            else if (!skipKeys)
            {
                geneticStockId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_GeneticStock")
                    && (ChangeTracker.OriginalValues["L_GeneticStock"] == L_GeneticStock))
                {
                    ChangeTracker.OriginalValues.Remove("L_GeneticStock");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_GeneticStock", previousValue);
                }
                if (L_GeneticStock != null && !L_GeneticStock.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_GeneticStock.StartTracking();
                }
            }
        }
    
        private void FixupSDAnnotation(SDAnnotation previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FishLineAge.Contains(this))
            {
                previousValue.FishLineAge.Remove(this);
            }
    
            if (SDAnnotation != null)
            {
                if (!SDAnnotation.FishLineAge.Contains(this))
                {
                    SDAnnotation.FishLineAge.Add(this);
                }
    
                sdAnnotationId = SDAnnotation.sdAnnotationId;
            }
            else if (!skipKeys)
            {
                sdAnnotationId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SDAnnotation")
                    && (ChangeTracker.OriginalValues["SDAnnotation"] == SDAnnotation))
                {
                    ChangeTracker.OriginalValues.Remove("SDAnnotation");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SDAnnotation", previousValue);
                }
                if (SDAnnotation != null && !SDAnnotation.ChangeTracker.ChangeTrackingEnabled)
                {
                    SDAnnotation.StartTracking();
                }
            }
        }
    
        private void FixupDFUPerson(DFUPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Age.Contains(this))
            {
                previousValue.Age.Remove(this);
            }
    
            if (DFUPerson != null)
            {
                if (!DFUPerson.Age.Contains(this))
                {
                    DFUPerson.Age.Add(this);
                }
    
                sdAgeReadId = DFUPerson.dfuPersonId;
            }
            else if (!skipKeys)
            {
                sdAgeReadId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DFUPerson")
                    && (ChangeTracker.OriginalValues["DFUPerson"] == DFUPerson))
                {
                    ChangeTracker.OriginalValues.Remove("DFUPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DFUPerson", previousValue);
                }
                if (DFUPerson != null && !DFUPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    DFUPerson.StartTracking();
                }
            }
        }

        #endregion

    }
}
