//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DFUPerson))]
    [KnownType(typeof(L_CruiseStatus))]
    [KnownType(typeof(L_DFUDepartment))]
    [KnownType(typeof(Est_Method))]
    [KnownType(typeof(Est_Strata))]
    [KnownType(typeof(R_CruiseUsabilityParam))]
    [KnownType(typeof(Trip))]
    public partial class Cruise: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int cruiseId
        {
            get { return _cruiseId; }
            set
            {
                if (_cruiseId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'cruiseId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cruiseId = value;
                    OnPropertyChanged("cruiseId");
                }
            }
        }
        private int _cruiseId;
    
        [DataMember]
        public int year
        {
            get { return _year; }
            set
            {
                if (_year != value)
                {
                    _year = value;
                    OnPropertyChanged("year");
                }
            }
        }
        private int _year;
    
        [DataMember]
        public string cruise1
        {
            get { return _cruise1; }
            set
            {
                if (_cruise1 != value)
                {
                    _cruise1 = value;
                    OnPropertyChanged("cruise1");
                }
            }
        }
        private string _cruise1;
    
        [DataMember]
        public string cruiseTitle
        {
            get { return _cruiseTitle; }
            set
            {
                if (_cruiseTitle != value)
                {
                    _cruiseTitle = value;
                    OnPropertyChanged("cruiseTitle");
                }
            }
        }
        private string _cruiseTitle;
    
        [DataMember]
        public Nullable<int> responsibleId
        {
            get { return _responsibleId; }
            set
            {
                if (_responsibleId != value)
                {
                    ChangeTracker.RecordOriginalValue("responsibleId", _responsibleId);
                    if (!IsDeserializing)
                    {
                        if (DFUPerson1 != null && DFUPerson1.dfuPersonId != value)
                        {
                            DFUPerson1 = null;
                        }
                    }
                    _responsibleId = value;
                    OnPropertyChanged("responsibleId");
                }
            }
        }
        private Nullable<int> _responsibleId;
    
        [DataMember]
        public string participants
        {
            get { return _participants; }
            set
            {
                if (_participants != value)
                {
                    _participants = value;
                    OnPropertyChanged("participants");
                }
            }
        }
        private string _participants;
    
        [DataMember]
        public string reportFile
        {
            get { return _reportFile; }
            set
            {
                if (_reportFile != value)
                {
                    _reportFile = value;
                    OnPropertyChanged("reportFile");
                }
            }
        }
        private string _reportFile;
    
        [DataMember]
        public string summary
        {
            get { return _summary; }
            set
            {
                if (_summary != value)
                {
                    _summary = value;
                    OnPropertyChanged("summary");
                }
            }
        }
        private string _summary;
    
        [DataMember]
        public string DFUDepartment
        {
            get { return _dFUDepartment; }
            set
            {
                if (_dFUDepartment != value)
                {
                    ChangeTracker.RecordOriginalValue("DFUDepartment", _dFUDepartment);
                    if (!IsDeserializing)
                    {
                        if (L_DFUDepartment != null && L_DFUDepartment.dfuDepartment != value)
                        {
                            L_DFUDepartment = null;
                        }
                    }
                    _dFUDepartment = value;
                    OnPropertyChanged("DFUDepartment");
                }
            }
        }
        private string _dFUDepartment;
    
        [DataMember]
        public string cruiseStatus
        {
            get { return _cruiseStatus; }
            set
            {
                if (_cruiseStatus != value)
                {
                    ChangeTracker.RecordOriginalValue("cruiseStatus", _cruiseStatus);
                    if (!IsDeserializing)
                    {
                        if (L_CruiseStatus != null && L_CruiseStatus.cruiseStatus != value)
                        {
                            L_CruiseStatus = null;
                        }
                    }
                    _cruiseStatus = value;
                    OnPropertyChanged("cruiseStatus");
                }
            }
        }
        private string _cruiseStatus;
    
        [DataMember]
        public Nullable<System.DateTime> dateEstimCruise
        {
            get { return _dateEstimCruise; }
            set
            {
                if (_dateEstimCruise != value)
                {
                    _dateEstimCruise = value;
                    OnPropertyChanged("dateEstimCruise");
                }
            }
        }
        private Nullable<System.DateTime> _dateEstimCruise;
    
        [DataMember]
        public Nullable<System.DateTime> dateControl
        {
            get { return _dateControl; }
            set
            {
                if (_dateControl != value)
                {
                    _dateControl = value;
                    OnPropertyChanged("dateControl");
                }
            }
        }
        private Nullable<System.DateTime> _dateControl;
    
        [DataMember]
        public Nullable<System.DateTime> dateUpdate
        {
            get { return _dateUpdate; }
            set
            {
                if (_dateUpdate != value)
                {
                    _dateUpdate = value;
                    OnPropertyChanged("dateUpdate");
                }
            }
        }
        private Nullable<System.DateTime> _dateUpdate;
    
        [DataMember]
        public Nullable<int> dataHandlerId
        {
            get { return _dataHandlerId; }
            set
            {
                if (_dataHandlerId != value)
                {
                    ChangeTracker.RecordOriginalValue("dataHandlerId", _dataHandlerId);
                    if (!IsDeserializing)
                    {
                        if (DFUPerson != null && DFUPerson.dfuPersonId != value)
                        {
                            DFUPerson = null;
                        }
                    }
                    _dataHandlerId = value;
                    OnPropertyChanged("dataHandlerId");
                }
            }
        }
        private Nullable<int> _dataHandlerId;
    
        [DataMember]
        public string remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("remark");
                }
            }
        }
        private string _remark;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public DFUPerson DFUPerson
        {
            get { return _dFUPerson; }
            set
            {
                if (!ReferenceEquals(_dFUPerson, value))
                {
                    var previousValue = _dFUPerson;
                    _dFUPerson = value;
                    FixupDFUPerson(previousValue);
                    OnNavigationPropertyChanged("DFUPerson");
                }
            }
        }
        private DFUPerson _dFUPerson;
    
        [DataMember]
        public L_CruiseStatus L_CruiseStatus
        {
            get { return _l_CruiseStatus; }
            set
            {
                if (!ReferenceEquals(_l_CruiseStatus, value))
                {
                    var previousValue = _l_CruiseStatus;
                    _l_CruiseStatus = value;
                    FixupL_CruiseStatus(previousValue);
                    OnNavigationPropertyChanged("L_CruiseStatus");
                }
            }
        }
        private L_CruiseStatus _l_CruiseStatus;
    
        [DataMember]
        public DFUPerson DFUPerson1
        {
            get { return _dFUPerson1; }
            set
            {
                if (!ReferenceEquals(_dFUPerson1, value))
                {
                    var previousValue = _dFUPerson1;
                    _dFUPerson1 = value;
                    FixupDFUPerson1(previousValue);
                    OnNavigationPropertyChanged("DFUPerson1");
                }
            }
        }
        private DFUPerson _dFUPerson1;
    
        [DataMember]
        public L_DFUDepartment L_DFUDepartment
        {
            get { return _l_DFUDepartment; }
            set
            {
                if (!ReferenceEquals(_l_DFUDepartment, value))
                {
                    var previousValue = _l_DFUDepartment;
                    _l_DFUDepartment = value;
                    FixupL_DFUDepartment(previousValue);
                    OnNavigationPropertyChanged("L_DFUDepartment");
                }
            }
        }
        private L_DFUDepartment _l_DFUDepartment;
    
        [DataMember]
        public TrackableCollection<Est_Method> Est_Method
        {
            get
            {
                if (_est_Method == null)
                {
                    _est_Method = new TrackableCollection<Est_Method>();
                    _est_Method.CollectionChanged += FixupEst_Method;
                }
                return _est_Method;
            }
            set
            {
                if (!ReferenceEquals(_est_Method, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_est_Method != null)
                    {
                        _est_Method.CollectionChanged -= FixupEst_Method;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (Est_Method item in _est_Method)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _est_Method = value;
                    if (_est_Method != null)
                    {
                        _est_Method.CollectionChanged += FixupEst_Method;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (Est_Method item in _est_Method)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Est_Method");
                }
            }
        }
        private TrackableCollection<Est_Method> _est_Method;
    
        [DataMember]
        public TrackableCollection<Est_Strata> Est_Strata
        {
            get
            {
                if (_est_Strata == null)
                {
                    _est_Strata = new TrackableCollection<Est_Strata>();
                    _est_Strata.CollectionChanged += FixupEst_Strata;
                }
                return _est_Strata;
            }
            set
            {
                if (!ReferenceEquals(_est_Strata, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_est_Strata != null)
                    {
                        _est_Strata.CollectionChanged -= FixupEst_Strata;
                    }
                    _est_Strata = value;
                    if (_est_Strata != null)
                    {
                        _est_Strata.CollectionChanged += FixupEst_Strata;
                    }
                    OnNavigationPropertyChanged("Est_Strata");
                }
            }
        }
        private TrackableCollection<Est_Strata> _est_Strata;
    
        [DataMember]
        public TrackableCollection<Est_Strata> Est_Strata1
        {
            get
            {
                if (_est_Strata1 == null)
                {
                    _est_Strata1 = new TrackableCollection<Est_Strata>();
                    _est_Strata1.CollectionChanged += FixupEst_Strata1;
                }
                return _est_Strata1;
            }
            set
            {
                if (!ReferenceEquals(_est_Strata1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_est_Strata1 != null)
                    {
                        _est_Strata1.CollectionChanged -= FixupEst_Strata1;
                    }
                    _est_Strata1 = value;
                    if (_est_Strata1 != null)
                    {
                        _est_Strata1.CollectionChanged += FixupEst_Strata1;
                    }
                    OnNavigationPropertyChanged("Est_Strata1");
                }
            }
        }
        private TrackableCollection<Est_Strata> _est_Strata1;
    
        [DataMember]
        public TrackableCollection<R_CruiseUsabilityParam> R_CruiseUsabilityParam
        {
            get
            {
                if (_r_CruiseUsabilityParam == null)
                {
                    _r_CruiseUsabilityParam = new TrackableCollection<R_CruiseUsabilityParam>();
                    _r_CruiseUsabilityParam.CollectionChanged += FixupR_CruiseUsabilityParam;
                }
                return _r_CruiseUsabilityParam;
            }
            set
            {
                if (!ReferenceEquals(_r_CruiseUsabilityParam, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_r_CruiseUsabilityParam != null)
                    {
                        _r_CruiseUsabilityParam.CollectionChanged -= FixupR_CruiseUsabilityParam;
                    }
                    _r_CruiseUsabilityParam = value;
                    if (_r_CruiseUsabilityParam != null)
                    {
                        _r_CruiseUsabilityParam.CollectionChanged += FixupR_CruiseUsabilityParam;
                    }
                    OnNavigationPropertyChanged("R_CruiseUsabilityParam");
                }
            }
        }
        private TrackableCollection<R_CruiseUsabilityParam> _r_CruiseUsabilityParam;
    
        [DataMember]
        public TrackableCollection<Trip> Trip
        {
            get
            {
                if (_trip == null)
                {
                    _trip = new TrackableCollection<Trip>();
                    _trip.CollectionChanged += FixupTrip;
                }
                return _trip;
            }
            set
            {
                if (!ReferenceEquals(_trip, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_trip != null)
                    {
                        _trip.CollectionChanged -= FixupTrip;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (Trip item in _trip)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _trip = value;
                    if (_trip != null)
                    {
                        _trip.CollectionChanged += FixupTrip;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (Trip item in _trip)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Trip");
                }
            }
        }
        private TrackableCollection<Trip> _trip;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DFUPerson = null;
            L_CruiseStatus = null;
            DFUPerson1 = null;
            L_DFUDepartment = null;
            Est_Method.Clear();
            Est_Strata.Clear();
            Est_Strata1.Clear();
            R_CruiseUsabilityParam.Clear();
            Trip.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupDFUPerson(DFUPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Cruise.Contains(this))
            {
                previousValue.Cruise.Remove(this);
            }
    
            if (DFUPerson != null)
            {
                if (!DFUPerson.Cruise.Contains(this))
                {
                    DFUPerson.Cruise.Add(this);
                }
    
                dataHandlerId = DFUPerson.dfuPersonId;
            }
            else if (!skipKeys)
            {
                dataHandlerId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DFUPerson")
                    && (ChangeTracker.OriginalValues["DFUPerson"] == DFUPerson))
                {
                    ChangeTracker.OriginalValues.Remove("DFUPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DFUPerson", previousValue);
                }
                if (DFUPerson != null && !DFUPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    DFUPerson.StartTracking();
                }
            }
        }
    
        private void FixupL_CruiseStatus(L_CruiseStatus previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Cruise.Contains(this))
            {
                previousValue.Cruise.Remove(this);
            }
    
            if (L_CruiseStatus != null)
            {
                if (!L_CruiseStatus.Cruise.Contains(this))
                {
                    L_CruiseStatus.Cruise.Add(this);
                }
    
                cruiseStatus = L_CruiseStatus.cruiseStatus;
            }
            else if (!skipKeys)
            {
                cruiseStatus = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_CruiseStatus")
                    && (ChangeTracker.OriginalValues["L_CruiseStatus"] == L_CruiseStatus))
                {
                    ChangeTracker.OriginalValues.Remove("L_CruiseStatus");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_CruiseStatus", previousValue);
                }
                if (L_CruiseStatus != null && !L_CruiseStatus.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_CruiseStatus.StartTracking();
                }
            }
        }
    
        private void FixupDFUPerson1(DFUPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Cruise1.Contains(this))
            {
                previousValue.Cruise1.Remove(this);
            }
    
            if (DFUPerson1 != null)
            {
                if (!DFUPerson1.Cruise1.Contains(this))
                {
                    DFUPerson1.Cruise1.Add(this);
                }
    
                responsibleId = DFUPerson1.dfuPersonId;
            }
            else if (!skipKeys)
            {
                responsibleId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DFUPerson1")
                    && (ChangeTracker.OriginalValues["DFUPerson1"] == DFUPerson1))
                {
                    ChangeTracker.OriginalValues.Remove("DFUPerson1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DFUPerson1", previousValue);
                }
                if (DFUPerson1 != null && !DFUPerson1.ChangeTracker.ChangeTrackingEnabled)
                {
                    DFUPerson1.StartTracking();
                }
            }
        }
    
        private void FixupL_DFUDepartment(L_DFUDepartment previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Cruise.Contains(this))
            {
                previousValue.Cruise.Remove(this);
            }
    
            if (L_DFUDepartment != null)
            {
                if (!L_DFUDepartment.Cruise.Contains(this))
                {
                    L_DFUDepartment.Cruise.Add(this);
                }
    
                DFUDepartment = L_DFUDepartment.dfuDepartment;
            }
            else if (!skipKeys)
            {
                DFUDepartment = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_DFUDepartment")
                    && (ChangeTracker.OriginalValues["L_DFUDepartment"] == L_DFUDepartment))
                {
                    ChangeTracker.OriginalValues.Remove("L_DFUDepartment");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_DFUDepartment", previousValue);
                }
                if (L_DFUDepartment != null && !L_DFUDepartment.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_DFUDepartment.StartTracking();
                }
            }
        }
    
        private void FixupEst_Method(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Est_Method item in e.NewItems)
                {
                    item.Cruise = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Est_Method", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Est_Method item in e.OldItems)
                {
                    if (ReferenceEquals(item.Cruise, this))
                    {
                        item.Cruise = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Est_Method", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupEst_Strata(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Est_Strata item in e.NewItems)
                {
                    item.Cruise = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Est_Strata", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Est_Strata item in e.OldItems)
                {
                    if (ReferenceEquals(item.Cruise, this))
                    {
                        item.Cruise = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Est_Strata", item);
                    }
                }
            }
        }
    
        private void FixupEst_Strata1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Est_Strata item in e.NewItems)
                {
                    item.Cruise1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Est_Strata1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Est_Strata item in e.OldItems)
                {
                    if (ReferenceEquals(item.Cruise1, this))
                    {
                        item.Cruise1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Est_Strata1", item);
                    }
                }
            }
        }
    
        private void FixupR_CruiseUsabilityParam(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_CruiseUsabilityParam item in e.NewItems)
                {
                    item.Cruise = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_CruiseUsabilityParam", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_CruiseUsabilityParam item in e.OldItems)
                {
                    if (ReferenceEquals(item.Cruise, this))
                    {
                        item.Cruise = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_CruiseUsabilityParam", item);
                    }
                }
            }
        }
    
        private void FixupTrip(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Trip item in e.NewItems)
                {
                    item.Cruise = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Trip", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Trip item in e.OldItems)
                {
                    if (ReferenceEquals(item.Cruise, this))
                    {
                        item.Cruise = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Trip", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
