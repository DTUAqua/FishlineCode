//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Animal))]
    [KnownType(typeof(L_YesNo))]
    [KnownType(typeof(SpeciesList))]
    public partial class SubSample: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int subSampleId
        {
            get { return _subSampleId; }
            set
            {
                if (_subSampleId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'subSampleId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _subSampleId = value;
                    OnPropertyChanged("subSampleId");
                }
            }
        }
        private int _subSampleId;
    
        [DataMember]
        public int speciesListId
        {
            get { return _speciesListId; }
            set
            {
                if (_speciesListId != value)
                {
                    ChangeTracker.RecordOriginalValue("speciesListId", _speciesListId);
                    if (!IsDeserializing)
                    {
                        if (SpeciesList != null && SpeciesList.speciesListId != value)
                        {
                            SpeciesList = null;
                        }
                    }
                    _speciesListId = value;
                    OnPropertyChanged("speciesListId");
                }
            }
        }
        private int _speciesListId;
    
        [DataMember]
        public int stepNum
        {
            get { return _stepNum; }
            set
            {
                if (_stepNum != value)
                {
                    _stepNum = value;
                    OnPropertyChanged("stepNum");
                }
            }
        }
        private int _stepNum;
    
        [DataMember]
        public string representative
        {
            get { return _representative; }
            set
            {
                if (_representative != value)
                {
                    ChangeTracker.RecordOriginalValue("representative", _representative);
                    if (!IsDeserializing)
                    {
                        if (L_YesNo != null && L_YesNo.YesNo != value)
                        {
                            L_YesNo = null;
                        }
                    }
                    _representative = value;
                    OnPropertyChanged("representative");
                }
            }
        }
        private string _representative;
    
        [DataMember]
        public Nullable<decimal> subSampleWeight
        {
            get { return _subSampleWeight; }
            set
            {
                if (_subSampleWeight != value)
                {
                    _subSampleWeight = value;
                    OnPropertyChanged("subSampleWeight");
                }
            }
        }
        private Nullable<decimal> _subSampleWeight;
    
        [DataMember]
        public Nullable<decimal> landingWeight
        {
            get { return _landingWeight; }
            set
            {
                if (_landingWeight != value)
                {
                    _landingWeight = value;
                    OnPropertyChanged("landingWeight");
                }
            }
        }
        private Nullable<decimal> _landingWeight;
    
        [DataMember]
        public string remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public Nullable<bool> sumAnimalWeights
        {
            get { return _sumAnimalWeights; }
            set
            {
                if (_sumAnimalWeights != value)
                {
                    _sumAnimalWeights = value;
                    OnPropertyChanged("sumAnimalWeights");
                }
            }
        }
        private Nullable<bool> _sumAnimalWeights;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Animal> Animal
        {
            get
            {
                if (_animal == null)
                {
                    _animal = new TrackableCollection<Animal>();
                    _animal.CollectionChanged += FixupAnimal;
                }
                return _animal;
            }
            set
            {
                if (!ReferenceEquals(_animal, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_animal != null)
                    {
                        _animal.CollectionChanged -= FixupAnimal;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (Animal item in _animal)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _animal = value;
                    if (_animal != null)
                    {
                        _animal.CollectionChanged += FixupAnimal;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (Animal item in _animal)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Animal");
                }
            }
        }
        private TrackableCollection<Animal> _animal;
    
        [DataMember]
        public L_YesNo L_YesNo
        {
            get { return _l_YesNo; }
            set
            {
                if (!ReferenceEquals(_l_YesNo, value))
                {
                    var previousValue = _l_YesNo;
                    _l_YesNo = value;
                    FixupL_YesNo(previousValue);
                    OnNavigationPropertyChanged("L_YesNo");
                }
            }
        }
        private L_YesNo _l_YesNo;
    
        [DataMember]
        public SpeciesList SpeciesList
        {
            get { return _speciesList; }
            set
            {
                if (!ReferenceEquals(_speciesList, value))
                {
                    var previousValue = _speciesList;
                    _speciesList = value;
                    FixupSpeciesList(previousValue);
                    OnNavigationPropertyChanged("SpeciesList");
                }
            }
        }
        private SpeciesList _speciesList;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Animal.Clear();
            L_YesNo = null;
            SpeciesList = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupL_YesNo(L_YesNo previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SubSample.Contains(this))
            {
                previousValue.SubSample.Remove(this);
            }
    
            if (L_YesNo != null)
            {
                if (!L_YesNo.SubSample.Contains(this))
                {
                    L_YesNo.SubSample.Add(this);
                }
    
                representative = L_YesNo.YesNo;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("L_YesNo")
                    && (ChangeTracker.OriginalValues["L_YesNo"] == L_YesNo))
                {
                    ChangeTracker.OriginalValues.Remove("L_YesNo");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("L_YesNo", previousValue);
                }
                if (L_YesNo != null && !L_YesNo.ChangeTracker.ChangeTrackingEnabled)
                {
                    L_YesNo.StartTracking();
                }
            }
        }
    
        private void FixupSpeciesList(SpeciesList previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SubSample.Contains(this))
            {
                previousValue.SubSample.Remove(this);
            }
    
            if (SpeciesList != null)
            {
                if (!SpeciesList.SubSample.Contains(this))
                {
                    SpeciesList.SubSample.Add(this);
                }
    
                speciesListId = SpeciesList.speciesListId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SpeciesList")
                    && (ChangeTracker.OriginalValues["SpeciesList"] == SpeciesList))
                {
                    ChangeTracker.OriginalValues.Remove("SpeciesList");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SpeciesList", previousValue);
                }
                if (SpeciesList != null && !SpeciesList.ChangeTracker.ChangeTrackingEnabled)
                {
                    SpeciesList.StartTracking();
                }
            }
        }
    
        private void FixupAnimal(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Animal item in e.NewItems)
                {
                    item.SubSample = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Animal", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Animal item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubSample, this))
                    {
                        item.SubSample = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Animal", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
