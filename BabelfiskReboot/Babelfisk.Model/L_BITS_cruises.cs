//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    public partial class L_BITS_cruises: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int cruiseID
        {
            get { return _cruiseID; }
            set
            {
                if (_cruiseID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'cruiseID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cruiseID = value;
                    OnPropertyChanged("cruiseID");
                }
            }
        }
        private int _cruiseID;
    
        [DataMember]
        public string shipCode
        {
            get { return _shipCode; }
            set
            {
                if (_shipCode != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'shipCode' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _shipCode = value;
                    OnPropertyChanged("shipCode");
                }
            }
        }
        private string _shipCode;
    
        [DataMember]
        public int cruiseYear
        {
            get { return _cruiseYear; }
            set
            {
                if (_cruiseYear != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'cruiseYear' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cruiseYear = value;
                    OnPropertyChanged("cruiseYear");
                }
            }
        }
        private int _cruiseYear;
    
        [DataMember]
        public int cruiseNo
        {
            get { return _cruiseNo; }
            set
            {
                if (_cruiseNo != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'cruiseNo' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cruiseNo = value;
                    OnPropertyChanged("cruiseNo");
                }
            }
        }
        private int _cruiseNo;
    
        [DataMember]
        public Nullable<short> cruiseDays
        {
            get { return _cruiseDays; }
            set
            {
                if (_cruiseDays != value)
                {
                    _cruiseDays = value;
                    OnPropertyChanged("cruiseDays");
                }
            }
        }
        private Nullable<short> _cruiseDays;
    
        [DataMember]
        public string cruiseName
        {
            get { return _cruiseName; }
            set
            {
                if (_cruiseName != value)
                {
                    _cruiseName = value;
                    OnPropertyChanged("cruiseName");
                }
            }
        }
        private string _cruiseName;
    
        [DataMember]
        public string projectType
        {
            get { return _projectType; }
            set
            {
                if (_projectType != value)
                {
                    _projectType = value;
                    OnPropertyChanged("projectType");
                }
            }
        }
        private string _projectType;
    
        [DataMember]
        public string cruiseLeader
        {
            get { return _cruiseLeader; }
            set
            {
                if (_cruiseLeader != value)
                {
                    _cruiseLeader = value;
                    OnPropertyChanged("cruiseLeader");
                }
            }
        }
        private string _cruiseLeader;
    
        [DataMember]
        public string assistCruiseLeader
        {
            get { return _assistCruiseLeader; }
            set
            {
                if (_assistCruiseLeader != value)
                {
                    _assistCruiseLeader = value;
                    OnPropertyChanged("assistCruiseLeader");
                }
            }
        }
        private string _assistCruiseLeader;
    
        [DataMember]
        public string captain
        {
            get { return _captain; }
            set
            {
                if (_captain != value)
                {
                    _captain = value;
                    OnPropertyChanged("captain");
                }
            }
        }
        private string _captain;
    
        [DataMember]
        public string technician
        {
            get { return _technician; }
            set
            {
                if (_technician != value)
                {
                    _technician = value;
                    OnPropertyChanged("technician");
                }
            }
        }
        private string _technician;
    
        [DataMember]
        public string cruiseArea
        {
            get { return _cruiseArea; }
            set
            {
                if (_cruiseArea != value)
                {
                    _cruiseArea = value;
                    OnPropertyChanged("cruiseArea");
                }
            }
        }
        private string _cruiseArea;
    
        [DataMember]
        public Nullable<System.DateTime> startDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    _startDate = value;
                    OnPropertyChanged("startDate");
                }
            }
        }
        private Nullable<System.DateTime> _startDate;
    
        [DataMember]
        public Nullable<System.DateTime> endDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    _endDate = value;
                    OnPropertyChanged("endDate");
                }
            }
        }
        private Nullable<System.DateTime> _endDate;
    
        [DataMember]
        public string institution
        {
            get { return _institution; }
            set
            {
                if (_institution != value)
                {
                    _institution = value;
                    OnPropertyChanged("institution");
                }
            }
        }
        private string _institution;
    
        [DataMember]
        public string institute
        {
            get { return _institute; }
            set
            {
                if (_institute != value)
                {
                    _institute = value;
                    OnPropertyChanged("institute");
                }
            }
        }
        private string _institute;
    
        [DataMember]
        public string projectArea
        {
            get { return _projectArea; }
            set
            {
                if (_projectArea != value)
                {
                    _projectArea = value;
                    OnPropertyChanged("projectArea");
                }
            }
        }
        private string _projectArea;
    
        [DataMember]
        public string projectNo
        {
            get { return _projectNo; }
            set
            {
                if (_projectNo != value)
                {
                    _projectNo = value;
                    OnPropertyChanged("projectNo");
                }
            }
        }
        private string _projectNo;
    
        [DataMember]
        public string remarks
        {
            get { return _remarks; }
            set
            {
                if (_remarks != value)
                {
                    _remarks = value;
                    OnPropertyChanged("remarks");
                }
            }
        }
        private string _remarks;
    
        [DataMember]
        public bool status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'status' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _status = value;
                    OnPropertyChanged("status");
                }
            }
        }
        private bool _status;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
