//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Babelfisk.Entities.Sprattus
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(R_CruiseUsabilityParam))]
    [KnownType(typeof(R_SampleUsabilityParam))]
    [KnownType(typeof(R_TripUsabilityParam))]
    [KnownType(typeof(R_UsabilityParamUsabilityGrp))]
    public partial class L_UsabilityParam: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int usabilityParamId
        {
            get { return _usabilityParamId; }
            set
            {
                if (_usabilityParamId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'usabilityParamId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _usabilityParamId = value;
                    OnPropertyChanged("usabilityParamId");
                }
            }
        }
        private int _usabilityParamId;
    
        [DataMember]
        public string usabilityParam
        {
            get { return _usabilityParam; }
            set
            {
                if (_usabilityParam != value)
                {
                    _usabilityParam = value;
                    OnPropertyChanged("usabilityParam");
                }
            }
        }
        private string _usabilityParam;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<R_CruiseUsabilityParam> R_CruiseUsabilityParam
        {
            get
            {
                if (_r_CruiseUsabilityParam == null)
                {
                    _r_CruiseUsabilityParam = new TrackableCollection<R_CruiseUsabilityParam>();
                    _r_CruiseUsabilityParam.CollectionChanged += FixupR_CruiseUsabilityParam;
                }
                return _r_CruiseUsabilityParam;
            }
            set
            {
                if (!ReferenceEquals(_r_CruiseUsabilityParam, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_r_CruiseUsabilityParam != null)
                    {
                        _r_CruiseUsabilityParam.CollectionChanged -= FixupR_CruiseUsabilityParam;
                    }
                    _r_CruiseUsabilityParam = value;
                    if (_r_CruiseUsabilityParam != null)
                    {
                        _r_CruiseUsabilityParam.CollectionChanged += FixupR_CruiseUsabilityParam;
                    }
                    OnNavigationPropertyChanged("R_CruiseUsabilityParam");
                }
            }
        }
        private TrackableCollection<R_CruiseUsabilityParam> _r_CruiseUsabilityParam;
    
        [DataMember]
        public TrackableCollection<R_SampleUsabilityParam> R_SampleUsabilityParam
        {
            get
            {
                if (_r_SampleUsabilityParam == null)
                {
                    _r_SampleUsabilityParam = new TrackableCollection<R_SampleUsabilityParam>();
                    _r_SampleUsabilityParam.CollectionChanged += FixupR_SampleUsabilityParam;
                }
                return _r_SampleUsabilityParam;
            }
            set
            {
                if (!ReferenceEquals(_r_SampleUsabilityParam, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_r_SampleUsabilityParam != null)
                    {
                        _r_SampleUsabilityParam.CollectionChanged -= FixupR_SampleUsabilityParam;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (R_SampleUsabilityParam item in _r_SampleUsabilityParam)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _r_SampleUsabilityParam = value;
                    if (_r_SampleUsabilityParam != null)
                    {
                        _r_SampleUsabilityParam.CollectionChanged += FixupR_SampleUsabilityParam;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (R_SampleUsabilityParam item in _r_SampleUsabilityParam)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("R_SampleUsabilityParam");
                }
            }
        }
        private TrackableCollection<R_SampleUsabilityParam> _r_SampleUsabilityParam;
    
        [DataMember]
        public TrackableCollection<R_TripUsabilityParam> R_TripUsabilityParam
        {
            get
            {
                if (_r_TripUsabilityParam == null)
                {
                    _r_TripUsabilityParam = new TrackableCollection<R_TripUsabilityParam>();
                    _r_TripUsabilityParam.CollectionChanged += FixupR_TripUsabilityParam;
                }
                return _r_TripUsabilityParam;
            }
            set
            {
                if (!ReferenceEquals(_r_TripUsabilityParam, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_r_TripUsabilityParam != null)
                    {
                        _r_TripUsabilityParam.CollectionChanged -= FixupR_TripUsabilityParam;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (R_TripUsabilityParam item in _r_TripUsabilityParam)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _r_TripUsabilityParam = value;
                    if (_r_TripUsabilityParam != null)
                    {
                        _r_TripUsabilityParam.CollectionChanged += FixupR_TripUsabilityParam;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (R_TripUsabilityParam item in _r_TripUsabilityParam)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("R_TripUsabilityParam");
                }
            }
        }
        private TrackableCollection<R_TripUsabilityParam> _r_TripUsabilityParam;
    
        [DataMember]
        public TrackableCollection<R_UsabilityParamUsabilityGrp> R_UsabilityParamUsabilityGrp
        {
            get
            {
                if (_r_UsabilityParamUsabilityGrp == null)
                {
                    _r_UsabilityParamUsabilityGrp = new TrackableCollection<R_UsabilityParamUsabilityGrp>();
                    _r_UsabilityParamUsabilityGrp.CollectionChanged += FixupR_UsabilityParamUsabilityGrp;
                }
                return _r_UsabilityParamUsabilityGrp;
            }
            set
            {
                if (!ReferenceEquals(_r_UsabilityParamUsabilityGrp, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_r_UsabilityParamUsabilityGrp != null)
                    {
                        _r_UsabilityParamUsabilityGrp.CollectionChanged -= FixupR_UsabilityParamUsabilityGrp;
                    }
                    _r_UsabilityParamUsabilityGrp = value;
                    if (_r_UsabilityParamUsabilityGrp != null)
                    {
                        _r_UsabilityParamUsabilityGrp.CollectionChanged += FixupR_UsabilityParamUsabilityGrp;
                    }
                    OnNavigationPropertyChanged("R_UsabilityParamUsabilityGrp");
                }
            }
        }
        private TrackableCollection<R_UsabilityParamUsabilityGrp> _r_UsabilityParamUsabilityGrp;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            R_CruiseUsabilityParam.Clear();
            R_SampleUsabilityParam.Clear();
            R_TripUsabilityParam.Clear();
            R_UsabilityParamUsabilityGrp.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupR_CruiseUsabilityParam(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_CruiseUsabilityParam item in e.NewItems)
                {
                    item.L_UsabilityParam = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_CruiseUsabilityParam", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_CruiseUsabilityParam item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_UsabilityParam, this))
                    {
                        item.L_UsabilityParam = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_CruiseUsabilityParam", item);
                    }
                }
            }
        }
    
        private void FixupR_SampleUsabilityParam(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_SampleUsabilityParam item in e.NewItems)
                {
                    item.L_UsabilityParam = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_SampleUsabilityParam", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_SampleUsabilityParam item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_UsabilityParam, this))
                    {
                        item.L_UsabilityParam = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_SampleUsabilityParam", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupR_TripUsabilityParam(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_TripUsabilityParam item in e.NewItems)
                {
                    item.L_UsabilityParam = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_TripUsabilityParam", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_TripUsabilityParam item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_UsabilityParam, this))
                    {
                        item.L_UsabilityParam = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_TripUsabilityParam", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupR_UsabilityParamUsabilityGrp(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_UsabilityParamUsabilityGrp item in e.NewItems)
                {
                    item.L_UsabilityParam = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_UsabilityParamUsabilityGrp", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_UsabilityParamUsabilityGrp item in e.OldItems)
                {
                    if (ReferenceEquals(item.L_UsabilityParam, this))
                    {
                        item.L_UsabilityParam = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_UsabilityParamUsabilityGrp", item);
                    }
                }
            }
        }

        #endregion

    }
}
