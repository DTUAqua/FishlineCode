<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:cnv="clr-namespace:FishLineMeasure.WPF.Converters">
    
    <LinearGradientBrush x:Key="DefaultControlBackground" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFD8D8D8" Offset="0" />
            <GradientStop Color="#FFA0A0A0" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="GeneralBarBackground" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFC1C1C1" Offset="0.0" />
        <GradientStop Color="#FFF9F9F9" Offset="0.005" />
        <GradientStop Color="#FFF9F9F9" Offset="0.6" />
        <GradientStop Color="#FFDDDDE0" Offset="1.0" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="SideBarBackground" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFC1C1C1" Offset="0.0" />
        <GradientStop Color="#FFF9F9F9" Offset="0.005" />
        <GradientStop Color="#FFF9F9F9" Offset="0.6" />
        <GradientStop Color="#FFDDDDE0" Offset="1.0" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="GridHeaderStyle" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFEAE8E8" Offset="0"/>
        <GradientStop Color="#FFE0E0E0" Offset="1"/>
        <GradientStop Color="#FFF7F7F7" Offset="0.38"/>
        <GradientStop Color="#FFF0F0F0" Offset="0.705"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="WindowBackground" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="Black" Offset="0"/>
        <GradientStop Color="#FF958C8C" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="gridHeaderButtonDarkOver" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF4B3008" Offset="0"/>
        <GradientStop Color="#FF4F422F" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="InputHeaderBackground" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#E5000000" Offset="0"/>
        <GradientStop Color="#E5212121" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="InputHeaderBackgroundLight" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF595959" Offset="0"/>
        <GradientStop Color="#FF5F5E5E" Offset="1"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="mnuItemSelectedBackground" Color="#307DA2CE" />

    <SolidColorBrush x:Key="InputHeaderForeground" Color="White" />
    <!--
    <SolidColorBrush x:Key="InputHeaderBackground" Color="#FFACACAC" />
    -->

    <SolidColorBrush x:Key="SplitterBorderBackgroundLight" Color="#FFB6B6B6" />

    <SolidColorBrush x:Key="SplitterBorderBackgroundDark" Color="#FF969696" />

    <SolidColorBrush x:Key="ErrorForeground" Color="#FFF5B860" />
    
    

    <Color x:Key="HighlightColor" R="198" G="208" B="241" A="255" />
    
    <SolidColorBrush x:Key="HighlightBrush" Color="{StaticResource ResourceKey=HighlightColor}" />

    <!--
    <Color x:Key="OverColor" R="255" G="236" B="132" A="255" />
    -->
    <Color x:Key="OverColor" R="255" G="245" B="189" A="255" />

    <LinearGradientBrush x:Key="OverBrush" StartPoint="0.5,0" EndPoint="0.5,1" >
        <GradientStop Color="White" Offset="0.0" />
        <GradientStop Color="{StaticResource ResourceKey=OverColor}" Offset="1" />
    </LinearGradientBrush>
    

    <Color x:Key="bdrColor" R="206" G="182" B="166" A="255" />

    <SolidColorBrush x:Key="bdrBrush" Color="#CAD1D0CF" />

    <SolidColorBrush x:Key="ListBorder" Color="#828790"/>

    <SolidColorBrush x:Key="brushBackColor" Color="#FFEEEEEE" />

    <Color x:Key="OverColor2" R="255" G="245" B="189" A="255" />

    <LinearGradientBrush x:Key="GeneralMouseOver" StartPoint="0.5,0" EndPoint="0.5,1" >
        <GradientStop Color="White" Offset="0.0" />
        <GradientStop Color="{StaticResource ResourceKey=OverColor2}" Offset="1" />
    </LinearGradientBrush>

  
    <Style x:Key="ValidateElementRedBorderNoWarningSupport" TargetType="{x:Type FrameworkElement}">
        <Setter Property="ToolTipService.ShowDuration" Value="60000" />
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                        <TextBlock DockPanel.Dock="Right" Foreground="Red" Margin="5,4,0,0" Visibility="Collapsed"
                                   FontSize="13" FontWeight="Bold" Text="*" VerticalAlignment="Center"
                                   ToolTip="{Binding ElementName=IndicatorAdorner, Path=AdornedElement.(Validation.Errors), Converter={cnv:ValidationErrorsToStringConverter}}">
                        </TextBlock>
                        <Border BorderThickness="1">
                            <Border.Style>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="BorderBrush" Value="Red" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=IndicatorAdorner, Path=AdornedElement.(Validation.Errors), Converter={cnv:ValidationErrorsIsWarningConverter}}" Value="True">
                                            <Setter Property="BorderBrush" Value="Blue" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <AdornedElementPlaceholder x:Name="IndicatorAdorner" ></AdornedElementPlaceholder>
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={cnv:ValidationErrorsToStringConverter}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    

    <Style x:Key="ValidateElementRedBorder" TargetType="{x:Type FrameworkElement}">
        <Setter Property="ToolTipService.ShowDuration" Value="60000" />
        <Setter Property="Tag" Value="{Binding}" />
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                        <TextBlock DockPanel.Dock="Right" Foreground="Red" Margin="5,4,0,0" Visibility="Collapsed"
                                   FontSize="13" FontWeight="Bold" Text="*" VerticalAlignment="Center"
                                   ToolTip="{Binding ElementName=IndicatorAdorner, Path=AdornedElement.(Validation.Errors), Converter={cnv:ValidationErrorsToStringConverter}}">
                        </TextBlock>
                        <Border BorderThickness="1" Tag="{Binding ElementName=IndicatorAdorner}">
                            <Border.Style>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="BorderBrush" Value="Red" />
                                    <Setter Property="Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <DataTrigger Value="True">
                                            <DataTrigger.Binding>
                                                <!-- Use a multibinding here with ValidationErrosIsWarningConverter, since Validation.Errors is a ObservableCollection, so when items change, it is not assigned again. So use the Count property, to ensure below binding is evaluated everytime something is added/removed to the observable collection -->
                                                <MultiBinding Converter="{cnv:ValidationErrorsIsWarningConverter}">
                                                    <MultiBinding.Bindings>
                                                        <Binding Path="AdornedElement.(Validation.Errors)" ElementName="IndicatorAdorner" />
                                                        <Binding Path="AdornedElement.(Validation.Errors).Count" ElementName="IndicatorAdorner" UpdateSourceTrigger="PropertyChanged" />
                                                    </MultiBinding.Bindings>
                                                </MultiBinding>
                                            </DataTrigger.Binding>
                                            <Setter Property="BorderBrush" Value="Blue" />
                                        </DataTrigger>

                                        <DataTrigger Value="True">
                                            <DataTrigger.Binding>
                                                <!-- Use a multibinding here with ValidationErrosIsWarningConverter, since Validation.Errors is a ObservableCollection, so when items change, it is not assigned again. So use the Count property, to ensure below binding is evaluated everytime something is added/removed to the observable collection -->
                                                <MultiBinding Converter="{cnv:ValidationHasErrorsConverter}">
                                                    <MultiBinding.Bindings>
                                                        <Binding Path="AdornedElement.(Validation.Errors)" ElementName="IndicatorAdorner" />
                                                        <Binding Path="AdornedElement.(Validation.Errors).Count" ElementName="IndicatorAdorner" UpdateSourceTrigger="PropertyChanged" />
                                                    </MultiBinding.Bindings>
                                                </MultiBinding>
                                            </DataTrigger.Binding>
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>

                                        <DataTrigger Binding="{Binding Path=AdornedElement.Tag.IsLoading, ElementName=IndicatorAdorner}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <AdornedElementPlaceholder x:Name="IndicatorAdorner" ></AdornedElementPlaceholder>
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" >
                    <Setter.Value>
                        <ToolTip DataContext="{Binding Path=PlacementTarget, RelativeSource={RelativeSource Self}}">
                            <ItemsControl ItemsSource="{Binding Path=(Validation.Errors)}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Vertical" />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Path=ErrorContent, Converter={cnv:ValidationErrorToStringConverter}}" />
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </ToolTip>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="imageButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="bdr" SnapsToDevicePixels="True" Background="#FFF9F9F9" KeyboardNavigation.IsTabStop="False" BorderBrush="LightGray" BorderThickness="{TemplateBinding BorderThickness}" >
                        <Grid Margin="0,0,0,0" x:Name="btnGrid" KeyboardNavigation.IsTabStop="False" >
                            <ContentControl x:Name="content" KeyboardNavigation.IsTabStop="False" Content="{TemplateBinding Content}" Foreground="Black" >
                            </ContentControl>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsEnabled" Value="False">
                            <Setter TargetName="bdr" Property="Opacity" Value="0.4" />
                        </Trigger>
                        <Trigger Property="Button.IsMouseOver" Value="True">
                            <Setter TargetName="bdr" Property="Background" >
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#CCDCE5F7" Offset="1.0"/>
                                        <GradientStop Color="#CCDCE5F7" Offset="0.0"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="Button.IsPressed" Value="True">
                            <Setter TargetName="bdr" Property="Opacity" Value="0.8" ></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GreenButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="bdr" SnapsToDevicePixels="True" Background="#FFBBE493" KeyboardNavigation.IsTabStop="False" BorderBrush="LightGray" BorderThickness="{TemplateBinding BorderThickness}" >
                        <Grid Margin="0,0,0,0" x:Name="btnGrid" KeyboardNavigation.IsTabStop="False" >
                            <ContentControl x:Name="content" KeyboardNavigation.IsTabStop="False" Content="{TemplateBinding Content}" Foreground="Black" >
                            </ContentControl>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsEnabled" Value="False">
                            <Setter TargetName="bdr" Property="Opacity" Value="0.4" />
                        </Trigger>
                        <Trigger Property="Button.IsMouseOver" Value="True">
                            <Setter TargetName="bdr" Property="Opacity" Value="0.6" />
                        </Trigger>
                        <Trigger Property="Button.IsPressed" Value="True">
                            <Setter TargetName="bdr" Property="Opacity" Value="0.8" ></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RedButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="bdr" SnapsToDevicePixels="True" Background="#FFEEA2A2" KeyboardNavigation.IsTabStop="False" BorderBrush="LightGray" BorderThickness="{TemplateBinding BorderThickness}" >
                        <Grid Margin="0,0,0,0" x:Name="btnGrid" KeyboardNavigation.IsTabStop="False" >
                            <ContentControl x:Name="content" KeyboardNavigation.IsTabStop="False" Content="{TemplateBinding Content}" Foreground="Black" >
                            </ContentControl>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsEnabled" Value="False">
                            <Setter TargetName="bdr" Property="Opacity" Value="0.4" />
                        </Trigger>
                        <Trigger Property="Button.IsMouseOver" Value="True">
                            <Setter TargetName="bdr" Property="Opacity" Value="0.6" />
                        </Trigger>
                        <Trigger Property="Button.IsPressed" Value="True">
                            <Setter TargetName="bdr" Property="Opacity" Value="0.8" ></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="BlueButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="bdr" SnapsToDevicePixels="True" Background="#FFA2C8EE" KeyboardNavigation.IsTabStop="False" BorderBrush="LightGray" BorderThickness="{TemplateBinding BorderThickness}" >
                        <Grid Margin="0,0,0,0" x:Name="btnGrid" KeyboardNavigation.IsTabStop="False" >
                            <ContentControl x:Name="content" KeyboardNavigation.IsTabStop="False" Content="{TemplateBinding Content}" Foreground="Black" >
                            </ContentControl>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsEnabled" Value="False">
                            <Setter TargetName="bdr" Property="Opacity" Value="0.4" />
                        </Trigger>
                        <Trigger Property="Button.IsMouseOver" Value="True">
                            <Setter TargetName="bdr" Property="Opacity" Value="0.6" />
                        </Trigger>
                        <Trigger Property="Button.IsPressed" Value="True">
                            <Setter TargetName="bdr" Property="Opacity" Value="0.8" ></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <DockPanel Margin="0">
                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" KeyboardNavigation.DirectionalNavigation="Local" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </DockPanel>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0.0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                        <ScrollBar x:Name="PART_VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0.0" Orientation="Vertical" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                        <DockPanel Background="{Binding Background, ElementName=PART_VerticalScrollBar}" Grid.Column="1" LastChildFill="false" Grid.Row="1">
                            <Rectangle DockPanel.Dock="Left" Fill="White" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Width="1"/>
                            <Rectangle DockPanel.Dock="Top" Fill="White" Height="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                        </DockPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListViewStyleLargeCollections" TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Foreground" Value="#FF042271"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border x:Name="Bd" BorderThickness="0" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ScrollViewer Padding="{TemplateBinding Padding}" Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

   

    <Style x:Key="defaultMenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="FontSize" Value="15" />
        <Setter Property="Padding" Value="3,3,3,3" />

       
        <Style.BasedOn>
            <Style TargetType="{x:Type MenuItem}">
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
                <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
                <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
                <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Uid="Border_38">
                                <Grid x:Name="Grid" Uid="Grid_49">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MinWidth="17" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                                        <ColumnDefinition Width="14"/>
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="0,0,6,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                    <Path x:Name="GlyphPanel" Data="M0,2L0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6z" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="4,0,6,0" Uid="Path_12" Visibility="Hidden" VerticalAlignment="Center"/>
                                    <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="1" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Uid="ContentPresenter_33"/>
                                    <TextBlock x:Name="InputGestureText" Grid.Column="2" DockPanel.Dock="Right" Margin="5,2,0,2" Text="{TemplateBinding InputGestureText}" Uid="TextBlock_10"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="IsHighlighted" Value="True">
                                    <Setter Property="Foreground" Value="Black"/>
                                    <Setter Property="Background" Value="{StaticResource mnuItemSelectedBackground}"/>
                                    <Setter Property="BorderBrush" Value="#ff7DA2CE"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.3"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.BasedOn>
    </Style>


    <Style x:Key="sTextBlockToClipboard" TargetType="{x:Type TextBlock}">
        <Style.Resources>
            <Color x:Key="cClipboardOn" >#FF66B908</Color>
            <SolidColorBrush x:Key="bClipboardOn" Color="{StaticResource cClipboardOn}" />
            <Color x:Key="foreground" >#FF000000</Color>
            <SolidColorBrush x:Key="bforeground" Color="{StaticResource foreground}" />
        </Style.Resources>
        
        <Setter Property="TextDecorations" Value="None" />

        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource foreground}" />
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextDecorations" Value="Underline" />
            </Trigger>

            <EventTrigger RoutedEvent="MouseRightButtonUp" >
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="{x:Null}" Storyboard.TargetProperty="Foreground.Color">
                            <DiscreteColorKeyFrame KeyTime="0:0:0" Value="{StaticResource cClipboardOn}" />
                            <LinearColorKeyFrame KeyTime="0:0:0.3" Value="{StaticResource foreground}" />
                        </ColorAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="sTextBlockToClipboardGray" TargetType="{x:Type TextBlock}">
        <Style.Resources>
            <Color x:Key="cClipboardOn" >#FF66B908</Color>
            <SolidColorBrush x:Key="bClipboardOn" Color="{StaticResource cClipboardOn}" />
            <Color x:Key="foreground" >#FF808080</Color>
            <SolidColorBrush x:Key="bforeground" Color="{StaticResource foreground}" />
        </Style.Resources>

        <Setter Property="TextDecorations" Value="None" />

        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource foreground}" />
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextDecorations" Value="Underline" />
            </Trigger>

            <EventTrigger RoutedEvent="MouseRightButtonUp" >
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="{x:Null}" Storyboard.TargetProperty="Foreground.Color">
                            <DiscreteColorKeyFrame KeyTime="0:0:0" Value="{StaticResource cClipboardOn}" />
                            <LinearColorKeyFrame KeyTime="0:0:0.3" Value="{StaticResource foreground}" />
                        </ColorAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="sTextBlockLeftOpenRightClipboard" TargetType="{x:Type TextBlock}">
        <Style.Resources>
            <Color x:Key="cClipboardOn" >#FF66B908</Color>
            <SolidColorBrush x:Key="bClipboardOn" Color="{StaticResource cClipboardOn}" />
            <Color x:Key="foreground" >#FF000000</Color>
            <SolidColorBrush x:Key="bforeground" Color="{StaticResource foreground}" />
        </Style.Resources>

        <Setter Property="TextDecorations" Value="None" />

        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource foreground}" />
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextDecorations" Value="Underline" />
            </Trigger>

            <EventTrigger RoutedEvent="MouseLeftButtonUp" >
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="{x:Null}" Storyboard.TargetProperty="Foreground.Color">
                            <DiscreteColorKeyFrame KeyTime="0:0:0" Value="{StaticResource cClipboardOn}" />
                            <LinearColorKeyFrame KeyTime="0:0:0.3" Value="{StaticResource foreground}" />
                        </ColorAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>

            <EventTrigger RoutedEvent="MouseRightButtonUp" >
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="{x:Null}" Storyboard.TargetProperty="Foreground.Color">
                            <DiscreteColorKeyFrame KeyTime="0:0:0" Value="{StaticResource cClipboardOn}" />
                            <LinearColorKeyFrame KeyTime="0:0:0.3" Value="{StaticResource foreground}" />
                        </ColorAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="sTextBoxLeftOpenRightClipboard" TargetType="{x:Type TextBox}">
        <Style.Resources>
            <Color x:Key="cClipboardOn" >#FF66B908</Color>
            <SolidColorBrush x:Key="bClipboardOn" Color="{StaticResource cClipboardOn}" />
            <Color x:Key="foreground" >#FF000000</Color>
            <SolidColorBrush x:Key="bforeground" Color="{StaticResource foreground}" />
        </Style.Resources>

        <Setter Property="TextDecorations" Value="None" />

        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource foreground}" />
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextDecorations" Value="Underline" />
            </Trigger>

            <EventTrigger RoutedEvent="MouseLeftButtonUp" >
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="{x:Null}" Storyboard.TargetProperty="Foreground.Color">
                            <DiscreteColorKeyFrame KeyTime="0:0:0" Value="{StaticResource cClipboardOn}" />
                            <LinearColorKeyFrame KeyTime="0:0:0.3" Value="{StaticResource foreground}" />
                        </ColorAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>

            <EventTrigger RoutedEvent="MouseRightButtonUp" >
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="{x:Null}" Storyboard.TargetProperty="Foreground.Color">
                            <DiscreteColorKeyFrame KeyTime="0:0:0" Value="{StaticResource cClipboardOn}" />
                            <LinearColorKeyFrame KeyTime="0:0:0.3" Value="{StaticResource foreground}" />
                        </ColorAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="NoteButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="bdr" Padding="1,1,1,1" Background="Transparent" SnapsToDevicePixels="True" CornerRadius="1" BorderThickness="1" BorderBrush="Transparent">
                        <ContentPresenter />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="bdr" Property="BorderBrush" Value="#FFF79F35" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="bdr" Property="Opacity" Value="0.6" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="bdr" Property="Opacity" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="standardButtonBrighterStyle" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderBrush" Value="#FFA6A6A6" />
        <Setter Property="Background" Value="#FFF7F7F7" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="bdr" SnapsToDevicePixels="True" Background="{TemplateBinding Background}" CornerRadius="0,0,0,0" TextBlock.FontSize="{TemplateBinding FontSize}" TextBlock.FontWeight="Medium" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" >
                        <Grid Margin="{TemplateBinding Padding}" x:Name="btnGrid" >
                            <ContentControl x:Name="content" Content="{TemplateBinding Content}" Foreground="Black" KeyboardNavigation.IsTabStop="False" HorizontalAlignment="Center" VerticalAlignment="Center">
                            </ContentControl>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsEnabled" Value="False">
                            <Setter TargetName="bdr" Property="Opacity" Value="0.4" />
                        </Trigger>
                        <Trigger Property="Button.IsMouseOver" Value="True">
                            <Setter TargetName="bdr" Property="Background" Value="{StaticResource OverBrush}" >
                            </Setter>
                        </Trigger>
                        <Trigger Property="Button.IsPressed" Value="True">
                            <Setter TargetName="bdr" Property="Opacity" Value="0.8" ></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="ComboBoxNormalBorderBrush" Color="LightGray" />
    <SolidColorBrush x:Key="ComboBoxNormalBackgroundBrush" Color="#fff" />
    <SolidColorBrush x:Key="ComboBoxDisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="ComboBoxDisabledBackgroundBrush" Color="#eee" />
    <SolidColorBrush x:Key="ComboBoxDisabledBorderBrush" Color="#888" />

    <Geometry x:Key="DownArrowGeometry">M 0 0 L 10 12 L 20 0 Z</Geometry>

    <ControlTemplate x:Key="ComboBoxToggleButtonTemplate" TargetType="ToggleButton" >
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="50" />
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="2" Name="Border" BorderBrush="{StaticResource ComboBoxNormalBorderBrush}" CornerRadius="0" BorderThickness="1, 1, 1, 1" Background="{StaticResource ComboBoxNormalBackgroundBrush}" />
            <Border Grid.Column="1" Margin="1, 1, 1, 1" BorderBrush="#444" Name="ButtonBorder" CornerRadius="0, 0, 0, 0" BorderThickness="0, 0, 0, 0" Background="{StaticResource ComboBoxNormalBackgroundBrush}" />

            <Path x:Name="Arrow" Grid.Column="1" Data="{StaticResource DownArrowGeometry}" Fill="#444" HorizontalAlignment="Center" Margin="1,1,0,0" VerticalAlignment="Center"/>
            <!-- <Path Name="Arrow" Grid.Column="1" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" HorizontalAlignment="Center" Fill="#444" VerticalAlignment="Center" /> -->
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="WhiteSmoke"/>
                <Setter Property="Border.BorderThickness" TargetName="ButtonBorder" Value="1,0,0,0"/>
                <Setter Property="Border.BorderBrush" TargetName="ButtonBorder" Value="{StaticResource ComboBoxNormalBorderBrush}"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="WhiteSmoke"/>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="#FF8D979E"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Property="Panel.Background" TargetName="Border" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                <Setter Property="Border.BorderBrush" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBorderBrush}"/>
                <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="#999"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <Style x:Key="ComboBoxFlatFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="3" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxFlatStyle"  TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ComboBoxFlatFocusVisual}"/>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="TextElement.Foreground" Value="Black"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Name="ToggleButton" Grid.Column="2" ClickMode="Press" Focusable="False" IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" Template="{StaticResource ComboBoxToggleButtonTemplate}"/>

                        <ContentPresenter Name="ContentSite" Margin="5, 3, 23, 3" IsHitTestVisible="False"
                                                          HorizontalAlignment="Left" VerticalAlignment="Center"                          
                                                          Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                                                          ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
                        
                        <TextBox Name="PART_EditableTextBox" Margin="3, 3, 23, 3" IsReadOnly="{TemplateBinding IsReadOnly}" Visibility="Hidden" Background="Transparent" HorizontalAlignment="Left" VerticalAlignment="Center" Focusable="True" >
                            <TextBox.Template>
                                <ControlTemplate TargetType="TextBox" >
                                    <Border Name="PART_ContentHost" Focusable="False" />
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>
                        
                        <!-- Popup showing items -->
                        <Popup Name="Popup" Placement="Bottom" Focusable="False" AllowsTransparency="True" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" PopupAnimation="Slide">
                            <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                <Border Name="DropDownBorder" Background="White" Margin="0, 1, 0, 0" CornerRadius="0" BorderThickness="1,1,1,1"  BorderBrush="{StaticResource ComboBoxNormalBorderBrush}"/>
                                <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                        <Trigger Property="ComboBox.IsEditable" Value="True">
                            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                            <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                            <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="sSettingsGroupBox" TargetType="GroupBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <!-- Header style -->
                        <Border Grid.Row="0" BorderThickness="0,0,0,0" BorderBrush="LightGray" SnapsToDevicePixels="True" >
                            <ContentPresenter Margin="0,0,0,0" ContentSource="Header" RecognizesAccessKey="True" >
                                <ContentPresenter.Resources>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="FontSize" Value="22"/>
                                        <Setter Property="Foreground"  Value="#FF929292"/>
                                        <Setter Property="FontWeight"  Value="400"/>
                                        <Setter Property="HorizontalAlignment" Value="Left" />
                                    </Style>
                                </ContentPresenter.Resources>
                            </ContentPresenter>
                        </Border>

                        <!-- Content style -->
                        <Border Grid.Row="1" BorderThickness="0,0,0,0" BorderBrush="LightGray" SnapsToDevicePixels="True">
                            <ScrollViewer VerticalScrollBarVisibility="Auto">
                                <ContentPresenter Margin="20,10,20,0" />
                            </ScrollViewer>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="listBoxItemTransparentMouseOver" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



</ResourceDictionary>